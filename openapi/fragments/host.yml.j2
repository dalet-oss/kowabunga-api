{%- import "openapi/oas.macros.yml.j2" as oas with context %}

components:
  schemas:
{{ oas.Schema(resources.host_tls, ['key', 'cert', 'ca']) }}
{{ oas.StringProperty('key', 'The TLS client private key') }}
{{ oas.StringProperty('cert', 'The TLS client public cert') }}
{{ oas.StringProperty('ca', 'The TLS certificate of authority') }}

{{ oas.SchemaBaseResource(resources.host, ['name', 'protocol', 'address']) }}
{{ oas.StringProperty('protocol', 'The protocol to use to issue libvirt connection', values=['tcp', 'tls']) }}
{{ oas.StringProperty('address', "The host libvirt's IPv4 address") }}
{{ oas.IntProperty('port', "The host libvirt's port") }}
{{ oas.ObjectProperty('tls', "The host libvirt's TLS configuration", resources.host_tls.schema) }}
{{ oas.ObjectProperty('cpu_cost', "Cost associated to the host's CPU resources", resources.cost.schema) }}
{{ oas.ObjectProperty('memory_cost', "Cost associated to the host's memoery resources", resources.cost.schema) }}
{{ oas.IntProperty('overcommit_cpu_ratio', 'The host CPU resource over-commit ratio. Overcommitting CPU resources for VMs means allocating more virtual CPUs (vCPUs) to the virtual machines (VMs) than the physical cores available on the host. This can help optimize the utilization of the host CPU and increase the density of VMs per host', default=3) }}
{{ oas.IntProperty('overcommit_memory_ratio', 'The host memory resource over-commit ratio. Memory overcommitment is a concept in computing that covers the assignment of more memory to virtual computing devices (or processes) than the physical machine they are hosted, or running on, actually has', default=2) }}

{{ oas.Schema(resources.host_caps, ['version', 'uuid', 'cpu', 'memory']) }}
{{ oas.StringProperty('version', 'The ' + resources.host.desc + ' libvirt version') }}
{{ oas.StringProperty('uuid', 'The ' + resources.host.desc + ' domain UUID') }}
{{ oas.ObjectProperty('cpu', 'The ' + resources.host.desc + ' CPU characteristics', resources.host_cpu.schema) }}
{{ oas.IntProperty('memory', 'The ' + resources.host.desc + ' memory size (bytes)') }}

{{ oas.Schema(resources.host_cpu, ['arch', 'model', 'vendor', 'sockets', 'cores', 'threads']) }}
{{ oas.StringProperty('arch', 'The ' + resources.host.desc + ' CPU architecture') }}
{{ oas.StringProperty('model', 'The ' + resources.host.desc + ' CPU model') }}
{{ oas.StringProperty('vendor', 'The ' + resources.host.desc + ' CPU vendor') }}
{{ oas.IntProperty('sockets', 'The ' + resources.host.desc + ' CPU number of sockets') }}
{{ oas.IntProperty('cores', 'The ' + resources.host.desc + ' CPU number of cores') }}
{{ oas.IntProperty('threads', 'The ' + resources.host.desc + ' CPU number of threads') }}

  parameters:
{{ oas.PathParamID(resources.host) }}
{{ oas.StringQueryParam(resources.host.paramSchema, resources.host.paramId, 'The ID of the computing host (useless for RBD pools, mandatory for local ones)') }}

paths:
  /host:
{{ oas.List(resources.host, [resources.host.tag]) }}

  /host/{{ '{' + resources.host.paramId + '}' }}:
{{ oas.RUD(resources.host, [resources.host.tag], [resources.host.paramSchema]) }}

  /host/{{ '{' + resources.host.paramId + '}' }}/caps:
{{ oas.Parameters([resources.host.paramSchema]) }}
{{ oas.Read('ReadHostCaps', resources.host_caps.schema, resources.host_caps.desc, [resources.host.tag]) }}

  /host/{{ '{' + resources.host.paramId + '}' }}/instances:
{{ oas.Parameters([resources.host.paramSchema]) }}
{{ oas.GetAll('List' + resources.host.schema + resources.instance.schema + 's', resources.instance.desc, [resources.host.tag, resources.instance.tag], True) }}
