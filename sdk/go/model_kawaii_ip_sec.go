/*
Kowabunga API documentation

Kvm Orchestrator With A BUNch of Goods Added

API version: 0.51.1
Contact: csops@dalet.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the KawaiiIpSec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KawaiiIpSec{}

// KawaiiIpSec A Kawaii IPsec connection.
type KawaiiIpSec struct {
	// The Kawaii IPsec connection name.
	Name *string `json:"name,omitempty"`
	// The Kawaii IPsec connection remote peer VPN Gateway.
	RemoteIp *string `json:"remote_ip,omitempty"`
	// The Kawaii IPsec connection remote subnet.
	RemoteSubnet *string `json:"remote_subnet,omitempty"`
	// The Kawaii IPsec connection pre-shared key(PSK).
	PreSharedKey *string `json:"pre_shared_key,omitempty"`
	// The Kawaii IPsec connection firewall settings on the ipsec interface.
	Firewall KawaiiFirewall `json:"firewall,omitempty"`
}

// NewKawaiiIpSec instantiates a new KawaiiIpSec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKawaiiIpSec() *KawaiiIpSec {
	this := KawaiiIpSec{}
	return &this
}

// NewKawaiiIpSecWithDefaults instantiates a new KawaiiIpSec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKawaiiIpSecWithDefaults() *KawaiiIpSec {
	this := KawaiiIpSec{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *KawaiiIpSec) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KawaiiIpSec) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *KawaiiIpSec) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *KawaiiIpSec) SetName(v string) {
	o.Name = &v
}

// GetRemoteIp returns the RemoteIp field value if set, zero value otherwise.
func (o *KawaiiIpSec) GetRemoteIp() string {
	if o == nil || IsNil(o.RemoteIp) {
		var ret string
		return ret
	}
	return *o.RemoteIp
}

// GetRemoteIpOk returns a tuple with the RemoteIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KawaiiIpSec) GetRemoteIpOk() (*string, bool) {
	if o == nil || IsNil(o.RemoteIp) {
		return nil, false
	}
	return o.RemoteIp, true
}

// HasRemoteIp returns a boolean if a field has been set.
func (o *KawaiiIpSec) HasRemoteIp() bool {
	if o != nil && !IsNil(o.RemoteIp) {
		return true
	}

	return false
}

// SetRemoteIp gets a reference to the given string and assigns it to the RemoteIp field.
func (o *KawaiiIpSec) SetRemoteIp(v string) {
	o.RemoteIp = &v
}

// GetRemoteSubnet returns the RemoteSubnet field value if set, zero value otherwise.
func (o *KawaiiIpSec) GetRemoteSubnet() string {
	if o == nil || IsNil(o.RemoteSubnet) {
		var ret string
		return ret
	}
	return *o.RemoteSubnet
}

// GetRemoteSubnetOk returns a tuple with the RemoteSubnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KawaiiIpSec) GetRemoteSubnetOk() (*string, bool) {
	if o == nil || IsNil(o.RemoteSubnet) {
		return nil, false
	}
	return o.RemoteSubnet, true
}

// HasRemoteSubnet returns a boolean if a field has been set.
func (o *KawaiiIpSec) HasRemoteSubnet() bool {
	if o != nil && !IsNil(o.RemoteSubnet) {
		return true
	}

	return false
}

// SetRemoteSubnet gets a reference to the given string and assigns it to the RemoteSubnet field.
func (o *KawaiiIpSec) SetRemoteSubnet(v string) {
	o.RemoteSubnet = &v
}

// GetPreSharedKey returns the PreSharedKey field value if set, zero value otherwise.
func (o *KawaiiIpSec) GetPreSharedKey() string {
	if o == nil || IsNil(o.PreSharedKey) {
		var ret string
		return ret
	}
	return *o.PreSharedKey
}

// GetPreSharedKeyOk returns a tuple with the PreSharedKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KawaiiIpSec) GetPreSharedKeyOk() (*string, bool) {
	if o == nil || IsNil(o.PreSharedKey) {
		return nil, false
	}
	return o.PreSharedKey, true
}

// HasPreSharedKey returns a boolean if a field has been set.
func (o *KawaiiIpSec) HasPreSharedKey() bool {
	if o != nil && !IsNil(o.PreSharedKey) {
		return true
	}

	return false
}

// SetPreSharedKey gets a reference to the given string and assigns it to the PreSharedKey field.
func (o *KawaiiIpSec) SetPreSharedKey(v string) {
	o.PreSharedKey = &v
}

// GetFirewall returns the Firewall field value if set, zero value otherwise.
func (o *KawaiiIpSec) GetFirewall() KawaiiFirewall {
	if o == nil || IsNil(o.Firewall) {
		var ret KawaiiFirewall
		return ret
	}
	return o.Firewall
}

// GetFirewallOk returns a tuple with the Firewall field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KawaiiIpSec) GetFirewallOk() (KawaiiFirewall, bool) {
	if o == nil || IsNil(o.Firewall) {
		return KawaiiFirewall{}, false
	}
	return o.Firewall, true
}

// HasFirewall returns a boolean if a field has been set.
func (o *KawaiiIpSec) HasFirewall() bool {
	if o != nil && !IsNil(o.Firewall) {
		return true
	}

	return false
}

// SetFirewall gets a reference to the given KawaiiFirewall and assigns it to the Firewall field.
func (o *KawaiiIpSec) SetFirewall(v KawaiiFirewall) {
	o.Firewall = v
}

func (o KawaiiIpSec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KawaiiIpSec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.RemoteIp) {
		toSerialize["remote_ip"] = o.RemoteIp
	}
	if !IsNil(o.RemoteSubnet) {
		toSerialize["remote_subnet"] = o.RemoteSubnet
	}
	if !IsNil(o.PreSharedKey) {
		toSerialize["pre_shared_key"] = o.PreSharedKey
	}
	if !IsNil(o.Firewall) {
		toSerialize["firewall"] = o.Firewall
	}
	return toSerialize, nil
}

type NullableKawaiiIpSec struct {
	value *KawaiiIpSec
	isSet bool
}

func (v NullableKawaiiIpSec) Get() *KawaiiIpSec {
	return v.value
}

func (v *NullableKawaiiIpSec) Set(val *KawaiiIpSec) {
	v.value = val
	v.isSet = true
}

func (v NullableKawaiiIpSec) IsSet() bool {
	return v.isSet
}

func (v *NullableKawaiiIpSec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKawaiiIpSec(val *KawaiiIpSec) *NullableKawaiiIpSec {
	return &NullableKawaiiIpSec{value: val, isSet: true}
}

func (v NullableKawaiiIpSec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKawaiiIpSec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


