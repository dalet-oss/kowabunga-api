// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KFS Kowabunga File System (KFS) provides an elastic NFS-like remote storage volume.
//
// swagger:model KFS
type KFS struct {

	// The KFS storage volume access type.
	// Enum: [RO RW]
	Access *string `json:"access,omitempty"`

	// The KFS storage volume description.
	Description string `json:"description,omitempty"`

	// The KFS endpoint FQDN (read-only).
	Endpoint string `json:"endpoint,omitempty"`

	// The KFS ID (auto-generated).
	ID string `json:"id,omitempty"`

	// The KFS storage volume name.
	// Required: true
	Name *string `json:"name"`

	// The KFS storage volume's NFS protocol versions to be supported.
	Protocols []int64 `json:"protocols"`

	// The KFS storage volume bytes used (read-only).
	Size int64 `json:"size,omitempty"`
}

// Validate validates this k f s
func (m *KFS) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccess(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocols(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var kFSTypeAccessPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["RO","RW"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		kFSTypeAccessPropEnum = append(kFSTypeAccessPropEnum, v)
	}
}

const (

	// KFSAccessRO captures enum value "RO"
	KFSAccessRO string = "RO"

	// KFSAccessRW captures enum value "RW"
	KFSAccessRW string = "RW"
)

// prop value enum
func (m *KFS) validateAccessEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, kFSTypeAccessPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *KFS) validateAccess(formats strfmt.Registry) error {
	if swag.IsZero(m.Access) { // not required
		return nil
	}

	// value enum
	if err := m.validateAccessEnum("access", "body", *m.Access); err != nil {
		return err
	}

	return nil
}

func (m *KFS) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var kFSProtocolsItemsEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[3,4]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		kFSProtocolsItemsEnum = append(kFSProtocolsItemsEnum, v)
	}
}

func (m *KFS) validateProtocolsItemsEnum(path, location string, value int64) error {
	if err := validate.EnumCase(path, location, value, kFSProtocolsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *KFS) validateProtocols(formats strfmt.Registry) error {
	if swag.IsZero(m.Protocols) { // not required
		return nil
	}

	for i := 0; i < len(m.Protocols); i++ {

		// value enum
		if err := m.validateProtocolsItemsEnum("protocols"+"."+strconv.Itoa(i), "body", m.Protocols[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this k f s based on context it is used
func (m *KFS) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *KFS) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KFS) UnmarshalBinary(b []byte) error {
	var res KFS
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
