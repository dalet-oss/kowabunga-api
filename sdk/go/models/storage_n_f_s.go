// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StorageNFS storage n f s
//
// swagger:model StorageNFS
type StorageNFS struct {

	// List of NFS Ganesha API server IP addresses.
	Backends []string `json:"backends"`

	// The NFS storage description.
	Description string `json:"description,omitempty"`

	// The associated NFS endpoint FQDN.
	// Required: true
	Endpoint *string `json:"endpoint"`

	// The underlying associated CephFS volume name.
	Fs *string `json:"fs,omitempty"`

	// The NFS storage ID (auto-generated).
	ID string `json:"id,omitempty"`

	// The NFS storage name.
	// Required: true
	Name *string `json:"name"`

	// NFS Ganesha API server port (default 54934).
	Port *int64 `json:"port,omitempty"`
}

// Validate validates this storage n f s
func (m *StorageNFS) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageNFS) validateEndpoint(formats strfmt.Registry) error {

	if err := validate.Required("endpoint", "body", m.Endpoint); err != nil {
		return err
	}

	return nil
}

func (m *StorageNFS) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this storage n f s based on context it is used
func (m *StorageNFS) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StorageNFS) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageNFS) UnmarshalBinary(b []byte) error {
	var res StorageNFS
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
