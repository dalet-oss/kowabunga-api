// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// KGW Kowabunga Network Gateway is a network gateway used for your internet inbound and outbound traffic
//
// swagger:model KGW
type KGW struct {

	// The KGW description.
	Description string `json:"description,omitempty"`

	// The Kowabunga network gateway ID (auto-generated).
	ID string `json:"id,omitempty"`

	// nats
	Nats []*KGWNatsItems0 `json:"nats"`

	// The Kowabunga network gateway private IP (read only)
	PrivateIP string `json:"private_ip,omitempty"`

	// The Kowabunga network gateway public IPs (read only)
	PublicIP string `json:"public_ip,omitempty"`
}

// Validate validates this k g w
func (m *KGW) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNats(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KGW) validateNats(formats strfmt.Registry) error {
	if swag.IsZero(m.Nats) { // not required
		return nil
	}

	for i := 0; i < len(m.Nats); i++ {
		if swag.IsZero(m.Nats[i]) { // not required
			continue
		}

		if m.Nats[i] != nil {
			if err := m.Nats[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nats" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nats" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this k g w based on the context it is used
func (m *KGW) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KGW) contextValidateNats(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Nats); i++ {

		if m.Nats[i] != nil {

			if swag.IsZero(m.Nats[i]) { // not required
				return nil
			}

			if err := m.Nats[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nats" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nats" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *KGW) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KGW) UnmarshalBinary(b []byte) error {
	var res KGW
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// KGWNatsItems0 A list of provided or generated public/private IPs mapping
//
// swagger:model KGWNatsItems0
type KGWNatsItems0 struct {

	// ports
	Ports []uint16 `json:"ports"`

	// Target Private IP. Leave blank for a new generated one
	PrivateIP string `json:"private_ip,omitempty"`

	// Public IP from created Adapter. Leave empty to use the default Public IP
	PublicIP string `json:"public_ip,omitempty"`
}

// Validate validates this k g w nats items0
func (m *KGWNatsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this k g w nats items0 based on context it is used
func (m *KGWNatsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *KGWNatsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KGWNatsItems0) UnmarshalBinary(b []byte) error {
	var res KGWNatsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
