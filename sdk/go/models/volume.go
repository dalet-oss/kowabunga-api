// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Volume volume
//
// swagger:model Volume
type Volume struct {

	// The storage volume description.
	Description string `json:"description,omitempty"`

	// The storage volume ID (auto-generated).
	ID string `json:"id,omitempty"`

	// The storage volume name.
	// Required: true
	Name *string `json:"name"`

	// Is the storage volume allowed to grow (filesystem dependant) ?
	Resizable *bool `json:"resizable,omitempty"`

	// The storage volume size in bytes.
	// Required: true
	Size *int64 `json:"size"`

	// The type of storage volume.
	// Required: true
	// Enum: [os iso raw]
	Type *string `json:"type"`
}

// Validate validates this volume
func (m *Volume) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Volume) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Volume) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

var volumeTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["os","iso","raw"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		volumeTypeTypePropEnum = append(volumeTypeTypePropEnum, v)
	}
}

const (

	// VolumeTypeOs captures enum value "os"
	VolumeTypeOs string = "os"

	// VolumeTypeIso captures enum value "iso"
	VolumeTypeIso string = "iso"

	// VolumeTypeRaw captures enum value "raw"
	VolumeTypeRaw string = "raw"
)

// prop value enum
func (m *Volume) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, volumeTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Volume) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this volume based on context it is used
func (m *Volume) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Volume) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Volume) UnmarshalBinary(b []byte) error {
	var res Volume
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
