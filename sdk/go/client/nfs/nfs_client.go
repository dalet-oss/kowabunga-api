// Code generated by go-swagger; DO NOT EDIT.

package nfs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new nfs API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for nfs API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteNfsStorage(params *DeleteNfsStorageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNfsStorageOK, error)

	GetAllNfsStorages(params *GetAllNfsStoragesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllNfsStoragesOK, error)

	GetNfsKfs(params *GetNfsKfsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNfsKfsOK, error)

	GetNfsStorage(params *GetNfsStorageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNfsStorageOK, error)

	UpdateNfsStorage(params *UpdateNfsStorageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNfsStorageOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteNfsStorage Deletes an existing NFS storage.
*/
func (a *Client) DeleteNfsStorage(params *DeleteNfsStorageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNfsStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNfsStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteNfsStorage",
		Method:             "DELETE",
		PathPattern:        "/nfs/{nfsId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteNfsStorageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNfsStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteNfsStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllNfsStorages Returns the IDs of registered NFS storages.
*/
func (a *Client) GetAllNfsStorages(params *GetAllNfsStoragesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllNfsStoragesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllNfsStoragesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAllNfsStorages",
		Method:             "GET",
		PathPattern:        "/nfs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllNfsStoragesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllNfsStoragesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAllNfsStorages: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetNfsKfs Returns the IDs of the KFS volumes existing in the NFS storage.
*/
func (a *Client) GetNfsKfs(params *GetNfsKfsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNfsKfsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNfsKfsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetNfsKfs",
		Method:             "GET",
		PathPattern:        "/nfs/{nfsId}/kfs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNfsKfsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNfsKfsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetNfsKfs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetNfsStorage Returns a description of the NFS storage.
*/
func (a *Client) GetNfsStorage(params *GetNfsStorageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNfsStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNfsStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetNfsStorage",
		Method:             "GET",
		PathPattern:        "/nfs/{nfsId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNfsStorageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNfsStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetNfsStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateNfsStorage Updates an NFS storage configuration.
*/
func (a *Client) UpdateNfsStorage(params *UpdateNfsStorageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNfsStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNfsStorageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateNfsStorage",
		Method:             "PUT",
		PathPattern:        "/nfs/{nfsId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateNfsStorageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNfsStorageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateNfsStorage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
