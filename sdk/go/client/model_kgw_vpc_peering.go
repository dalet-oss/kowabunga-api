/*
Kowabunga API documentation

Kvm Orchestrator With A BUNch of Goods Added

API version: 0.34.0
Contact: csops@dalet.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the KGWVpcPeering type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KGWVpcPeering{}

// KGWVpcPeering A KGW internal VPC subnet peering.
type KGWVpcPeering struct {
	// Kowabunga Subnet ID to be peered with (IP addresses will be automatically assigned into)..
	Subnet string `json:"subnet"`
	// Ports to be reachable from peered subnet. Accept Ranges. If specified, traffic will be filtered..
	Ports *string `json:"ports,omitempty"`
	// The KGW (Kowabunga Network Gateway) auto-assigned private IPs in peered subnet (read-only).
	Ips []string `json:"ips,omitempty"`
}

type _KGWVpcPeering KGWVpcPeering

// NewKGWVpcPeering instantiates a new KGWVpcPeering object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKGWVpcPeering(subnet string) *KGWVpcPeering {
	this := KGWVpcPeering{}
	this.Subnet = subnet
	return &this
}

// NewKGWVpcPeeringWithDefaults instantiates a new KGWVpcPeering object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKGWVpcPeeringWithDefaults() *KGWVpcPeering {
	this := KGWVpcPeering{}
	return &this
}

// GetSubnet returns the Subnet field value
func (o *KGWVpcPeering) GetSubnet() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subnet
}

// GetSubnetOk returns a tuple with the Subnet field value
// and a boolean to check if the value has been set.
func (o *KGWVpcPeering) GetSubnetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subnet, true
}

// SetSubnet sets field value
func (o *KGWVpcPeering) SetSubnet(v string) {
	o.Subnet = v
}

// GetPorts returns the Ports field value if set, zero value otherwise.
func (o *KGWVpcPeering) GetPorts() string {
	if o == nil || IsNil(o.Ports) {
		var ret string
		return ret
	}
	return *o.Ports
}

// GetPortsOk returns a tuple with the Ports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KGWVpcPeering) GetPortsOk() (*string, bool) {
	if o == nil || IsNil(o.Ports) {
		return nil, false
	}
	return o.Ports, true
}

// HasPorts returns a boolean if a field has been set.
func (o *KGWVpcPeering) HasPorts() bool {
	if o != nil && !IsNil(o.Ports) {
		return true
	}

	return false
}

// SetPorts gets a reference to the given string and assigns it to the Ports field.
func (o *KGWVpcPeering) SetPorts(v string) {
	o.Ports = &v
}

// GetIps returns the Ips field value if set, zero value otherwise.
func (o *KGWVpcPeering) GetIps() []string {
	if o == nil || IsNil(o.Ips) {
		var ret []string
		return ret
	}
	return o.Ips
}

// GetIpsOk returns a tuple with the Ips field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KGWVpcPeering) GetIpsOk() ([]string, bool) {
	if o == nil || IsNil(o.Ips) {
		return nil, false
	}
	return o.Ips, true
}

// HasIps returns a boolean if a field has been set.
func (o *KGWVpcPeering) HasIps() bool {
	if o != nil && !IsNil(o.Ips) {
		return true
	}

	return false
}

// SetIps gets a reference to the given []string and assigns it to the Ips field.
func (o *KGWVpcPeering) SetIps(v []string) {
	o.Ips = v
}

func (o KGWVpcPeering) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KGWVpcPeering) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["subnet"] = o.Subnet
	if !IsNil(o.Ports) {
		toSerialize["ports"] = o.Ports
	}
	if !IsNil(o.Ips) {
		toSerialize["ips"] = o.Ips
	}
	return toSerialize, nil
}

func (o *KGWVpcPeering) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"subnet",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKGWVpcPeering := _KGWVpcPeering{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKGWVpcPeering)

	if err != nil {
		return err
	}

	*o = KGWVpcPeering(varKGWVpcPeering)

	return err
}

type NullableKGWVpcPeering struct {
	value *KGWVpcPeering
	isSet bool
}

func (v NullableKGWVpcPeering) Get() *KGWVpcPeering {
	return v.value
}

func (v *NullableKGWVpcPeering) Set(val *KGWVpcPeering) {
	v.value = val
	v.isSet = true
}

func (v NullableKGWVpcPeering) IsSet() bool {
	return v.isSet
}

func (v *NullableKGWVpcPeering) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKGWVpcPeering(val *KGWVpcPeering) *NullableKGWVpcPeering {
	return &NullableKGWVpcPeering{value: val, isSet: true}
}

func (v NullableKGWVpcPeering) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKGWVpcPeering) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


