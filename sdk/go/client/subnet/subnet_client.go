// Code generated by go-swagger; DO NOT EDIT.

package subnet

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new subnet API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for subnet API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateAdapter(params *CreateAdapterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAdapterCreated, error)

	DeleteSubnet(params *DeleteSubnetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSubnetOK, error)

	GetAllSubnets(params *GetAllSubnetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllSubnetsOK, error)

	GetSubnet(params *GetSubnetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSubnetOK, error)

	GetSubnetAdapters(params *GetSubnetAdaptersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSubnetAdaptersOK, error)

	UpdateSubnet(params *UpdateSubnetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSubnetOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateAdapter Creates a new network adapter.
*/
func (a *Client) CreateAdapter(params *CreateAdapterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAdapterCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAdapterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateAdapter",
		Method:             "POST",
		PathPattern:        "/subnet/{subnetId}/adapter",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateAdapterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAdapterCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateAdapter: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteSubnet Deletes an existing subnet.
*/
func (a *Client) DeleteSubnet(params *DeleteSubnetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSubnetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSubnetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteSubnet",
		Method:             "DELETE",
		PathPattern:        "/subnet/{subnetId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSubnetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSubnetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteSubnet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllSubnets Returns the IDs of subnets.
*/
func (a *Client) GetAllSubnets(params *GetAllSubnetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllSubnetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllSubnetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAllSubnets",
		Method:             "GET",
		PathPattern:        "/subnet",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllSubnetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllSubnetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAllSubnets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSubnet Returns a description of the subnet.
*/
func (a *Client) GetSubnet(params *GetSubnetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSubnetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSubnetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSubnet",
		Method:             "GET",
		PathPattern:        "/subnet/{subnetId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSubnetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSubnetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSubnet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSubnetAdapters Returns the IDs of the network adapters existing in the subnet.
*/
func (a *Client) GetSubnetAdapters(params *GetSubnetAdaptersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSubnetAdaptersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSubnetAdaptersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSubnetAdapters",
		Method:             "GET",
		PathPattern:        "/subnet/{subnetId}/adapters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSubnetAdaptersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSubnetAdaptersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSubnetAdapters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateSubnet Updates a subnet configuration.
*/
func (a *Client) UpdateSubnet(params *UpdateSubnetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSubnetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSubnetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateSubnet",
		Method:             "PUT",
		PathPattern:        "/subnet/{subnetId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateSubnetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSubnetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateSubnet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
