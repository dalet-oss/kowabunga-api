/*
Kowabunga API documentation

Kvm Orchestrator With A BUNch of Goods Added

API version: 0.10.0
Contact: csops@dalet.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HostCapsCpu type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HostCapsCpu{}

// HostCapsCpu the host CPU characteristics
type HostCapsCpu struct {
	// the host CPU architecture
	Arch string `json:"arch"`
	// the host CPU model
	Model string `json:"model"`
	// the host CPU vendor
	Vendor string `json:"vendor"`
	// the host CPU number of sockets
	Sockets int32 `json:"sockets"`
	// the host CPU number of cores
	Cores int32 `json:"cores"`
	// the host CPU number of threads
	Threads int32 `json:"threads"`
	// the host memory size in bytes
	Memory *int32 `json:"memory,omitempty"`
}

type _HostCapsCpu HostCapsCpu

// NewHostCapsCpu instantiates a new HostCapsCpu object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHostCapsCpu(arch string, model string, vendor string, sockets int32, cores int32, threads int32) *HostCapsCpu {
	this := HostCapsCpu{}
	this.Arch = arch
	this.Model = model
	this.Vendor = vendor
	this.Sockets = sockets
	this.Cores = cores
	this.Threads = threads
	return &this
}

// NewHostCapsCpuWithDefaults instantiates a new HostCapsCpu object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHostCapsCpuWithDefaults() *HostCapsCpu {
	this := HostCapsCpu{}
	return &this
}

// GetArch returns the Arch field value
func (o *HostCapsCpu) GetArch() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Arch
}

// GetArchOk returns a tuple with the Arch field value
// and a boolean to check if the value has been set.
func (o *HostCapsCpu) GetArchOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Arch, true
}

// SetArch sets field value
func (o *HostCapsCpu) SetArch(v string) {
	o.Arch = v
}

// GetModel returns the Model field value
func (o *HostCapsCpu) GetModel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Model
}

// GetModelOk returns a tuple with the Model field value
// and a boolean to check if the value has been set.
func (o *HostCapsCpu) GetModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Model, true
}

// SetModel sets field value
func (o *HostCapsCpu) SetModel(v string) {
	o.Model = v
}

// GetVendor returns the Vendor field value
func (o *HostCapsCpu) GetVendor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value
// and a boolean to check if the value has been set.
func (o *HostCapsCpu) GetVendorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Vendor, true
}

// SetVendor sets field value
func (o *HostCapsCpu) SetVendor(v string) {
	o.Vendor = v
}

// GetSockets returns the Sockets field value
func (o *HostCapsCpu) GetSockets() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Sockets
}

// GetSocketsOk returns a tuple with the Sockets field value
// and a boolean to check if the value has been set.
func (o *HostCapsCpu) GetSocketsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sockets, true
}

// SetSockets sets field value
func (o *HostCapsCpu) SetSockets(v int32) {
	o.Sockets = v
}

// GetCores returns the Cores field value
func (o *HostCapsCpu) GetCores() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Cores
}

// GetCoresOk returns a tuple with the Cores field value
// and a boolean to check if the value has been set.
func (o *HostCapsCpu) GetCoresOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cores, true
}

// SetCores sets field value
func (o *HostCapsCpu) SetCores(v int32) {
	o.Cores = v
}

// GetThreads returns the Threads field value
func (o *HostCapsCpu) GetThreads() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Threads
}

// GetThreadsOk returns a tuple with the Threads field value
// and a boolean to check if the value has been set.
func (o *HostCapsCpu) GetThreadsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Threads, true
}

// SetThreads sets field value
func (o *HostCapsCpu) SetThreads(v int32) {
	o.Threads = v
}

// GetMemory returns the Memory field value if set, zero value otherwise.
func (o *HostCapsCpu) GetMemory() int32 {
	if o == nil || IsNil(o.Memory) {
		var ret int32
		return ret
	}
	return *o.Memory
}

// GetMemoryOk returns a tuple with the Memory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostCapsCpu) GetMemoryOk() (*int32, bool) {
	if o == nil || IsNil(o.Memory) {
		return nil, false
	}
	return o.Memory, true
}

// HasMemory returns a boolean if a field has been set.
func (o *HostCapsCpu) HasMemory() bool {
	if o != nil && !IsNil(o.Memory) {
		return true
	}

	return false
}

// SetMemory gets a reference to the given int32 and assigns it to the Memory field.
func (o *HostCapsCpu) SetMemory(v int32) {
	o.Memory = &v
}

func (o HostCapsCpu) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HostCapsCpu) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["arch"] = o.Arch
	toSerialize["model"] = o.Model
	toSerialize["vendor"] = o.Vendor
	toSerialize["sockets"] = o.Sockets
	toSerialize["cores"] = o.Cores
	toSerialize["threads"] = o.Threads
	if !IsNil(o.Memory) {
		toSerialize["memory"] = o.Memory
	}
	return toSerialize, nil
}

func (o *HostCapsCpu) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"arch",
		"model",
		"vendor",
		"sockets",
		"cores",
		"threads",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHostCapsCpu := _HostCapsCpu{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHostCapsCpu)

	if err != nil {
		return err
	}

	*o = HostCapsCpu(varHostCapsCpu)

	return err
}

type NullableHostCapsCpu struct {
	value *HostCapsCpu
	isSet bool
}

func (v NullableHostCapsCpu) Get() *HostCapsCpu {
	return v.value
}

func (v *NullableHostCapsCpu) Set(val *HostCapsCpu) {
	v.value = val
	v.isSet = true
}

func (v NullableHostCapsCpu) IsSet() bool {
	return v.isSet
}

func (v *NullableHostCapsCpu) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHostCapsCpu(val *HostCapsCpu) *NullableHostCapsCpu {
	return &NullableHostCapsCpu{value: val, isSet: true}
}

func (v NullableHostCapsCpu) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHostCapsCpu) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


