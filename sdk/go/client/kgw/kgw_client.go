// Code generated by go-swagger; DO NOT EDIT.

package kgw

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new kgw API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for kgw API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteKGW(params *DeleteKGWParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteKGWOK, error)

	GetAllKgw(params *GetAllKgwParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllKgwOK, error)

	GetKgw(params *GetKgwParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKgwOK, error)

	UpdateKGW(params *UpdateKGWParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateKGWOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteKGW Deletes an existing KGW gateway.
*/
func (a *Client) DeleteKGW(params *DeleteKGWParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteKGWOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteKGWParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteKGW",
		Method:             "DELETE",
		PathPattern:        "/kgw/{kgwId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteKGWReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteKGWOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteKGW: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllKgw Returns the IDs of registered KGW
*/
func (a *Client) GetAllKgw(params *GetAllKgwParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllKgwOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllKgwParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAllKgw",
		Method:             "GET",
		PathPattern:        "/kgw",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllKgwReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllKgwOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAllKgw: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetKgw Returns the descirption of the registered KGW
*/
func (a *Client) GetKgw(params *GetKgwParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKgwOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKgwParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetKgw",
		Method:             "GET",
		PathPattern:        "/kgw/{kgwId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetKgwReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKgwOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetKgw: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateKGW Updates a KGW virtual machine configuration.
*/
func (a *Client) UpdateKGW(params *UpdateKGWParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateKGWOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateKGWParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateKGW",
		Method:             "PUT",
		PathPattern:        "/kgw/{kgwId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateKGWReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateKGWOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateKGW: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
