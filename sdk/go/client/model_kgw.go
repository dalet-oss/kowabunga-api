/*
Kowabunga API documentation

Kvm Orchestrator With A BUNch of Goods Added

API version: 0.42.0
Contact: csops@dalet.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the KGW type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KGW{}

// KGW A Kowabunga Network Gateway is a network gateway used for your Internet inbound and outbound traffic.
type KGW struct {
	// The KGW (Kowabunga Network Gateway) ID (auto-generated).
	Id *string `json:"id,omitempty"`
	// The KGW (Kowabunga Network Gateway) name.
	Name *string `json:"name,omitempty"`
	// The KGW (Kowabunga Network Gateway) description.
	Description *string `json:"description,omitempty"`
	// The KGW (Kowabunga Network Gateway) list of assigned virtual IPs per-zone addresses (read-only).
	Netip KGWNetIp `json:"netip,omitempty"`
	// The KGW (Kowabunga Network Gateway) firewall settings from/to public Internet).
	Firewall KGWFirewall `json:"firewall,omitempty"`
	// The KGW (Kowabunga Network Gateway) list of NAT forwarding entries. KGW will forward public Internet traffic from all public virtual IPs to requested private subnet IP addresses.
	Dnat []KGWDNatRule `json:"dnat,omitempty"`
	// The KGW (Kowabunga Network Gateway) list of Kowabunga private VPC subnet peering entries.
	VpcPeerings []KGWVpcPeering `json:"vpc_peerings,omitempty"`
}

// NewKGW instantiates a new KGW object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKGW() *KGW {
	this := KGW{}
	return &this
}

// NewKGWWithDefaults instantiates a new KGW object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKGWWithDefaults() *KGW {
	this := KGW{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *KGW) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KGW) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *KGW) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *KGW) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *KGW) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KGW) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *KGW) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *KGW) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *KGW) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KGW) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *KGW) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *KGW) SetDescription(v string) {
	o.Description = &v
}

// GetNetip returns the Netip field value if set, zero value otherwise.
func (o *KGW) GetNetip() KGWNetIp {
	if o == nil || IsNil(o.Netip) {
		var ret KGWNetIp
		return ret
	}
	return o.Netip
}

// GetNetipOk returns a tuple with the Netip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KGW) GetNetipOk() (KGWNetIp, bool) {
	if o == nil || IsNil(o.Netip) {
		return KGWNetIp{}, false
	}
	return o.Netip, true
}

// HasNetip returns a boolean if a field has been set.
func (o *KGW) HasNetip() bool {
	if o != nil && !IsNil(o.Netip) {
		return true
	}

	return false
}

// SetNetip gets a reference to the given KGWNetIp and assigns it to the Netip field.
func (o *KGW) SetNetip(v KGWNetIp) {
	o.Netip = v
}

// GetFirewall returns the Firewall field value if set, zero value otherwise.
func (o *KGW) GetFirewall() KGWFirewall {
	if o == nil || IsNil(o.Firewall) {
		var ret KGWFirewall
		return ret
	}
	return o.Firewall
}

// GetFirewallOk returns a tuple with the Firewall field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KGW) GetFirewallOk() (KGWFirewall, bool) {
	if o == nil || IsNil(o.Firewall) {
		return KGWFirewall{}, false
	}
	return o.Firewall, true
}

// HasFirewall returns a boolean if a field has been set.
func (o *KGW) HasFirewall() bool {
	if o != nil && !IsNil(o.Firewall) {
		return true
	}

	return false
}

// SetFirewall gets a reference to the given KGWFirewall and assigns it to the Firewall field.
func (o *KGW) SetFirewall(v KGWFirewall) {
	o.Firewall = v
}

// GetDnat returns the Dnat field value if set, zero value otherwise.
func (o *KGW) GetDnat() []KGWDNatRule {
	if o == nil || IsNil(o.Dnat) {
		var ret []KGWDNatRule
		return ret
	}
	return o.Dnat
}

// GetDnatOk returns a tuple with the Dnat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KGW) GetDnatOk() ([]KGWDNatRule, bool) {
	if o == nil || IsNil(o.Dnat) {
		return nil, false
	}
	return o.Dnat, true
}

// HasDnat returns a boolean if a field has been set.
func (o *KGW) HasDnat() bool {
	if o != nil && !IsNil(o.Dnat) {
		return true
	}

	return false
}

// SetDnat gets a reference to the given []KGWDNatRule and assigns it to the Dnat field.
func (o *KGW) SetDnat(v []KGWDNatRule) {
	o.Dnat = v
}

// GetVpcPeerings returns the VpcPeerings field value if set, zero value otherwise.
func (o *KGW) GetVpcPeerings() []KGWVpcPeering {
	if o == nil || IsNil(o.VpcPeerings) {
		var ret []KGWVpcPeering
		return ret
	}
	return o.VpcPeerings
}

// GetVpcPeeringsOk returns a tuple with the VpcPeerings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KGW) GetVpcPeeringsOk() ([]KGWVpcPeering, bool) {
	if o == nil || IsNil(o.VpcPeerings) {
		return nil, false
	}
	return o.VpcPeerings, true
}

// HasVpcPeerings returns a boolean if a field has been set.
func (o *KGW) HasVpcPeerings() bool {
	if o != nil && !IsNil(o.VpcPeerings) {
		return true
	}

	return false
}

// SetVpcPeerings gets a reference to the given []KGWVpcPeering and assigns it to the VpcPeerings field.
func (o *KGW) SetVpcPeerings(v []KGWVpcPeering) {
	o.VpcPeerings = v
}

func (o KGW) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KGW) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Netip) {
		toSerialize["netip"] = o.Netip
	}
	if !IsNil(o.Firewall) {
		toSerialize["firewall"] = o.Firewall
	}
	if !IsNil(o.Dnat) {
		toSerialize["dnat"] = o.Dnat
	}
	if !IsNil(o.VpcPeerings) {
		toSerialize["vpc_peerings"] = o.VpcPeerings
	}
	return toSerialize, nil
}

type NullableKGW struct {
	value *KGW
	isSet bool
}

func (v NullableKGW) Get() *KGW {
	return v.value
}

func (v *NullableKGW) Set(val *KGW) {
	v.value = val
	v.isSet = true
}

func (v NullableKGW) IsSet() bool {
	return v.isSet
}

func (v *NullableKGW) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKGW(val *KGW) *NullableKGW {
	return &NullableKGW{value: val, isSet: true}
}

func (v NullableKGW) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKGW) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


