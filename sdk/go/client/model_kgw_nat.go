/*
Kowabunga

Kvm Orchestrator With A BUNch of Goods Added

API version: 0.10.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the KGWNat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KGWNat{}

// KGWNat KGW Nat definition
type KGWNat struct {
	// Target Private IP. Leave blank for a new generated one
	PrivateIp string `json:"private_ip"`
	// Public IP from created Adapter. Leave empty to use the default Public IP
	PublicIp *string `json:"public_ip,omitempty"`
	// Ports being forwarded from the public to the private IP. Accept Ranges
	Ports string `json:"ports"`
}

type _KGWNat KGWNat

// NewKGWNat instantiates a new KGWNat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKGWNat(privateIp string, ports string) *KGWNat {
	this := KGWNat{}
	this.PrivateIp = privateIp
	this.Ports = ports
	return &this
}

// NewKGWNatWithDefaults instantiates a new KGWNat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKGWNatWithDefaults() *KGWNat {
	this := KGWNat{}
	return &this
}

// GetPrivateIp returns the PrivateIp field value
func (o *KGWNat) GetPrivateIp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrivateIp
}

// GetPrivateIpOk returns a tuple with the PrivateIp field value
// and a boolean to check if the value has been set.
func (o *KGWNat) GetPrivateIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrivateIp, true
}

// SetPrivateIp sets field value
func (o *KGWNat) SetPrivateIp(v string) {
	o.PrivateIp = v
}

// GetPublicIp returns the PublicIp field value if set, zero value otherwise.
func (o *KGWNat) GetPublicIp() string {
	if o == nil || IsNil(o.PublicIp) {
		var ret string
		return ret
	}
	return *o.PublicIp
}

// GetPublicIpOk returns a tuple with the PublicIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KGWNat) GetPublicIpOk() (*string, bool) {
	if o == nil || IsNil(o.PublicIp) {
		return nil, false
	}
	return o.PublicIp, true
}

// HasPublicIp returns a boolean if a field has been set.
func (o *KGWNat) HasPublicIp() bool {
	if o != nil && !IsNil(o.PublicIp) {
		return true
	}

	return false
}

// SetPublicIp gets a reference to the given string and assigns it to the PublicIp field.
func (o *KGWNat) SetPublicIp(v string) {
	o.PublicIp = &v
}

// GetPorts returns the Ports field value
func (o *KGWNat) GetPorts() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ports
}

// GetPortsOk returns a tuple with the Ports field value
// and a boolean to check if the value has been set.
func (o *KGWNat) GetPortsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ports, true
}

// SetPorts sets field value
func (o *KGWNat) SetPorts(v string) {
	o.Ports = v
}

func (o KGWNat) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KGWNat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["private_ip"] = o.PrivateIp
	if !IsNil(o.PublicIp) {
		toSerialize["public_ip"] = o.PublicIp
	}
	toSerialize["ports"] = o.Ports
	return toSerialize, nil
}

func (o *KGWNat) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"private_ip",
		"ports",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKGWNat := _KGWNat{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKGWNat)

	if err != nil {
		return err
	}

	*o = KGWNat(varKGWNat)

	return err
}

type NullableKGWNat struct {
	value *KGWNat
	isSet bool
}

func (v NullableKGWNat) Get() *KGWNat {
	return v.value
}

func (v *NullableKGWNat) Set(val *KGWNat) {
	v.value = val
	v.isSet = true
}

func (v NullableKGWNat) IsSet() bool {
	return v.isSet
}

func (v *NullableKGWNat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKGWNat(val *KGWNat) *NullableKGWNat {
	return &NullableKGWNat{value: val, isSet: true}
}

func (v NullableKGWNat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKGWNat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


