/*
Kowabunga API documentation

Kvm Orchestrator With A BUNch of Goods Added

API version: 0.10.0
Contact: csops@dalet.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HostTls type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HostTls{}

// HostTls The host libvirt's TLS configuration.
type HostTls struct {
	// The TLS client private key.
	Key string `json:"key"`
	// The TLS client public cert.
	Cert string `json:"cert"`
	// The TLS certificate of authority.
	Ca string `json:"ca"`
}

type _HostTls HostTls

// NewHostTls instantiates a new HostTls object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHostTls(key string, cert string, ca string) *HostTls {
	this := HostTls{}
	this.Key = key
	this.Cert = cert
	this.Ca = ca
	return &this
}

// NewHostTlsWithDefaults instantiates a new HostTls object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHostTlsWithDefaults() *HostTls {
	this := HostTls{}
	return &this
}

// GetKey returns the Key field value
func (o *HostTls) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *HostTls) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *HostTls) SetKey(v string) {
	o.Key = v
}

// GetCert returns the Cert field value
func (o *HostTls) GetCert() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cert
}

// GetCertOk returns a tuple with the Cert field value
// and a boolean to check if the value has been set.
func (o *HostTls) GetCertOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cert, true
}

// SetCert sets field value
func (o *HostTls) SetCert(v string) {
	o.Cert = v
}

// GetCa returns the Ca field value
func (o *HostTls) GetCa() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ca
}

// GetCaOk returns a tuple with the Ca field value
// and a boolean to check if the value has been set.
func (o *HostTls) GetCaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ca, true
}

// SetCa sets field value
func (o *HostTls) SetCa(v string) {
	o.Ca = v
}

func (o HostTls) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HostTls) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	toSerialize["cert"] = o.Cert
	toSerialize["ca"] = o.Ca
	return toSerialize, nil
}

func (o *HostTls) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
		"cert",
		"ca",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHostTls := _HostTls{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHostTls)

	if err != nil {
		return err
	}

	*o = HostTls(varHostTls)

	return err
}

type NullableHostTls struct {
	value *HostTls
	isSet bool
}

func (v NullableHostTls) Get() *HostTls {
	return v.value
}

func (v *NullableHostTls) Set(val *HostTls) {
	v.value = val
	v.isSet = true
}

func (v NullableHostTls) IsSet() bool {
	return v.isSet
}

func (v *NullableHostTls) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHostTls(val *HostTls) *NullableHostTls {
	return &NullableHostTls{value: val, isSet: true}
}

func (v NullableHostTls) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHostTls) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


