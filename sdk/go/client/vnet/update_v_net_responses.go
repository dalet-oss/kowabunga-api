// Code generated by go-swagger; DO NOT EDIT.

package vnet

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/dalet-oss/kowabunga-api/sdk/go/models"
)

// UpdateVNetReader is a Reader for the UpdateVNet structure.
type UpdateVNetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateVNetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateVNetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateVNetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateVNetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /vnet/{vnetId}] UpdateVNet", response, response.Code())
	}
}

// NewUpdateVNetOK creates a UpdateVNetOK with default headers values
func NewUpdateVNetOK() *UpdateVNetOK {
	return &UpdateVNetOK{}
}

/*
UpdateVNetOK describes a response with status code 200, with default header values.

Returns the updated virtual network object.
*/
type UpdateVNetOK struct {
	Payload *models.VNet
}

// IsSuccess returns true when this update v net o k response has a 2xx status code
func (o *UpdateVNetOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update v net o k response has a 3xx status code
func (o *UpdateVNetOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update v net o k response has a 4xx status code
func (o *UpdateVNetOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update v net o k response has a 5xx status code
func (o *UpdateVNetOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update v net o k response a status code equal to that given
func (o *UpdateVNetOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update v net o k response
func (o *UpdateVNetOK) Code() int {
	return 200
}

func (o *UpdateVNetOK) Error() string {
	return fmt.Sprintf("[PUT /vnet/{vnetId}][%d] updateVNetOK  %+v", 200, o.Payload)
}

func (o *UpdateVNetOK) String() string {
	return fmt.Sprintf("[PUT /vnet/{vnetId}][%d] updateVNetOK  %+v", 200, o.Payload)
}

func (o *UpdateVNetOK) GetPayload() *models.VNet {
	return o.Payload
}

func (o *UpdateVNetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VNet)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVNetBadRequest creates a UpdateVNetBadRequest with default headers values
func NewUpdateVNetBadRequest() *UpdateVNetBadRequest {
	return &UpdateVNetBadRequest{}
}

/*
UpdateVNetBadRequest describes a response with status code 400, with default header values.

Bad parameters were provided.
*/
type UpdateVNetBadRequest struct {
}

// IsSuccess returns true when this update v net bad request response has a 2xx status code
func (o *UpdateVNetBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update v net bad request response has a 3xx status code
func (o *UpdateVNetBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update v net bad request response has a 4xx status code
func (o *UpdateVNetBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update v net bad request response has a 5xx status code
func (o *UpdateVNetBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update v net bad request response a status code equal to that given
func (o *UpdateVNetBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update v net bad request response
func (o *UpdateVNetBadRequest) Code() int {
	return 400
}

func (o *UpdateVNetBadRequest) Error() string {
	return fmt.Sprintf("[PUT /vnet/{vnetId}][%d] updateVNetBadRequest ", 400)
}

func (o *UpdateVNetBadRequest) String() string {
	return fmt.Sprintf("[PUT /vnet/{vnetId}][%d] updateVNetBadRequest ", 400)
}

func (o *UpdateVNetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateVNetNotFound creates a UpdateVNetNotFound with default headers values
func NewUpdateVNetNotFound() *UpdateVNetNotFound {
	return &UpdateVNetNotFound{}
}

/*
UpdateVNetNotFound describes a response with status code 404, with default header values.

Invalid virtual network ID was provided.
*/
type UpdateVNetNotFound struct {
}

// IsSuccess returns true when this update v net not found response has a 2xx status code
func (o *UpdateVNetNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update v net not found response has a 3xx status code
func (o *UpdateVNetNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update v net not found response has a 4xx status code
func (o *UpdateVNetNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update v net not found response has a 5xx status code
func (o *UpdateVNetNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update v net not found response a status code equal to that given
func (o *UpdateVNetNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update v net not found response
func (o *UpdateVNetNotFound) Code() int {
	return 404
}

func (o *UpdateVNetNotFound) Error() string {
	return fmt.Sprintf("[PUT /vnet/{vnetId}][%d] updateVNetNotFound ", 404)
}

func (o *UpdateVNetNotFound) String() string {
	return fmt.Sprintf("[PUT /vnet/{vnetId}][%d] updateVNetNotFound ", 404)
}

func (o *UpdateVNetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
