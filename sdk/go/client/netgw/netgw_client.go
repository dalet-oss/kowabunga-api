// Code generated by go-swagger; DO NOT EDIT.

package netgw

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new netgw API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for netgw API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteNetGW(params *DeleteNetGWParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNetGWOK, error)

	GetAllNetGWs(params *GetAllNetGWsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllNetGWsOK, error)

	GetNetGW(params *GetNetGWParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetGWOK, error)

	UpdateNetGW(params *UpdateNetGWParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetGWOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteNetGW Deletes an existing network gateway.
*/
func (a *Client) DeleteNetGW(params *DeleteNetGWParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNetGWOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetGWParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteNetGW",
		Method:             "DELETE",
		PathPattern:        "/netgw/{netgwId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteNetGWReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNetGWOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteNetGW: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllNetGWs Returns the IDs of network gateways.
*/
func (a *Client) GetAllNetGWs(params *GetAllNetGWsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllNetGWsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllNetGWsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAllNetGWs",
		Method:             "GET",
		PathPattern:        "/netgw",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllNetGWsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllNetGWsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAllNetGWs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetNetGW Returns a description of the network gateway
*/
func (a *Client) GetNetGW(params *GetNetGWParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetGWOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetGWParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetNetGW",
		Method:             "GET",
		PathPattern:        "/netgw/{netgwId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNetGWReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetGWOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetNetGW: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateNetGW Updates a network gateway configuration.
*/
func (a *Client) UpdateNetGW(params *UpdateNetGWParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetGWOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetGWParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateNetGW",
		Method:             "PUT",
		PathPattern:        "/netgw/{netgwId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateNetGWReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetGWOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateNetGW: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
