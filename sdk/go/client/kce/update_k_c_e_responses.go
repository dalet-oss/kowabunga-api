// Code generated by go-swagger; DO NOT EDIT.

package kce

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/dalet-oss/kowabunga-api/sdk/go/models"
)

// UpdateKCEReader is a Reader for the UpdateKCE structure.
type UpdateKCEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateKCEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateKCEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateKCEBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateKCENotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateKCEInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 507:
		result := NewUpdateKCEInsufficientStorage()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /kce/{kceId}] UpdateKCE", response, response.Code())
	}
}

// NewUpdateKCEOK creates a UpdateKCEOK with default headers values
func NewUpdateKCEOK() *UpdateKCEOK {
	return &UpdateKCEOK{}
}

/*
UpdateKCEOK describes a response with status code 200, with default header values.

Returns the updated KCE virtual machine object.
*/
type UpdateKCEOK struct {
	Payload *models.KCE
}

// IsSuccess returns true when this update k c e o k response has a 2xx status code
func (o *UpdateKCEOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update k c e o k response has a 3xx status code
func (o *UpdateKCEOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update k c e o k response has a 4xx status code
func (o *UpdateKCEOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update k c e o k response has a 5xx status code
func (o *UpdateKCEOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update k c e o k response a status code equal to that given
func (o *UpdateKCEOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update k c e o k response
func (o *UpdateKCEOK) Code() int {
	return 200
}

func (o *UpdateKCEOK) Error() string {
	return fmt.Sprintf("[PUT /kce/{kceId}][%d] updateKCEOK  %+v", 200, o.Payload)
}

func (o *UpdateKCEOK) String() string {
	return fmt.Sprintf("[PUT /kce/{kceId}][%d] updateKCEOK  %+v", 200, o.Payload)
}

func (o *UpdateKCEOK) GetPayload() *models.KCE {
	return o.Payload
}

func (o *UpdateKCEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.KCE)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateKCEBadRequest creates a UpdateKCEBadRequest with default headers values
func NewUpdateKCEBadRequest() *UpdateKCEBadRequest {
	return &UpdateKCEBadRequest{}
}

/*
UpdateKCEBadRequest describes a response with status code 400, with default header values.

Bad parameters were provided.
*/
type UpdateKCEBadRequest struct {
}

// IsSuccess returns true when this update k c e bad request response has a 2xx status code
func (o *UpdateKCEBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update k c e bad request response has a 3xx status code
func (o *UpdateKCEBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update k c e bad request response has a 4xx status code
func (o *UpdateKCEBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update k c e bad request response has a 5xx status code
func (o *UpdateKCEBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update k c e bad request response a status code equal to that given
func (o *UpdateKCEBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update k c e bad request response
func (o *UpdateKCEBadRequest) Code() int {
	return 400
}

func (o *UpdateKCEBadRequest) Error() string {
	return fmt.Sprintf("[PUT /kce/{kceId}][%d] updateKCEBadRequest ", 400)
}

func (o *UpdateKCEBadRequest) String() string {
	return fmt.Sprintf("[PUT /kce/{kceId}][%d] updateKCEBadRequest ", 400)
}

func (o *UpdateKCEBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateKCENotFound creates a UpdateKCENotFound with default headers values
func NewUpdateKCENotFound() *UpdateKCENotFound {
	return &UpdateKCENotFound{}
}

/*
UpdateKCENotFound describes a response with status code 404, with default header values.

Invalid KCE virtual machine ID was provided.
*/
type UpdateKCENotFound struct {
}

// IsSuccess returns true when this update k c e not found response has a 2xx status code
func (o *UpdateKCENotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update k c e not found response has a 3xx status code
func (o *UpdateKCENotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update k c e not found response has a 4xx status code
func (o *UpdateKCENotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update k c e not found response has a 5xx status code
func (o *UpdateKCENotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update k c e not found response a status code equal to that given
func (o *UpdateKCENotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update k c e not found response
func (o *UpdateKCENotFound) Code() int {
	return 404
}

func (o *UpdateKCENotFound) Error() string {
	return fmt.Sprintf("[PUT /kce/{kceId}][%d] updateKCENotFound ", 404)
}

func (o *UpdateKCENotFound) String() string {
	return fmt.Sprintf("[PUT /kce/{kceId}][%d] updateKCENotFound ", 404)
}

func (o *UpdateKCENotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateKCEInternalServerError creates a UpdateKCEInternalServerError with default headers values
func NewUpdateKCEInternalServerError() *UpdateKCEInternalServerError {
	return &UpdateKCEInternalServerError{}
}

/*
UpdateKCEInternalServerError describes a response with status code 500, with default header values.

Unable to update the KCE virtual machine.
*/
type UpdateKCEInternalServerError struct {
}

// IsSuccess returns true when this update k c e internal server error response has a 2xx status code
func (o *UpdateKCEInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update k c e internal server error response has a 3xx status code
func (o *UpdateKCEInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update k c e internal server error response has a 4xx status code
func (o *UpdateKCEInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update k c e internal server error response has a 5xx status code
func (o *UpdateKCEInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update k c e internal server error response a status code equal to that given
func (o *UpdateKCEInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update k c e internal server error response
func (o *UpdateKCEInternalServerError) Code() int {
	return 500
}

func (o *UpdateKCEInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /kce/{kceId}][%d] updateKCEInternalServerError ", 500)
}

func (o *UpdateKCEInternalServerError) String() string {
	return fmt.Sprintf("[PUT /kce/{kceId}][%d] updateKCEInternalServerError ", 500)
}

func (o *UpdateKCEInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateKCEInsufficientStorage creates a UpdateKCEInsufficientStorage with default headers values
func NewUpdateKCEInsufficientStorage() *UpdateKCEInsufficientStorage {
	return &UpdateKCEInsufficientStorage{}
}

/*
UpdateKCEInsufficientStorage describes a response with status code 507, with default header values.

Requested KCE characteristics are beyond associated project's quota in place.
*/
type UpdateKCEInsufficientStorage struct {
}

// IsSuccess returns true when this update k c e insufficient storage response has a 2xx status code
func (o *UpdateKCEInsufficientStorage) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update k c e insufficient storage response has a 3xx status code
func (o *UpdateKCEInsufficientStorage) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update k c e insufficient storage response has a 4xx status code
func (o *UpdateKCEInsufficientStorage) IsClientError() bool {
	return false
}

// IsServerError returns true when this update k c e insufficient storage response has a 5xx status code
func (o *UpdateKCEInsufficientStorage) IsServerError() bool {
	return true
}

// IsCode returns true when this update k c e insufficient storage response a status code equal to that given
func (o *UpdateKCEInsufficientStorage) IsCode(code int) bool {
	return code == 507
}

// Code gets the status code for the update k c e insufficient storage response
func (o *UpdateKCEInsufficientStorage) Code() int {
	return 507
}

func (o *UpdateKCEInsufficientStorage) Error() string {
	return fmt.Sprintf("[PUT /kce/{kceId}][%d] updateKCEInsufficientStorage ", 507)
}

func (o *UpdateKCEInsufficientStorage) String() string {
	return fmt.Sprintf("[PUT /kce/{kceId}][%d] updateKCEInsufficientStorage ", 507)
}

func (o *UpdateKCEInsufficientStorage) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
