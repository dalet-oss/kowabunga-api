// Code generated by go-swagger; DO NOT EDIT.

package kce

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// ResetKCEReader is a Reader for the ResetKCE structure.
type ResetKCEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ResetKCEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewResetKCEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewResetKCENotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewResetKCEInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /kce/{kceId}/reset] ResetKCE", response, response.Code())
	}
}

// NewResetKCEOK creates a ResetKCEOK with default headers values
func NewResetKCEOK() *ResetKCEOK {
	return &ResetKCEOK{}
}

/*
ResetKCEOK describes a response with status code 200, with default header values.

The KCE virtual machine has been reseted successfully.
*/
type ResetKCEOK struct {
}

// IsSuccess returns true when this reset k c e o k response has a 2xx status code
func (o *ResetKCEOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this reset k c e o k response has a 3xx status code
func (o *ResetKCEOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reset k c e o k response has a 4xx status code
func (o *ResetKCEOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this reset k c e o k response has a 5xx status code
func (o *ResetKCEOK) IsServerError() bool {
	return false
}

// IsCode returns true when this reset k c e o k response a status code equal to that given
func (o *ResetKCEOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the reset k c e o k response
func (o *ResetKCEOK) Code() int {
	return 200
}

func (o *ResetKCEOK) Error() string {
	return fmt.Sprintf("[POST /kce/{kceId}/reset][%d] resetKCEOK ", 200)
}

func (o *ResetKCEOK) String() string {
	return fmt.Sprintf("[POST /kce/{kceId}/reset][%d] resetKCEOK ", 200)
}

func (o *ResetKCEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewResetKCENotFound creates a ResetKCENotFound with default headers values
func NewResetKCENotFound() *ResetKCENotFound {
	return &ResetKCENotFound{}
}

/*
ResetKCENotFound describes a response with status code 404, with default header values.

Invalid KCE ID was provided.
*/
type ResetKCENotFound struct {
}

// IsSuccess returns true when this reset k c e not found response has a 2xx status code
func (o *ResetKCENotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this reset k c e not found response has a 3xx status code
func (o *ResetKCENotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reset k c e not found response has a 4xx status code
func (o *ResetKCENotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this reset k c e not found response has a 5xx status code
func (o *ResetKCENotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this reset k c e not found response a status code equal to that given
func (o *ResetKCENotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the reset k c e not found response
func (o *ResetKCENotFound) Code() int {
	return 404
}

func (o *ResetKCENotFound) Error() string {
	return fmt.Sprintf("[POST /kce/{kceId}/reset][%d] resetKCENotFound ", 404)
}

func (o *ResetKCENotFound) String() string {
	return fmt.Sprintf("[POST /kce/{kceId}/reset][%d] resetKCENotFound ", 404)
}

func (o *ResetKCENotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewResetKCEInternalServerError creates a ResetKCEInternalServerError with default headers values
func NewResetKCEInternalServerError() *ResetKCEInternalServerError {
	return &ResetKCEInternalServerError{}
}

/*
ResetKCEInternalServerError describes a response with status code 500, with default header values.

An error occurred when trying to reset the KCE virtual machine.
*/
type ResetKCEInternalServerError struct {
}

// IsSuccess returns true when this reset k c e internal server error response has a 2xx status code
func (o *ResetKCEInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this reset k c e internal server error response has a 3xx status code
func (o *ResetKCEInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reset k c e internal server error response has a 4xx status code
func (o *ResetKCEInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this reset k c e internal server error response has a 5xx status code
func (o *ResetKCEInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this reset k c e internal server error response a status code equal to that given
func (o *ResetKCEInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the reset k c e internal server error response
func (o *ResetKCEInternalServerError) Code() int {
	return 500
}

func (o *ResetKCEInternalServerError) Error() string {
	return fmt.Sprintf("[POST /kce/{kceId}/reset][%d] resetKCEInternalServerError ", 500)
}

func (o *ResetKCEInternalServerError) String() string {
	return fmt.Sprintf("[POST /kce/{kceId}/reset][%d] resetKCEInternalServerError ", 500)
}

func (o *ResetKCEInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
