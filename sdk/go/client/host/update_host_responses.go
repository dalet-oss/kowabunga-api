// Code generated by go-swagger; DO NOT EDIT.

package host

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/dalet-oss/kowabunga-api/sdk/go/models"
)

// UpdateHostReader is a Reader for the UpdateHost structure.
type UpdateHostReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateHostReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateHostOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateHostBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateHostNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /host/{hostId}] UpdateHost", response, response.Code())
	}
}

// NewUpdateHostOK creates a UpdateHostOK with default headers values
func NewUpdateHostOK() *UpdateHostOK {
	return &UpdateHostOK{}
}

/*
UpdateHostOK describes a response with status code 200, with default header values.

Returns the updated host object.
*/
type UpdateHostOK struct {
	Payload *models.Host
}

// IsSuccess returns true when this update host o k response has a 2xx status code
func (o *UpdateHostOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update host o k response has a 3xx status code
func (o *UpdateHostOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update host o k response has a 4xx status code
func (o *UpdateHostOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update host o k response has a 5xx status code
func (o *UpdateHostOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update host o k response a status code equal to that given
func (o *UpdateHostOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update host o k response
func (o *UpdateHostOK) Code() int {
	return 200
}

func (o *UpdateHostOK) Error() string {
	return fmt.Sprintf("[PUT /host/{hostId}][%d] updateHostOK  %+v", 200, o.Payload)
}

func (o *UpdateHostOK) String() string {
	return fmt.Sprintf("[PUT /host/{hostId}][%d] updateHostOK  %+v", 200, o.Payload)
}

func (o *UpdateHostOK) GetPayload() *models.Host {
	return o.Payload
}

func (o *UpdateHostOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Host)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateHostBadRequest creates a UpdateHostBadRequest with default headers values
func NewUpdateHostBadRequest() *UpdateHostBadRequest {
	return &UpdateHostBadRequest{}
}

/*
UpdateHostBadRequest describes a response with status code 400, with default header values.

Bad parameters were provided.
*/
type UpdateHostBadRequest struct {
}

// IsSuccess returns true when this update host bad request response has a 2xx status code
func (o *UpdateHostBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update host bad request response has a 3xx status code
func (o *UpdateHostBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update host bad request response has a 4xx status code
func (o *UpdateHostBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update host bad request response has a 5xx status code
func (o *UpdateHostBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update host bad request response a status code equal to that given
func (o *UpdateHostBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update host bad request response
func (o *UpdateHostBadRequest) Code() int {
	return 400
}

func (o *UpdateHostBadRequest) Error() string {
	return fmt.Sprintf("[PUT /host/{hostId}][%d] updateHostBadRequest ", 400)
}

func (o *UpdateHostBadRequest) String() string {
	return fmt.Sprintf("[PUT /host/{hostId}][%d] updateHostBadRequest ", 400)
}

func (o *UpdateHostBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateHostNotFound creates a UpdateHostNotFound with default headers values
func NewUpdateHostNotFound() *UpdateHostNotFound {
	return &UpdateHostNotFound{}
}

/*
UpdateHostNotFound describes a response with status code 404, with default header values.

Invalid host ID was provided.
*/
type UpdateHostNotFound struct {
}

// IsSuccess returns true when this update host not found response has a 2xx status code
func (o *UpdateHostNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update host not found response has a 3xx status code
func (o *UpdateHostNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update host not found response has a 4xx status code
func (o *UpdateHostNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update host not found response has a 5xx status code
func (o *UpdateHostNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update host not found response a status code equal to that given
func (o *UpdateHostNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update host not found response
func (o *UpdateHostNotFound) Code() int {
	return 404
}

func (o *UpdateHostNotFound) Error() string {
	return fmt.Sprintf("[PUT /host/{hostId}][%d] updateHostNotFound ", 404)
}

func (o *UpdateHostNotFound) String() string {
	return fmt.Sprintf("[PUT /host/{hostId}][%d] updateHostNotFound ", 404)
}

func (o *UpdateHostNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
