/*
Kowabunga API documentation

Kvm Orchestrator With A BUNch of Goods Added

API version: 0.40.0
Contact: csops@dalet.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the KGWNetIp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KGWNetIp{}

// KGWNetIp A KGW Network IP settings.
type KGWNetIp struct {
	// The KGW (Kowabunga Network Gateway) global public gateways virtual IP addresses (read-only).
	Public []string `json:"public"`
	// The KGW (Kowabunga Network Gateway) global private gateways virtual IP addresses (read-only).
	Private []string `json:"private"`
	// The KGW (Kowabunga Network Gateway) per-zone list of Kowabunga virtual IP addresses.
	Zones []KGWNetIpZone `json:"zones"`
}

type _KGWNetIp KGWNetIp

// NewKGWNetIp instantiates a new KGWNetIp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKGWNetIp(public []string, private []string, zones []KGWNetIpZone) *KGWNetIp {
	this := KGWNetIp{}
	this.Public = public
	this.Private = private
	this.Zones = zones
	return &this
}

// NewKGWNetIpWithDefaults instantiates a new KGWNetIp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKGWNetIpWithDefaults() *KGWNetIp {
	this := KGWNetIp{}
	return &this
}

// GetPublic returns the Public field value
func (o *KGWNetIp) GetPublic() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Public
}

// GetPublicOk returns a tuple with the Public field value
// and a boolean to check if the value has been set.
func (o *KGWNetIp) GetPublicOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Public, true
}

// SetPublic sets field value
func (o *KGWNetIp) SetPublic(v []string) {
	o.Public = v
}

// GetPrivate returns the Private field value
func (o *KGWNetIp) GetPrivate() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Private
}

// GetPrivateOk returns a tuple with the Private field value
// and a boolean to check if the value has been set.
func (o *KGWNetIp) GetPrivateOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Private, true
}

// SetPrivate sets field value
func (o *KGWNetIp) SetPrivate(v []string) {
	o.Private = v
}

// GetZones returns the Zones field value
func (o *KGWNetIp) GetZones() []KGWNetIpZone {
	if o == nil {
		var ret []KGWNetIpZone
		return ret
	}

	return o.Zones
}

// GetZonesOk returns a tuple with the Zones field value
// and a boolean to check if the value has been set.
func (o *KGWNetIp) GetZonesOk() ([]KGWNetIpZone, bool) {
	if o == nil {
		return nil, false
	}
	return o.Zones, true
}

// SetZones sets field value
func (o *KGWNetIp) SetZones(v []KGWNetIpZone) {
	o.Zones = v
}

func (o KGWNetIp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KGWNetIp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["public"] = o.Public
	toSerialize["private"] = o.Private
	toSerialize["zones"] = o.Zones
	return toSerialize, nil
}

func (o *KGWNetIp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"public",
		"private",
		"zones",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKGWNetIp := _KGWNetIp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKGWNetIp)

	if err != nil {
		return err
	}

	*o = KGWNetIp(varKGWNetIp)

	return err
}

type NullableKGWNetIp struct {
	value *KGWNetIp
	isSet bool
}

func (v NullableKGWNetIp) Get() *KGWNetIp {
	return v.value
}

func (v *NullableKGWNetIp) Set(val *KGWNetIp) {
	v.value = val
	v.isSet = true
}

func (v NullableKGWNetIp) IsSet() bool {
	return v.isSet
}

func (v *NullableKGWNetIp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKGWNetIp(val *KGWNetIp) *NullableKGWNetIp {
	return &NullableKGWNetIp{value: val, isSet: true}
}

func (v NullableKGWNetIp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKGWNetIp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


