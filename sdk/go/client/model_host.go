/*
Kowabunga API documentation

Kvm Orchestrator With A BUNch of Goods Added

API version: 0.10.0
Contact: csops@dalet.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Host type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Host{}

// Host A computing host.
type Host struct {
	// The computing host ID (auto-generated).
	Id *string `json:"id,omitempty"`
	// The computing host name.
	Name string `json:"name"`
	// The computing host description.
	Description *string `json:"description,omitempty"`
	// The protocol to use to issue libvirt connection.
	Protocol string `json:"protocol"`
	// The host libvirt's IPv4 address.
	Address string `json:"address"`
	// The host libvirt's port.
	Port *int32 `json:"port,omitempty"`
	// The host libvirt's TLS configuration.
	Tls HostTLS `json:"tls,omitempty"`
	// Cost associated to the host's CPU resources.
	CpuCost Cost `json:"cpu_cost,omitempty"`
	// Cost associated to the host's memoery resources.
	MemoryCost Cost `json:"memory_cost,omitempty"`
	// The host CPU resource over-commit ratio. Overcommitting CPU resources for VMs means allocating more virtual CPUs (vCPUs) to the virtual machines (VMs) than the physical cores available on the host. This can help optimize the utilization of the host CPU and increase the density of VMs per host.
	OvercommitCpuRatio *int32 `json:"overcommit_cpu_ratio,omitempty"`
	// The host memory resource over-commit ratio. Memory overcommitment is a concept in computing that covers the assignment of more memory to virtual computing devices (or processes) than the physical machine they are hosted, or running on, actually has.
	OvercommitMemoryRatio *int32 `json:"overcommit_memory_ratio,omitempty"`
}

type _Host Host

// NewHost instantiates a new Host object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHost(name string, protocol string, address string) *Host {
	this := Host{}
	this.Name = name
	this.Protocol = protocol
	this.Address = address
	var overcommitCpuRatio int32 = 3
	this.OvercommitCpuRatio = &overcommitCpuRatio
	var overcommitMemoryRatio int32 = 2
	this.OvercommitMemoryRatio = &overcommitMemoryRatio
	return &this
}

// NewHostWithDefaults instantiates a new Host object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHostWithDefaults() *Host {
	this := Host{}
	var overcommitCpuRatio int32 = 3
	this.OvercommitCpuRatio = &overcommitCpuRatio
	var overcommitMemoryRatio int32 = 2
	this.OvercommitMemoryRatio = &overcommitMemoryRatio
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Host) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Host) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Host) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Host) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *Host) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Host) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Host) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Host) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Host) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Host) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Host) SetDescription(v string) {
	o.Description = &v
}

// GetProtocol returns the Protocol field value
func (o *Host) GetProtocol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value
// and a boolean to check if the value has been set.
func (o *Host) GetProtocolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Protocol, true
}

// SetProtocol sets field value
func (o *Host) SetProtocol(v string) {
	o.Protocol = v
}

// GetAddress returns the Address field value
func (o *Host) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *Host) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *Host) SetAddress(v string) {
	o.Address = v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *Host) GetPort() int32 {
	if o == nil || IsNil(o.Port) {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Host) GetPortOk() (*int32, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *Host) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *Host) SetPort(v int32) {
	o.Port = &v
}

// GetTls returns the Tls field value if set, zero value otherwise.
func (o *Host) GetTls() HostTLS {
	if o == nil || IsNil(o.Tls) {
		var ret HostTLS
		return ret
	}
	return o.Tls
}

// GetTlsOk returns a tuple with the Tls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Host) GetTlsOk() (HostTLS, bool) {
	if o == nil || IsNil(o.Tls) {
		return HostTLS{}, false
	}
	return o.Tls, true
}

// HasTls returns a boolean if a field has been set.
func (o *Host) HasTls() bool {
	if o != nil && !IsNil(o.Tls) {
		return true
	}

	return false
}

// SetTls gets a reference to the given HostTLS and assigns it to the Tls field.
func (o *Host) SetTls(v HostTLS) {
	o.Tls = v
}

// GetCpuCost returns the CpuCost field value if set, zero value otherwise.
func (o *Host) GetCpuCost() Cost {
	if o == nil || IsNil(o.CpuCost) {
		var ret Cost
		return ret
	}
	return o.CpuCost
}

// GetCpuCostOk returns a tuple with the CpuCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Host) GetCpuCostOk() (Cost, bool) {
	if o == nil || IsNil(o.CpuCost) {
		return Cost{}, false
	}
	return o.CpuCost, true
}

// HasCpuCost returns a boolean if a field has been set.
func (o *Host) HasCpuCost() bool {
	if o != nil && !IsNil(o.CpuCost) {
		return true
	}

	return false
}

// SetCpuCost gets a reference to the given Cost and assigns it to the CpuCost field.
func (o *Host) SetCpuCost(v Cost) {
	o.CpuCost = v
}

// GetMemoryCost returns the MemoryCost field value if set, zero value otherwise.
func (o *Host) GetMemoryCost() Cost {
	if o == nil || IsNil(o.MemoryCost) {
		var ret Cost
		return ret
	}
	return o.MemoryCost
}

// GetMemoryCostOk returns a tuple with the MemoryCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Host) GetMemoryCostOk() (Cost, bool) {
	if o == nil || IsNil(o.MemoryCost) {
		return Cost{}, false
	}
	return o.MemoryCost, true
}

// HasMemoryCost returns a boolean if a field has been set.
func (o *Host) HasMemoryCost() bool {
	if o != nil && !IsNil(o.MemoryCost) {
		return true
	}

	return false
}

// SetMemoryCost gets a reference to the given Cost and assigns it to the MemoryCost field.
func (o *Host) SetMemoryCost(v Cost) {
	o.MemoryCost = v
}

// GetOvercommitCpuRatio returns the OvercommitCpuRatio field value if set, zero value otherwise.
func (o *Host) GetOvercommitCpuRatio() int32 {
	if o == nil || IsNil(o.OvercommitCpuRatio) {
		var ret int32
		return ret
	}
	return *o.OvercommitCpuRatio
}

// GetOvercommitCpuRatioOk returns a tuple with the OvercommitCpuRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Host) GetOvercommitCpuRatioOk() (*int32, bool) {
	if o == nil || IsNil(o.OvercommitCpuRatio) {
		return nil, false
	}
	return o.OvercommitCpuRatio, true
}

// HasOvercommitCpuRatio returns a boolean if a field has been set.
func (o *Host) HasOvercommitCpuRatio() bool {
	if o != nil && !IsNil(o.OvercommitCpuRatio) {
		return true
	}

	return false
}

// SetOvercommitCpuRatio gets a reference to the given int32 and assigns it to the OvercommitCpuRatio field.
func (o *Host) SetOvercommitCpuRatio(v int32) {
	o.OvercommitCpuRatio = &v
}

// GetOvercommitMemoryRatio returns the OvercommitMemoryRatio field value if set, zero value otherwise.
func (o *Host) GetOvercommitMemoryRatio() int32 {
	if o == nil || IsNil(o.OvercommitMemoryRatio) {
		var ret int32
		return ret
	}
	return *o.OvercommitMemoryRatio
}

// GetOvercommitMemoryRatioOk returns a tuple with the OvercommitMemoryRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Host) GetOvercommitMemoryRatioOk() (*int32, bool) {
	if o == nil || IsNil(o.OvercommitMemoryRatio) {
		return nil, false
	}
	return o.OvercommitMemoryRatio, true
}

// HasOvercommitMemoryRatio returns a boolean if a field has been set.
func (o *Host) HasOvercommitMemoryRatio() bool {
	if o != nil && !IsNil(o.OvercommitMemoryRatio) {
		return true
	}

	return false
}

// SetOvercommitMemoryRatio gets a reference to the given int32 and assigns it to the OvercommitMemoryRatio field.
func (o *Host) SetOvercommitMemoryRatio(v int32) {
	o.OvercommitMemoryRatio = &v
}

func (o Host) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Host) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["protocol"] = o.Protocol
	toSerialize["address"] = o.Address
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !IsNil(o.Tls) {
		toSerialize["tls"] = o.Tls
	}
	if !IsNil(o.CpuCost) {
		toSerialize["cpu_cost"] = o.CpuCost
	}
	if !IsNil(o.MemoryCost) {
		toSerialize["memory_cost"] = o.MemoryCost
	}
	if !IsNil(o.OvercommitCpuRatio) {
		toSerialize["overcommit_cpu_ratio"] = o.OvercommitCpuRatio
	}
	if !IsNil(o.OvercommitMemoryRatio) {
		toSerialize["overcommit_memory_ratio"] = o.OvercommitMemoryRatio
	}
	return toSerialize, nil
}

func (o *Host) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"protocol",
		"address",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHost := _Host{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHost)

	if err != nil {
		return err
	}

	*o = Host(varHost)

	return err
}

type NullableHost struct {
	value *Host
	isSet bool
}

func (v NullableHost) Get() *Host {
	return v.value
}

func (v *NullableHost) Set(val *Host) {
	v.value = val
	v.isSet = true
}

func (v NullableHost) IsSet() bool {
	return v.isSet
}

func (v *NullableHost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHost(val *Host) *NullableHost {
	return &NullableHost{value: val, isSet: true}
}

func (v NullableHost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


