// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/dalet-oss/kowabunga-api/sdk/go/models"
)

// NewCreateProjectZoneInstanceParams creates a new CreateProjectZoneInstanceParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCreateProjectZoneInstanceParams() *CreateProjectZoneInstanceParams {
	return &CreateProjectZoneInstanceParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCreateProjectZoneInstanceParamsWithTimeout creates a new CreateProjectZoneInstanceParams object
// with the ability to set a timeout on a request.
func NewCreateProjectZoneInstanceParamsWithTimeout(timeout time.Duration) *CreateProjectZoneInstanceParams {
	return &CreateProjectZoneInstanceParams{
		timeout: timeout,
	}
}

// NewCreateProjectZoneInstanceParamsWithContext creates a new CreateProjectZoneInstanceParams object
// with the ability to set a context for a request.
func NewCreateProjectZoneInstanceParamsWithContext(ctx context.Context) *CreateProjectZoneInstanceParams {
	return &CreateProjectZoneInstanceParams{
		Context: ctx,
	}
}

// NewCreateProjectZoneInstanceParamsWithHTTPClient creates a new CreateProjectZoneInstanceParams object
// with the ability to set a custom HTTPClient for a request.
func NewCreateProjectZoneInstanceParamsWithHTTPClient(client *http.Client) *CreateProjectZoneInstanceParams {
	return &CreateProjectZoneInstanceParams{
		HTTPClient: client,
	}
}

/*
CreateProjectZoneInstanceParams contains all the parameters to send to the API endpoint

	for the create project zone instance operation.

	Typically these are written to a http.Request.
*/
type CreateProjectZoneInstanceParams struct {

	// Body.
	Body *models.Instance

	/* Notify.

	   Whether or not to send a notification email at resource creation.

	   Default: true
	*/
	Notify *bool

	/* ProjectID.

	   the ID of the associated project.
	*/
	ProjectID string

	/* ZoneID.

	   the ID of the associated zone.
	*/
	ZoneID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the create project zone instance params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateProjectZoneInstanceParams) WithDefaults() *CreateProjectZoneInstanceParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the create project zone instance params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateProjectZoneInstanceParams) SetDefaults() {
	var (
		notifyDefault = bool(true)
	)

	val := CreateProjectZoneInstanceParams{
		Notify: &notifyDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the create project zone instance params
func (o *CreateProjectZoneInstanceParams) WithTimeout(timeout time.Duration) *CreateProjectZoneInstanceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create project zone instance params
func (o *CreateProjectZoneInstanceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create project zone instance params
func (o *CreateProjectZoneInstanceParams) WithContext(ctx context.Context) *CreateProjectZoneInstanceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create project zone instance params
func (o *CreateProjectZoneInstanceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create project zone instance params
func (o *CreateProjectZoneInstanceParams) WithHTTPClient(client *http.Client) *CreateProjectZoneInstanceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create project zone instance params
func (o *CreateProjectZoneInstanceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the create project zone instance params
func (o *CreateProjectZoneInstanceParams) WithBody(body *models.Instance) *CreateProjectZoneInstanceParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the create project zone instance params
func (o *CreateProjectZoneInstanceParams) SetBody(body *models.Instance) {
	o.Body = body
}

// WithNotify adds the notify to the create project zone instance params
func (o *CreateProjectZoneInstanceParams) WithNotify(notify *bool) *CreateProjectZoneInstanceParams {
	o.SetNotify(notify)
	return o
}

// SetNotify adds the notify to the create project zone instance params
func (o *CreateProjectZoneInstanceParams) SetNotify(notify *bool) {
	o.Notify = notify
}

// WithProjectID adds the projectID to the create project zone instance params
func (o *CreateProjectZoneInstanceParams) WithProjectID(projectID string) *CreateProjectZoneInstanceParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the create project zone instance params
func (o *CreateProjectZoneInstanceParams) SetProjectID(projectID string) {
	o.ProjectID = projectID
}

// WithZoneID adds the zoneID to the create project zone instance params
func (o *CreateProjectZoneInstanceParams) WithZoneID(zoneID string) *CreateProjectZoneInstanceParams {
	o.SetZoneID(zoneID)
	return o
}

// SetZoneID adds the zoneId to the create project zone instance params
func (o *CreateProjectZoneInstanceParams) SetZoneID(zoneID string) {
	o.ZoneID = zoneID
}

// WriteToRequest writes these params to a swagger request
func (o *CreateProjectZoneInstanceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.Notify != nil {

		// query param notify
		var qrNotify bool

		if o.Notify != nil {
			qrNotify = *o.Notify
		}
		qNotify := swag.FormatBool(qrNotify)
		if qNotify != "" {

			if err := r.SetQueryParam("notify", qNotify); err != nil {
				return err
			}
		}
	}

	// path param projectId
	if err := r.SetPathParam("projectId", o.ProjectID); err != nil {
		return err
	}

	// path param zoneId
	if err := r.SetPathParam("zoneId", o.ZoneID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
