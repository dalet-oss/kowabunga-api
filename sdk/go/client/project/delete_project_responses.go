// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteProjectReader is a Reader for the DeleteProject structure.
type DeleteProjectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteProjectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteProjectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewDeleteProjectNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewDeleteProjectConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteProjectInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /project/{projectId}] DeleteProject", response, response.Code())
	}
}

// NewDeleteProjectOK creates a DeleteProjectOK with default headers values
func NewDeleteProjectOK() *DeleteProjectOK {
	return &DeleteProjectOK{}
}

/*
DeleteProjectOK describes a response with status code 200, with default header values.

The project has been successfully removed.
*/
type DeleteProjectOK struct {
}

// IsSuccess returns true when this delete project o k response has a 2xx status code
func (o *DeleteProjectOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete project o k response has a 3xx status code
func (o *DeleteProjectOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete project o k response has a 4xx status code
func (o *DeleteProjectOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete project o k response has a 5xx status code
func (o *DeleteProjectOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete project o k response a status code equal to that given
func (o *DeleteProjectOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete project o k response
func (o *DeleteProjectOK) Code() int {
	return 200
}

func (o *DeleteProjectOK) Error() string {
	return fmt.Sprintf("[DELETE /project/{projectId}][%d] deleteProjectOK ", 200)
}

func (o *DeleteProjectOK) String() string {
	return fmt.Sprintf("[DELETE /project/{projectId}][%d] deleteProjectOK ", 200)
}

func (o *DeleteProjectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteProjectNotFound creates a DeleteProjectNotFound with default headers values
func NewDeleteProjectNotFound() *DeleteProjectNotFound {
	return &DeleteProjectNotFound{}
}

/*
DeleteProjectNotFound describes a response with status code 404, with default header values.

Invalid project ID was provided.
*/
type DeleteProjectNotFound struct {
}

// IsSuccess returns true when this delete project not found response has a 2xx status code
func (o *DeleteProjectNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete project not found response has a 3xx status code
func (o *DeleteProjectNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete project not found response has a 4xx status code
func (o *DeleteProjectNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete project not found response has a 5xx status code
func (o *DeleteProjectNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete project not found response a status code equal to that given
func (o *DeleteProjectNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete project not found response
func (o *DeleteProjectNotFound) Code() int {
	return 404
}

func (o *DeleteProjectNotFound) Error() string {
	return fmt.Sprintf("[DELETE /project/{projectId}][%d] deleteProjectNotFound ", 404)
}

func (o *DeleteProjectNotFound) String() string {
	return fmt.Sprintf("[DELETE /project/{projectId}][%d] deleteProjectNotFound ", 404)
}

func (o *DeleteProjectNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteProjectConflict creates a DeleteProjectConflict with default headers values
func NewDeleteProjectConflict() *DeleteProjectConflict {
	return &DeleteProjectConflict{}
}

/*
DeleteProjectConflict describes a response with status code 409, with default header values.

The project is not empty or still being referenced.
*/
type DeleteProjectConflict struct {
}

// IsSuccess returns true when this delete project conflict response has a 2xx status code
func (o *DeleteProjectConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete project conflict response has a 3xx status code
func (o *DeleteProjectConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete project conflict response has a 4xx status code
func (o *DeleteProjectConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete project conflict response has a 5xx status code
func (o *DeleteProjectConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this delete project conflict response a status code equal to that given
func (o *DeleteProjectConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the delete project conflict response
func (o *DeleteProjectConflict) Code() int {
	return 409
}

func (o *DeleteProjectConflict) Error() string {
	return fmt.Sprintf("[DELETE /project/{projectId}][%d] deleteProjectConflict ", 409)
}

func (o *DeleteProjectConflict) String() string {
	return fmt.Sprintf("[DELETE /project/{projectId}][%d] deleteProjectConflict ", 409)
}

func (o *DeleteProjectConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteProjectInternalServerError creates a DeleteProjectInternalServerError with default headers values
func NewDeleteProjectInternalServerError() *DeleteProjectInternalServerError {
	return &DeleteProjectInternalServerError{}
}

/*
DeleteProjectInternalServerError describes a response with status code 500, with default header values.

Unable to delete project.
*/
type DeleteProjectInternalServerError struct {
}

// IsSuccess returns true when this delete project internal server error response has a 2xx status code
func (o *DeleteProjectInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete project internal server error response has a 3xx status code
func (o *DeleteProjectInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete project internal server error response has a 4xx status code
func (o *DeleteProjectInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete project internal server error response has a 5xx status code
func (o *DeleteProjectInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete project internal server error response a status code equal to that given
func (o *DeleteProjectInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete project internal server error response
func (o *DeleteProjectInternalServerError) Code() int {
	return 500
}

func (o *DeleteProjectInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /project/{projectId}][%d] deleteProjectInternalServerError ", 500)
}

func (o *DeleteProjectInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /project/{projectId}][%d] deleteProjectInternalServerError ", 500)
}

func (o *DeleteProjectInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
