// Code generated by go-swagger; DO NOT EDIT.

package zone

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteZoneReader is a Reader for the DeleteZone structure.
type DeleteZoneReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteZoneReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteZoneOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewDeleteZoneNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewDeleteZoneConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteZoneInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /zone/{zoneId}] DeleteZone", response, response.Code())
	}
}

// NewDeleteZoneOK creates a DeleteZoneOK with default headers values
func NewDeleteZoneOK() *DeleteZoneOK {
	return &DeleteZoneOK{}
}

/*
DeleteZoneOK describes a response with status code 200, with default header values.

The zone has been successfully removed.
*/
type DeleteZoneOK struct {
}

// IsSuccess returns true when this delete zone o k response has a 2xx status code
func (o *DeleteZoneOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete zone o k response has a 3xx status code
func (o *DeleteZoneOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete zone o k response has a 4xx status code
func (o *DeleteZoneOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete zone o k response has a 5xx status code
func (o *DeleteZoneOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete zone o k response a status code equal to that given
func (o *DeleteZoneOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete zone o k response
func (o *DeleteZoneOK) Code() int {
	return 200
}

func (o *DeleteZoneOK) Error() string {
	return fmt.Sprintf("[DELETE /zone/{zoneId}][%d] deleteZoneOK ", 200)
}

func (o *DeleteZoneOK) String() string {
	return fmt.Sprintf("[DELETE /zone/{zoneId}][%d] deleteZoneOK ", 200)
}

func (o *DeleteZoneOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteZoneNotFound creates a DeleteZoneNotFound with default headers values
func NewDeleteZoneNotFound() *DeleteZoneNotFound {
	return &DeleteZoneNotFound{}
}

/*
DeleteZoneNotFound describes a response with status code 404, with default header values.

Invalid zone ID was provided.
*/
type DeleteZoneNotFound struct {
}

// IsSuccess returns true when this delete zone not found response has a 2xx status code
func (o *DeleteZoneNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete zone not found response has a 3xx status code
func (o *DeleteZoneNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete zone not found response has a 4xx status code
func (o *DeleteZoneNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete zone not found response has a 5xx status code
func (o *DeleteZoneNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete zone not found response a status code equal to that given
func (o *DeleteZoneNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete zone not found response
func (o *DeleteZoneNotFound) Code() int {
	return 404
}

func (o *DeleteZoneNotFound) Error() string {
	return fmt.Sprintf("[DELETE /zone/{zoneId}][%d] deleteZoneNotFound ", 404)
}

func (o *DeleteZoneNotFound) String() string {
	return fmt.Sprintf("[DELETE /zone/{zoneId}][%d] deleteZoneNotFound ", 404)
}

func (o *DeleteZoneNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteZoneConflict creates a DeleteZoneConflict with default headers values
func NewDeleteZoneConflict() *DeleteZoneConflict {
	return &DeleteZoneConflict{}
}

/*
DeleteZoneConflict describes a response with status code 409, with default header values.

The zone is not empty or still being referenced.
*/
type DeleteZoneConflict struct {
}

// IsSuccess returns true when this delete zone conflict response has a 2xx status code
func (o *DeleteZoneConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete zone conflict response has a 3xx status code
func (o *DeleteZoneConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete zone conflict response has a 4xx status code
func (o *DeleteZoneConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete zone conflict response has a 5xx status code
func (o *DeleteZoneConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this delete zone conflict response a status code equal to that given
func (o *DeleteZoneConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the delete zone conflict response
func (o *DeleteZoneConflict) Code() int {
	return 409
}

func (o *DeleteZoneConflict) Error() string {
	return fmt.Sprintf("[DELETE /zone/{zoneId}][%d] deleteZoneConflict ", 409)
}

func (o *DeleteZoneConflict) String() string {
	return fmt.Sprintf("[DELETE /zone/{zoneId}][%d] deleteZoneConflict ", 409)
}

func (o *DeleteZoneConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteZoneInternalServerError creates a DeleteZoneInternalServerError with default headers values
func NewDeleteZoneInternalServerError() *DeleteZoneInternalServerError {
	return &DeleteZoneInternalServerError{}
}

/*
DeleteZoneInternalServerError describes a response with status code 500, with default header values.

Unable to delete zone.
*/
type DeleteZoneInternalServerError struct {
}

// IsSuccess returns true when this delete zone internal server error response has a 2xx status code
func (o *DeleteZoneInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete zone internal server error response has a 3xx status code
func (o *DeleteZoneInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete zone internal server error response has a 4xx status code
func (o *DeleteZoneInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete zone internal server error response has a 5xx status code
func (o *DeleteZoneInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete zone internal server error response a status code equal to that given
func (o *DeleteZoneInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete zone internal server error response
func (o *DeleteZoneInternalServerError) Code() int {
	return 500
}

func (o *DeleteZoneInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /zone/{zoneId}][%d] deleteZoneInternalServerError ", 500)
}

func (o *DeleteZoneInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /zone/{zoneId}][%d] deleteZoneInternalServerError ", 500)
}

func (o *DeleteZoneInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
