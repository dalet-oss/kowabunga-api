/*
Kowabunga API documentation

Kvm Orchestrator With A BUNch of Goods Added

API version: 0.10.0
Contact: csops@dalet.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HostCaps type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HostCaps{}

// HostCaps struct for HostCaps
type HostCaps struct {
	// The host libvirt version.
	Version string `json:"version"`
	// the host UUID
	Uuid string `json:"uuid"`
	Cpu HostCapsCpu `json:"cpu"`
}

type _HostCaps HostCaps

// NewHostCaps instantiates a new HostCaps object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHostCaps(version string, uuid string, cpu HostCapsCpu) *HostCaps {
	this := HostCaps{}
	this.Version = version
	this.Uuid = uuid
	this.Cpu = cpu
	return &this
}

// NewHostCapsWithDefaults instantiates a new HostCaps object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHostCapsWithDefaults() *HostCaps {
	this := HostCaps{}
	return &this
}

// GetVersion returns the Version field value
func (o *HostCaps) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *HostCaps) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *HostCaps) SetVersion(v string) {
	o.Version = v
}

// GetUuid returns the Uuid field value
func (o *HostCaps) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *HostCaps) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *HostCaps) SetUuid(v string) {
	o.Uuid = v
}

// GetCpu returns the Cpu field value
func (o *HostCaps) GetCpu() HostCapsCpu {
	if o == nil {
		var ret HostCapsCpu
		return ret
	}

	return o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value
// and a boolean to check if the value has been set.
func (o *HostCaps) GetCpuOk() (*HostCapsCpu, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cpu, true
}

// SetCpu sets field value
func (o *HostCaps) SetCpu(v HostCapsCpu) {
	o.Cpu = v
}

func (o HostCaps) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HostCaps) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["version"] = o.Version
	toSerialize["uuid"] = o.Uuid
	toSerialize["cpu"] = o.Cpu
	return toSerialize, nil
}

func (o *HostCaps) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"version",
		"uuid",
		"cpu",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHostCaps := _HostCaps{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHostCaps)

	if err != nil {
		return err
	}

	*o = HostCaps(varHostCaps)

	return err
}

type NullableHostCaps struct {
	value *HostCaps
	isSet bool
}

func (v NullableHostCaps) Get() *HostCaps {
	return v.value
}

func (v *NullableHostCaps) Set(val *HostCaps) {
	v.value = val
	v.isSet = true
}

func (v NullableHostCaps) IsSet() bool {
	return v.isSet
}

func (v *NullableHostCaps) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHostCaps(val *HostCaps) *NullableHostCaps {
	return &NullableHostCaps{value: val, isSet: true}
}

func (v NullableHostCaps) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHostCaps) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


