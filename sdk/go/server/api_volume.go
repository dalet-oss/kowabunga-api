/*
 * Kowabunga API documentation
 *
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * API version: 0.10.0
 * Contact: csops@dalet.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// VolumeAPIController binds http requests to an api service and writes the service results to the http response
type VolumeAPIController struct {
	service VolumeAPIServicer
	errorHandler ErrorHandler
}

// VolumeAPIOption for how the controller is set up.
type VolumeAPIOption func(*VolumeAPIController)

// WithVolumeAPIErrorHandler inject ErrorHandler into controller
func WithVolumeAPIErrorHandler(h ErrorHandler) VolumeAPIOption {
	return func(c *VolumeAPIController) {
		c.errorHandler = h
	}
}

// NewVolumeAPIController creates a default api controller
func NewVolumeAPIController(s VolumeAPIServicer, opts ...VolumeAPIOption) Router {
	controller := &VolumeAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the VolumeAPIController
func (c *VolumeAPIController) Routes() Routes {
	return Routes{
		"CreateProjectZoneVolume": Route{
			strings.ToUpper("Post"),
			"/api/v1/project/{projectId}/zone/{zoneId}/volume",
			c.CreateProjectZoneVolume,
		},
		"DeleteVolume": Route{
			strings.ToUpper("Delete"),
			"/api/v1/volume/{volumeId}",
			c.DeleteVolume,
		},
		"GetAllVolumes": Route{
			strings.ToUpper("Get"),
			"/api/v1/volume",
			c.GetAllVolumes,
		},
		"GetPoolVolumes": Route{
			strings.ToUpper("Get"),
			"/api/v1/pool/{poolId}/volumes",
			c.GetPoolVolumes,
		},
		"GetProjectZoneVolumes": Route{
			strings.ToUpper("Get"),
			"/api/v1/project/{projectId}/zone/{zoneId}/volumes",
			c.GetProjectZoneVolumes,
		},
		"GetVolume": Route{
			strings.ToUpper("Get"),
			"/api/v1/volume/{volumeId}",
			c.GetVolume,
		},
		"UpdateVolume": Route{
			strings.ToUpper("Put"),
			"/api/v1/volume/{volumeId}",
			c.UpdateVolume,
		},
	}
}

// CreateProjectZoneVolume - 
func (c *VolumeAPIController) CreateProjectZoneVolume(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	volumeParam := Volume{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&volumeParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertVolumeRequired(volumeParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertVolumeConstraints(volumeParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var poolIdParam string
	if query.Has("poolId") {
		param := query.Get("poolId")

		poolIdParam = param
	} else {
	}
	var templateIdParam string
	if query.Has("templateId") {
		param := query.Get("templateId")

		templateIdParam = param
	} else {
	}
	result, err := c.service.CreateProjectZoneVolume(r.Context(), projectIdParam, zoneIdParam, volumeParam, poolIdParam, templateIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteVolume - 
func (c *VolumeAPIController) DeleteVolume(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	volumeIdParam := params["volumeId"]
	if volumeIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"volumeId"}, nil)
		return
	}
	result, err := c.service.DeleteVolume(r.Context(), volumeIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAllVolumes - 
func (c *VolumeAPIController) GetAllVolumes(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetAllVolumes(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPoolVolumes - 
func (c *VolumeAPIController) GetPoolVolumes(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	poolIdParam := params["poolId"]
	if poolIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"poolId"}, nil)
		return
	}
	result, err := c.service.GetPoolVolumes(r.Context(), poolIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetProjectZoneVolumes - 
func (c *VolumeAPIController) GetProjectZoneVolumes(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	result, err := c.service.GetProjectZoneVolumes(r.Context(), projectIdParam, zoneIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetVolume - 
func (c *VolumeAPIController) GetVolume(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	volumeIdParam := params["volumeId"]
	if volumeIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"volumeId"}, nil)
		return
	}
	result, err := c.service.GetVolume(r.Context(), volumeIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateVolume - 
func (c *VolumeAPIController) UpdateVolume(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	volumeIdParam := params["volumeId"]
	if volumeIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"volumeId"}, nil)
		return
	}
	volumeParam := Volume{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&volumeParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertVolumeRequired(volumeParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertVolumeConstraints(volumeParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateVolume(r.Context(), volumeIdParam, volumeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
