/*
 * Kowabunga
 *
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * API version: 0.10.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// VnetAPIController binds http requests to an api service and writes the service results to the http response
type VnetAPIController struct {
	service VnetAPIServicer
	errorHandler ErrorHandler
}

// VnetAPIOption for how the controller is set up.
type VnetAPIOption func(*VnetAPIController)

// WithVnetAPIErrorHandler inject ErrorHandler into controller
func WithVnetAPIErrorHandler(h ErrorHandler) VnetAPIOption {
	return func(c *VnetAPIController) {
		c.errorHandler = h
	}
}

// NewVnetAPIController creates a default api controller
func NewVnetAPIController(s VnetAPIServicer, opts ...VnetAPIOption) Router {
	controller := &VnetAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the VnetAPIController
func (c *VnetAPIController) Routes() Routes {
	return Routes{
		"CreateSubnet": Route{
			strings.ToUpper("Post"),
			"/api/v1/vnet/{vnetId}/subnet",
			c.CreateSubnet,
		},
		"CreateVNet": Route{
			strings.ToUpper("Post"),
			"/api/v1/zone/{zoneId}/vnet",
			c.CreateVNet,
		},
		"DeleteVNet": Route{
			strings.ToUpper("Delete"),
			"/api/v1/vnet/{vnetId}",
			c.DeleteVNet,
		},
		"GetAllVNets": Route{
			strings.ToUpper("Get"),
			"/api/v1/vnet",
			c.GetAllVNets,
		},
		"GetVNet": Route{
			strings.ToUpper("Get"),
			"/api/v1/vnet/{vnetId}",
			c.GetVNet,
		},
		"GetVNetSubnets": Route{
			strings.ToUpper("Get"),
			"/api/v1/vnet/{vnetId}/subnets",
			c.GetVNetSubnets,
		},
		"GetZoneVNets": Route{
			strings.ToUpper("Get"),
			"/api/v1/zone/{zoneId}/vnets",
			c.GetZoneVNets,
		},
		"UpdateVNet": Route{
			strings.ToUpper("Put"),
			"/api/v1/vnet/{vnetId}",
			c.UpdateVNet,
		},
		"UpdateVNetDefaultSubnet": Route{
			strings.ToUpper("Put"),
			"/api/v1/vnet/{vnetId}/subnet/{subnetId}/default",
			c.UpdateVNetDefaultSubnet,
		},
	}
}

// CreateSubnet - 
func (c *VnetAPIController) CreateSubnet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	vnetIdParam := params["vnetId"]
	if vnetIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"vnetId"}, nil)
		return
	}
	bodyParam := Subnet{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSubnetRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSubnetConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateSubnet(r.Context(), vnetIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateVNet - 
func (c *VnetAPIController) CreateVNet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	bodyParam := VNet{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertVNetRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertVNetConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateVNet(r.Context(), zoneIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteVNet - 
func (c *VnetAPIController) DeleteVNet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	vnetIdParam := params["vnetId"]
	if vnetIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"vnetId"}, nil)
		return
	}
	result, err := c.service.DeleteVNet(r.Context(), vnetIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAllVNets - 
func (c *VnetAPIController) GetAllVNets(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetAllVNets(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetVNet - 
func (c *VnetAPIController) GetVNet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	vnetIdParam := params["vnetId"]
	if vnetIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"vnetId"}, nil)
		return
	}
	result, err := c.service.GetVNet(r.Context(), vnetIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetVNetSubnets - 
func (c *VnetAPIController) GetVNetSubnets(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	vnetIdParam := params["vnetId"]
	if vnetIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"vnetId"}, nil)
		return
	}
	result, err := c.service.GetVNetSubnets(r.Context(), vnetIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetZoneVNets - 
func (c *VnetAPIController) GetZoneVNets(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	result, err := c.service.GetZoneVNets(r.Context(), zoneIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateVNet - 
func (c *VnetAPIController) UpdateVNet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	vnetIdParam := params["vnetId"]
	if vnetIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"vnetId"}, nil)
		return
	}
	bodyParam := VNet{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertVNetRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertVNetConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateVNet(r.Context(), vnetIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateVNetDefaultSubnet - 
func (c *VnetAPIController) UpdateVNetDefaultSubnet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	vnetIdParam := params["vnetId"]
	if vnetIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"vnetId"}, nil)
		return
	}
	subnetIdParam := params["subnetId"]
	if subnetIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"subnetId"}, nil)
		return
	}
	result, err := c.service.UpdateVNetDefaultSubnet(r.Context(), vnetIdParam, subnetIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
