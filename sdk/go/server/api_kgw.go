/*
 * Kowabunga API documentation
 *
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * API version: 0.41.0
 * Contact: csops@dalet.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// KgwAPIController binds http requests to an api service and writes the service results to the http response
type KgwAPIController struct {
	service KgwAPIServicer
	errorHandler ErrorHandler
}

// KgwAPIOption for how the controller is set up.
type KgwAPIOption func(*KgwAPIController)

// WithKgwAPIErrorHandler inject ErrorHandler into controller
func WithKgwAPIErrorHandler(h ErrorHandler) KgwAPIOption {
	return func(c *KgwAPIController) {
		c.errorHandler = h
	}
}

// NewKgwAPIController creates a default api controller
func NewKgwAPIController(s KgwAPIServicer, opts ...KgwAPIOption) Router {
	controller := &KgwAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the KgwAPIController
func (c *KgwAPIController) Routes() Routes {
	return Routes{
		"DeleteKGW": Route{
			strings.ToUpper("Delete"),
			"/api/v1/kgw/{kgwId}",
			c.DeleteKGW,
		},
		"ListKGWs": Route{
			strings.ToUpper("Get"),
			"/api/v1/kgw",
			c.ListKGWs,
		},
		"ReadKGW": Route{
			strings.ToUpper("Get"),
			"/api/v1/kgw/{kgwId}",
			c.ReadKGW,
		},
		"UpdateKGW": Route{
			strings.ToUpper("Put"),
			"/api/v1/kgw/{kgwId}",
			c.UpdateKGW,
		},
	}
}

// DeleteKGW - 
func (c *KgwAPIController) DeleteKGW(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kgwIdParam := params["kgwId"]
	if kgwIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"kgwId"}, nil)
		return
	}
	result, err := c.service.DeleteKGW(r.Context(), kgwIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListKGWs - 
func (c *KgwAPIController) ListKGWs(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListKGWs(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ReadKGW - 
func (c *KgwAPIController) ReadKGW(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kgwIdParam := params["kgwId"]
	if kgwIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"kgwId"}, nil)
		return
	}
	result, err := c.service.ReadKGW(r.Context(), kgwIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateKGW - 
func (c *KgwAPIController) UpdateKGW(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kgwIdParam := params["kgwId"]
	if kgwIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"kgwId"}, nil)
		return
	}
	kgwParam := Kgw{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&kgwParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertKgwRequired(kgwParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertKgwConstraints(kgwParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateKGW(r.Context(), kgwIdParam, kgwParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
