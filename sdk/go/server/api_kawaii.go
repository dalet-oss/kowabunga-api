/*
 * Kowabunga API documentation
 *
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * API version: 0.42.0
 * Contact: csops@dalet.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// KawaiiAPIController binds http requests to an api service and writes the service results to the http response
type KawaiiAPIController struct {
	service KawaiiAPIServicer
	errorHandler ErrorHandler
}

// KawaiiAPIOption for how the controller is set up.
type KawaiiAPIOption func(*KawaiiAPIController)

// WithKawaiiAPIErrorHandler inject ErrorHandler into controller
func WithKawaiiAPIErrorHandler(h ErrorHandler) KawaiiAPIOption {
	return func(c *KawaiiAPIController) {
		c.errorHandler = h
	}
}

// NewKawaiiAPIController creates a default api controller
func NewKawaiiAPIController(s KawaiiAPIServicer, opts ...KawaiiAPIOption) Router {
	controller := &KawaiiAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the KawaiiAPIController
func (c *KawaiiAPIController) Routes() Routes {
	return Routes{
		"DeleteKawaii": Route{
			strings.ToUpper("Delete"),
			"/api/v1/kawaii/{kawaiiId}",
			c.DeleteKawaii,
		},
		"ListKawaiis": Route{
			strings.ToUpper("Get"),
			"/api/v1/kawaii",
			c.ListKawaiis,
		},
		"ReadKawaii": Route{
			strings.ToUpper("Get"),
			"/api/v1/kawaii/{kawaiiId}",
			c.ReadKawaii,
		},
		"UpdateKawaii": Route{
			strings.ToUpper("Put"),
			"/api/v1/kawaii/{kawaiiId}",
			c.UpdateKawaii,
		},
	}
}

// DeleteKawaii - 
func (c *KawaiiAPIController) DeleteKawaii(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kawaiiIdParam := params["kawaiiId"]
	if kawaiiIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"kawaiiId"}, nil)
		return
	}
	result, err := c.service.DeleteKawaii(r.Context(), kawaiiIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListKawaiis - 
func (c *KawaiiAPIController) ListKawaiis(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListKawaiis(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ReadKawaii - 
func (c *KawaiiAPIController) ReadKawaii(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kawaiiIdParam := params["kawaiiId"]
	if kawaiiIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"kawaiiId"}, nil)
		return
	}
	result, err := c.service.ReadKawaii(r.Context(), kawaiiIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateKawaii - 
func (c *KawaiiAPIController) UpdateKawaii(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kawaiiIdParam := params["kawaiiId"]
	if kawaiiIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"kawaiiId"}, nil)
		return
	}
	kawaiiParam := Kawaii{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&kawaiiParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertKawaiiRequired(kawaiiParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertKawaiiConstraints(kawaiiParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateKawaii(r.Context(), kawaiiIdParam, kawaiiParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
