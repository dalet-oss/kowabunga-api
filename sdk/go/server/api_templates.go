/*
 * Kowabunga API documentation
 *
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * API version: 0.10.0
 * Contact: csops@dalet.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// TemplatesAPIController binds http requests to an api service and writes the service results to the http response
type TemplatesAPIController struct {
	service TemplatesAPIServicer
	errorHandler ErrorHandler
}

// TemplatesAPIOption for how the controller is set up.
type TemplatesAPIOption func(*TemplatesAPIController)

// WithTemplatesAPIErrorHandler inject ErrorHandler into controller
func WithTemplatesAPIErrorHandler(h ErrorHandler) TemplatesAPIOption {
	return func(c *TemplatesAPIController) {
		c.errorHandler = h
	}
}

// NewTemplatesAPIController creates a default api controller
func NewTemplatesAPIController(s TemplatesAPIServicer, opts ...TemplatesAPIOption) Router {
	controller := &TemplatesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the TemplatesAPIController
func (c *TemplatesAPIController) Routes() Routes {
	return Routes{
		"GetPoolTemplates": Route{
			strings.ToUpper("Get"),
			"/api/v1/pool/{poolId}/templates",
			c.GetPoolTemplates,
		},
	}
}

// GetPoolTemplates - 
func (c *TemplatesAPIController) GetPoolTemplates(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	poolIdParam := params["poolId"]
	if poolIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"poolId"}, nil)
		return
	}
	result, err := c.service.GetPoolTemplates(r.Context(), poolIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
