/*
 * Kowabunga
 *
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * API version: 0.10.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// HostAPIController binds http requests to an api service and writes the service results to the http response
type HostAPIController struct {
	service HostAPIServicer
	errorHandler ErrorHandler
}

// HostAPIOption for how the controller is set up.
type HostAPIOption func(*HostAPIController)

// WithHostAPIErrorHandler inject ErrorHandler into controller
func WithHostAPIErrorHandler(h ErrorHandler) HostAPIOption {
	return func(c *HostAPIController) {
		c.errorHandler = h
	}
}

// NewHostAPIController creates a default api controller
func NewHostAPIController(s HostAPIServicer, opts ...HostAPIOption) Router {
	controller := &HostAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the HostAPIController
func (c *HostAPIController) Routes() Routes {
	return Routes{
		"CreateHost": Route{
			strings.ToUpper("Post"),
			"/api/v1/zone/{zoneId}/host",
			c.CreateHost,
		},
		"DeleteHost": Route{
			strings.ToUpper("Delete"),
			"/api/v1/host/{hostId}",
			c.DeleteHost,
		},
		"GetAllHosts": Route{
			strings.ToUpper("Get"),
			"/api/v1/host",
			c.GetAllHosts,
		},
		"GetHost": Route{
			strings.ToUpper("Get"),
			"/api/v1/host/{hostId}",
			c.GetHost,
		},
		"GetHostCaps": Route{
			strings.ToUpper("Get"),
			"/api/v1/host/{hostId}/caps",
			c.GetHostCaps,
		},
		"GetHostInstances": Route{
			strings.ToUpper("Get"),
			"/api/v1/host/{hostId}/instances",
			c.GetHostInstances,
		},
		"GetZoneHosts": Route{
			strings.ToUpper("Get"),
			"/api/v1/zone/{zoneId}/hosts",
			c.GetZoneHosts,
		},
		"UpdateHost": Route{
			strings.ToUpper("Put"),
			"/api/v1/host/{hostId}",
			c.UpdateHost,
		},
	}
}

// CreateHost - 
func (c *HostAPIController) CreateHost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	bodyParam := Host{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertHostRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertHostConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateHost(r.Context(), zoneIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteHost - 
func (c *HostAPIController) DeleteHost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	hostIdParam := params["hostId"]
	if hostIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"hostId"}, nil)
		return
	}
	result, err := c.service.DeleteHost(r.Context(), hostIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAllHosts - 
func (c *HostAPIController) GetAllHosts(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetAllHosts(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetHost - 
func (c *HostAPIController) GetHost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	hostIdParam := params["hostId"]
	if hostIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"hostId"}, nil)
		return
	}
	result, err := c.service.GetHost(r.Context(), hostIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetHostCaps - 
func (c *HostAPIController) GetHostCaps(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	hostIdParam := params["hostId"]
	if hostIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"hostId"}, nil)
		return
	}
	result, err := c.service.GetHostCaps(r.Context(), hostIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetHostInstances - 
func (c *HostAPIController) GetHostInstances(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	hostIdParam := params["hostId"]
	if hostIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"hostId"}, nil)
		return
	}
	result, err := c.service.GetHostInstances(r.Context(), hostIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetZoneHosts - 
func (c *HostAPIController) GetZoneHosts(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	result, err := c.service.GetZoneHosts(r.Context(), zoneIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateHost - 
func (c *HostAPIController) UpdateHost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	hostIdParam := params["hostId"]
	if hostIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"hostId"}, nil)
		return
	}
	bodyParam := Host{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertHostRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertHostConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateHost(r.Context(), hostIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
