/*
 * Kowabunga API documentation
 *
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * API version: 0.10.0
 * Contact: csops@dalet.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// NfsAPIController binds http requests to an api service and writes the service results to the http response
type NfsAPIController struct {
	service NfsAPIServicer
	errorHandler ErrorHandler
}

// NfsAPIOption for how the controller is set up.
type NfsAPIOption func(*NfsAPIController)

// WithNfsAPIErrorHandler inject ErrorHandler into controller
func WithNfsAPIErrorHandler(h ErrorHandler) NfsAPIOption {
	return func(c *NfsAPIController) {
		c.errorHandler = h
	}
}

// NewNfsAPIController creates a default api controller
func NewNfsAPIController(s NfsAPIServicer, opts ...NfsAPIOption) Router {
	controller := &NfsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the NfsAPIController
func (c *NfsAPIController) Routes() Routes {
	return Routes{
		"CreateNfsStorage": Route{
			strings.ToUpper("Post"),
			"/api/v1/zone/{zoneId}/nfs",
			c.CreateNfsStorage,
		},
		"DeleteStorageNFS": Route{
			strings.ToUpper("Delete"),
			"/api/v1/nfs/{ nfsId }",
			c.DeleteStorageNFS,
		},
		"GetZoneNfsStorages": Route{
			strings.ToUpper("Get"),
			"/api/v1/zone/{zoneId}/nfs",
			c.GetZoneNfsStorages,
		},
		"ListStorageNFSKFSs": Route{
			strings.ToUpper("Get"),
			"/api/v1/nfs/{ nfsId }/kfs",
			c.ListStorageNFSKFSs,
		},
		"ListStorageNFSs": Route{
			strings.ToUpper("Get"),
			"/api/v1/nfs",
			c.ListStorageNFSs,
		},
		"ReadStorageNFS": Route{
			strings.ToUpper("Get"),
			"/api/v1/nfs/{ nfsId }",
			c.ReadStorageNFS,
		},
		"UpdateStorageNFS": Route{
			strings.ToUpper("Put"),
			"/api/v1/nfs/{ nfsId }",
			c.UpdateStorageNFS,
		},
		"UpdateZoneDefaultNfsStorage": Route{
			strings.ToUpper("Put"),
			"/api/v1/zone/{zoneId}/nfs/{nfsId}/default",
			c.UpdateZoneDefaultNfsStorage,
		},
	}
}

// CreateNfsStorage - 
func (c *NfsAPIController) CreateNfsStorage(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	storageNfsParam := StorageNfs{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&storageNfsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertStorageNfsRequired(storageNfsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertStorageNfsConstraints(storageNfsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateNfsStorage(r.Context(), zoneIdParam, storageNfsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteStorageNFS - 
func (c *NfsAPIController) DeleteStorageNFS(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	nfsIdParam := params["nfsId"]
	if nfsIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"nfsId"}, nil)
		return
	}
	result, err := c.service.DeleteStorageNFS(r.Context(), nfsIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetZoneNfsStorages - 
func (c *NfsAPIController) GetZoneNfsStorages(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	result, err := c.service.GetZoneNfsStorages(r.Context(), zoneIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListStorageNFSKFSs - 
func (c *NfsAPIController) ListStorageNFSKFSs(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	nfsIdParam := params["nfsId"]
	if nfsIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"nfsId"}, nil)
		return
	}
	result, err := c.service.ListStorageNFSKFSs(r.Context(), nfsIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListStorageNFSs - 
func (c *NfsAPIController) ListStorageNFSs(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListStorageNFSs(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ReadStorageNFS - 
func (c *NfsAPIController) ReadStorageNFS(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	nfsIdParam := params["nfsId"]
	if nfsIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"nfsId"}, nil)
		return
	}
	result, err := c.service.ReadStorageNFS(r.Context(), nfsIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateStorageNFS - 
func (c *NfsAPIController) UpdateStorageNFS(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	nfsIdParam := params["nfsId"]
	if nfsIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"nfsId"}, nil)
		return
	}
	storageNfsParam := StorageNfs{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&storageNfsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertStorageNfsRequired(storageNfsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertStorageNfsConstraints(storageNfsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateStorageNFS(r.Context(), nfsIdParam, storageNfsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateZoneDefaultNfsStorage - 
func (c *NfsAPIController) UpdateZoneDefaultNfsStorage(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	nfsIdParam := params["nfsId"]
	if nfsIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"nfsId"}, nil)
		return
	}
	result, err := c.service.UpdateZoneDefaultNfsStorage(r.Context(), zoneIdParam, nfsIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
