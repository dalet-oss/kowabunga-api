/*
 * Kowabunga
 *
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * API version: 0.10.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server




type Project struct {

	// The project ID (auto-generated).
	Id string `json:"id,omitempty"`

	// The project name.
	Name string `json:"name"`

	// The project description.
	Description string `json:"description,omitempty"`

	// The project's owner name.
	Owner string `json:"owner"`

	// The project associated email address, used to receive notifications.
	Email string `json:"email"`

	// The project associated internal domain name (e.g. myproject.acme.com).
	Domain string `json:"domain,omitempty"`

	// The project default root password, set at cloud-init instance bootstrap phase. Will be randomly auto-generated at each instance creation if unspecified.
	RootPassword string `json:"root_password,omitempty"`

	// The project default service user name, created at cloud-init instance bootstrap phase. Will use Kowabunga's default configuration one if unspecified.
	BootstrapUser string `json:"bootstrap_user,omitempty"`

	// The project default public SSH key, to be associated to bootstrap user. Will use Kowabunga's default configuration one if unspecified.
	BootstrapPubkey string `json:"bootstrap_pubkey,omitempty"`

	// A list of tags to be associated to the project.
	Tags []string `json:"tags,omitempty"`

	// A list of metadata to be associated to the project
	Metadatas []Metadata `json:"metadatas,omitempty"`

	Quotas ProjectResources `json:"quotas,omitempty"`

	// The assigned project VPC private subnets IDs (read-only).
	PrivateSubnets []ZoneSubnet `json:"private_subnets,omitempty"`
}

// AssertProjectRequired checks if the required fields are not zero-ed
func AssertProjectRequired(obj Project) error {
	elements := map[string]interface{}{
		"name": obj.Name,
		"owner": obj.Owner,
		"email": obj.Email,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.Metadatas {
		if err := AssertMetadataRequired(el); err != nil {
			return err
		}
	}
	if err := AssertProjectResourcesRequired(obj.Quotas); err != nil {
		return err
	}
	for _, el := range obj.PrivateSubnets {
		if err := AssertZoneSubnetRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertProjectConstraints checks if the values respects the defined constraints
func AssertProjectConstraints(obj Project) error {
	return nil
}
