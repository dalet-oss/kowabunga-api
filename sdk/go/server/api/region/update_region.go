// Code generated by go-swagger; DO NOT EDIT.

package region

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UpdateRegionHandlerFunc turns a function with the right signature into a update region handler
type UpdateRegionHandlerFunc func(UpdateRegionParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateRegionHandlerFunc) Handle(params UpdateRegionParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// UpdateRegionHandler interface for that can handle valid update region params
type UpdateRegionHandler interface {
	Handle(UpdateRegionParams, interface{}) middleware.Responder
}

// NewUpdateRegion creates a new http.Handler for the update region operation
func NewUpdateRegion(ctx *middleware.Context, handler UpdateRegionHandler) *UpdateRegion {
	return &UpdateRegion{Context: ctx, Handler: handler}
}

/*
	UpdateRegion swagger:route PUT /region/{regionId} region updateRegion

Updates a region configuration.
*/
type UpdateRegion struct {
	Context *middleware.Context
	Handler UpdateRegionHandler
}

func (o *UpdateRegion) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUpdateRegionParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
