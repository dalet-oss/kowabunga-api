// Code generated by go-swagger; DO NOT EDIT.

package nfs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetAllNfsStoragesHandlerFunc turns a function with the right signature into a get all nfs storages handler
type GetAllNfsStoragesHandlerFunc func(GetAllNfsStoragesParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAllNfsStoragesHandlerFunc) Handle(params GetAllNfsStoragesParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetAllNfsStoragesHandler interface for that can handle valid get all nfs storages params
type GetAllNfsStoragesHandler interface {
	Handle(GetAllNfsStoragesParams, interface{}) middleware.Responder
}

// NewGetAllNfsStorages creates a new http.Handler for the get all nfs storages operation
func NewGetAllNfsStorages(ctx *middleware.Context, handler GetAllNfsStoragesHandler) *GetAllNfsStorages {
	return &GetAllNfsStorages{Context: ctx, Handler: handler}
}

/*
	GetAllNfsStorages swagger:route GET /nfs nfs getAllNfsStorages

Returns the IDs of registered NFS storages.
*/
type GetAllNfsStorages struct {
	Context *middleware.Context
	Handler GetAllNfsStoragesHandler
}

func (o *GetAllNfsStorages) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetAllNfsStoragesParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
