// Code generated by go-swagger; DO NOT EDIT.

package volume

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetVolumeHandlerFunc turns a function with the right signature into a get volume handler
type GetVolumeHandlerFunc func(GetVolumeParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetVolumeHandlerFunc) Handle(params GetVolumeParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetVolumeHandler interface for that can handle valid get volume params
type GetVolumeHandler interface {
	Handle(GetVolumeParams, interface{}) middleware.Responder
}

// NewGetVolume creates a new http.Handler for the get volume operation
func NewGetVolume(ctx *middleware.Context, handler GetVolumeHandler) *GetVolume {
	return &GetVolume{Context: ctx, Handler: handler}
}

/*
	GetVolume swagger:route GET /volume/{volumeId} volume getVolume

Returns a description of the storage volume.
*/
type GetVolume struct {
	Context *middleware.Context
	Handler GetVolumeHandler
}

func (o *GetVolume) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetVolumeParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
