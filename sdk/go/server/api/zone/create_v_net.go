// Code generated by go-swagger; DO NOT EDIT.

package zone

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateVNetHandlerFunc turns a function with the right signature into a create v net handler
type CreateVNetHandlerFunc func(CreateVNetParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateVNetHandlerFunc) Handle(params CreateVNetParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// CreateVNetHandler interface for that can handle valid create v net params
type CreateVNetHandler interface {
	Handle(CreateVNetParams, interface{}) middleware.Responder
}

// NewCreateVNet creates a new http.Handler for the create v net operation
func NewCreateVNet(ctx *middleware.Context, handler CreateVNetHandler) *CreateVNet {
	return &CreateVNet{Context: ctx, Handler: handler}
}

/*
	CreateVNet swagger:route POST /zone/{zoneId}/vnet zone vnet createVNet

Creates a new virtual network.
*/
type CreateVNet struct {
	Context *middleware.Context
	Handler CreateVNetHandler
}

func (o *CreateVNet) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateVNetParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
