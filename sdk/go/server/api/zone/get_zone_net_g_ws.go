// Code generated by go-swagger; DO NOT EDIT.

package zone

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetZoneNetGWsHandlerFunc turns a function with the right signature into a get zone net g ws handler
type GetZoneNetGWsHandlerFunc func(GetZoneNetGWsParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetZoneNetGWsHandlerFunc) Handle(params GetZoneNetGWsParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetZoneNetGWsHandler interface for that can handle valid get zone net g ws params
type GetZoneNetGWsHandler interface {
	Handle(GetZoneNetGWsParams, interface{}) middleware.Responder
}

// NewGetZoneNetGWs creates a new http.Handler for the get zone net g ws operation
func NewGetZoneNetGWs(ctx *middleware.Context, handler GetZoneNetGWsHandler) *GetZoneNetGWs {
	return &GetZoneNetGWs{Context: ctx, Handler: handler}
}

/*
	GetZoneNetGWs swagger:route GET /zone/{zoneId}/netgws zone netgw getZoneNetGWs

Returns the IDs of the hosts existing in the zone.
*/
type GetZoneNetGWs struct {
	Context *middleware.Context
	Handler GetZoneNetGWsHandler
}

func (o *GetZoneNetGWs) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetZoneNetGWsParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
