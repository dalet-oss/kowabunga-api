// Code generated by go-swagger; DO NOT EDIT.

package kce

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ShutdownKCEHandlerFunc turns a function with the right signature into a shutdown k c e handler
type ShutdownKCEHandlerFunc func(ShutdownKCEParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn ShutdownKCEHandlerFunc) Handle(params ShutdownKCEParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// ShutdownKCEHandler interface for that can handle valid shutdown k c e params
type ShutdownKCEHandler interface {
	Handle(ShutdownKCEParams, interface{}) middleware.Responder
}

// NewShutdownKCE creates a new http.Handler for the shutdown k c e operation
func NewShutdownKCE(ctx *middleware.Context, handler ShutdownKCEHandler) *ShutdownKCE {
	return &ShutdownKCE{Context: ctx, Handler: handler}
}

/*
	ShutdownKCE swagger:route POST /kce/{kceId}/shutdown kce shutdownKCE

Initiate a software shutdown of a KCE virtual machine.
*/
type ShutdownKCE struct {
	Context *middleware.Context
	Handler ShutdownKCEHandler
}

func (o *ShutdownKCE) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewShutdownKCEParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
