/*
 * Kowabunga API documentation
 *
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * API version: 0.20.0
 * Contact: csops@dalet.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ZoneAPIController binds http requests to an api service and writes the service results to the http response
type ZoneAPIController struct {
	service ZoneAPIServicer
	errorHandler ErrorHandler
}

// ZoneAPIOption for how the controller is set up.
type ZoneAPIOption func(*ZoneAPIController)

// WithZoneAPIErrorHandler inject ErrorHandler into controller
func WithZoneAPIErrorHandler(h ErrorHandler) ZoneAPIOption {
	return func(c *ZoneAPIController) {
		c.errorHandler = h
	}
}

// NewZoneAPIController creates a default api controller
func NewZoneAPIController(s ZoneAPIServicer, opts ...ZoneAPIOption) Router {
	controller := &ZoneAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ZoneAPIController
func (c *ZoneAPIController) Routes() Routes {
	return Routes{
		"CreateHost": Route{
			strings.ToUpper("Post"),
			"/api/v1/zone/{zoneId}/host",
			c.CreateHost,
		},
		"CreateNetGW": Route{
			strings.ToUpper("Post"),
			"/api/v1/zone/{zoneId}/netgw",
			c.CreateNetGW,
		},
		"CreateStorageNFS": Route{
			strings.ToUpper("Post"),
			"/api/v1/zone/{zoneId}/nfs",
			c.CreateStorageNFS,
		},
		"CreateStoragePool": Route{
			strings.ToUpper("Post"),
			"/api/v1/zone/{zoneId}/pool",
			c.CreateStoragePool,
		},
		"CreateVNet": Route{
			strings.ToUpper("Post"),
			"/api/v1/zone/{zoneId}/vnet",
			c.CreateVNet,
		},
		"DeleteZone": Route{
			strings.ToUpper("Delete"),
			"/api/v1/zone/{zoneId}",
			c.DeleteZone,
		},
		"ListZoneHosts": Route{
			strings.ToUpper("Get"),
			"/api/v1/zone/{zoneId}/hosts",
			c.ListZoneHosts,
		},
		"ListZoneNetGWs": Route{
			strings.ToUpper("Get"),
			"/api/v1/zone/{zoneId}/netgws",
			c.ListZoneNetGWs,
		},
		"ListZoneStorageNFSs": Route{
			strings.ToUpper("Get"),
			"/api/v1/zone/{zoneId}/nfs",
			c.ListZoneStorageNFSs,
		},
		"ListZoneStoragePools": Route{
			strings.ToUpper("Get"),
			"/api/v1/zone/{zoneId}/pools",
			c.ListZoneStoragePools,
		},
		"ListZoneVNets": Route{
			strings.ToUpper("Get"),
			"/api/v1/zone/{zoneId}/vnets",
			c.ListZoneVNets,
		},
		"ListZones": Route{
			strings.ToUpper("Get"),
			"/api/v1/zone",
			c.ListZones,
		},
		"ReadZone": Route{
			strings.ToUpper("Get"),
			"/api/v1/zone/{zoneId}",
			c.ReadZone,
		},
		"SetZoneDefaultStorageNFS": Route{
			strings.ToUpper("Patch"),
			"/api/v1/zone/{zoneId}/nfs/{nfsId}/default",
			c.SetZoneDefaultStorageNFS,
		},
		"SetZoneDefaultStoragePool": Route{
			strings.ToUpper("Patch"),
			"/api/v1/zone/{zoneId}/pool/{poolId}/default",
			c.SetZoneDefaultStoragePool,
		},
		"UpdateZone": Route{
			strings.ToUpper("Put"),
			"/api/v1/zone/{zoneId}",
			c.UpdateZone,
		},
	}
}

// CreateHost - 
func (c *ZoneAPIController) CreateHost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	hostParam := Host{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&hostParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertHostRequired(hostParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertHostConstraints(hostParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateHost(r.Context(), zoneIdParam, hostParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateNetGW - 
func (c *ZoneAPIController) CreateNetGW(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	netGwParam := NetGw{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&netGwParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertNetGwRequired(netGwParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertNetGwConstraints(netGwParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateNetGW(r.Context(), zoneIdParam, netGwParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateStorageNFS - 
func (c *ZoneAPIController) CreateStorageNFS(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	storageNfsParam := StorageNfs{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&storageNfsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertStorageNfsRequired(storageNfsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertStorageNfsConstraints(storageNfsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateStorageNFS(r.Context(), zoneIdParam, storageNfsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateStoragePool - 
func (c *ZoneAPIController) CreateStoragePool(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	storagePoolParam := StoragePool{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&storagePoolParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertStoragePoolRequired(storagePoolParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertStoragePoolConstraints(storagePoolParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateStoragePool(r.Context(), zoneIdParam, storagePoolParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateVNet - 
func (c *ZoneAPIController) CreateVNet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	vNetParam := VNet{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&vNetParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertVNetRequired(vNetParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertVNetConstraints(vNetParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateVNet(r.Context(), zoneIdParam, vNetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteZone - 
func (c *ZoneAPIController) DeleteZone(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	result, err := c.service.DeleteZone(r.Context(), zoneIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListZoneHosts - 
func (c *ZoneAPIController) ListZoneHosts(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	result, err := c.service.ListZoneHosts(r.Context(), zoneIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListZoneNetGWs - 
func (c *ZoneAPIController) ListZoneNetGWs(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	result, err := c.service.ListZoneNetGWs(r.Context(), zoneIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListZoneStorageNFSs - 
func (c *ZoneAPIController) ListZoneStorageNFSs(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	result, err := c.service.ListZoneStorageNFSs(r.Context(), zoneIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListZoneStoragePools - 
func (c *ZoneAPIController) ListZoneStoragePools(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	result, err := c.service.ListZoneStoragePools(r.Context(), zoneIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListZoneVNets - 
func (c *ZoneAPIController) ListZoneVNets(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	result, err := c.service.ListZoneVNets(r.Context(), zoneIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListZones - 
func (c *ZoneAPIController) ListZones(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListZones(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ReadZone - 
func (c *ZoneAPIController) ReadZone(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	result, err := c.service.ReadZone(r.Context(), zoneIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SetZoneDefaultStorageNFS - 
func (c *ZoneAPIController) SetZoneDefaultStorageNFS(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	nfsIdParam := params["nfsId"]
	if nfsIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"nfsId"}, nil)
		return
	}
	result, err := c.service.SetZoneDefaultStorageNFS(r.Context(), zoneIdParam, nfsIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SetZoneDefaultStoragePool - 
func (c *ZoneAPIController) SetZoneDefaultStoragePool(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	poolIdParam := params["poolId"]
	if poolIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"poolId"}, nil)
		return
	}
	result, err := c.service.SetZoneDefaultStoragePool(r.Context(), zoneIdParam, poolIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateZone - 
func (c *ZoneAPIController) UpdateZone(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	zoneParam := Zone{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&zoneParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertZoneRequired(zoneParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertZoneConstraints(zoneParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateZone(r.Context(), zoneIdParam, zoneParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
