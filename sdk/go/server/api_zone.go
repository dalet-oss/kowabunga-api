/*
 * Kowabunga
 *
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * API version: 0.10.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ZoneAPIController binds http requests to an api service and writes the service results to the http response
type ZoneAPIController struct {
	service ZoneAPIServicer
	errorHandler ErrorHandler
}

// ZoneAPIOption for how the controller is set up.
type ZoneAPIOption func(*ZoneAPIController)

// WithZoneAPIErrorHandler inject ErrorHandler into controller
func WithZoneAPIErrorHandler(h ErrorHandler) ZoneAPIOption {
	return func(c *ZoneAPIController) {
		c.errorHandler = h
	}
}

// NewZoneAPIController creates a default api controller
func NewZoneAPIController(s ZoneAPIServicer, opts ...ZoneAPIOption) Router {
	controller := &ZoneAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ZoneAPIController
func (c *ZoneAPIController) Routes() Routes {
	return Routes{
		"CreateHost": Route{
			strings.ToUpper("Post"),
			"/api/v1/zone/{zoneId}/host",
			c.CreateHost,
		},
		"CreateNetGW": Route{
			strings.ToUpper("Post"),
			"/api/v1/zone/{zoneId}/netgw",
			c.CreateNetGW,
		},
		"CreateNfsStorage": Route{
			strings.ToUpper("Post"),
			"/api/v1/zone/{zoneId}/nfs",
			c.CreateNfsStorage,
		},
		"CreatePool": Route{
			strings.ToUpper("Post"),
			"/api/v1/zone/{zoneId}/pool",
			c.CreatePool,
		},
		"CreateProjectZoneInstance": Route{
			strings.ToUpper("Post"),
			"/api/v1/project/{projectId}/zone/{zoneId}/instance",
			c.CreateProjectZoneInstance,
		},
		"CreateProjectZoneKce": Route{
			strings.ToUpper("Post"),
			"/api/v1/project/{projectId}/zone/{zoneId}/kce",
			c.CreateProjectZoneKce,
		},
		"CreateProjectZoneKfs": Route{
			strings.ToUpper("Post"),
			"/api/v1/project/{projectId}/zone/{zoneId}/kfs",
			c.CreateProjectZoneKfs,
		},
		"CreateProjectZoneKgw": Route{
			strings.ToUpper("Post"),
			"/api/v1/project/{projectId}/zone/{zoneId}/kgw",
			c.CreateProjectZoneKgw,
		},
		"CreateProjectZoneVolume": Route{
			strings.ToUpper("Post"),
			"/api/v1/project/{projectId}/zone/{zoneId}/volume",
			c.CreateProjectZoneVolume,
		},
		"CreateVNet": Route{
			strings.ToUpper("Post"),
			"/api/v1/zone/{zoneId}/vnet",
			c.CreateVNet,
		},
		"CreateZone": Route{
			strings.ToUpper("Post"),
			"/api/v1/region/{regionId}/zone",
			c.CreateZone,
		},
		"DeleteZone": Route{
			strings.ToUpper("Delete"),
			"/api/v1/zone/{zoneId}",
			c.DeleteZone,
		},
		"GetAllZones": Route{
			strings.ToUpper("Get"),
			"/api/v1/zone",
			c.GetAllZones,
		},
		"GetProjectZoneInstances": Route{
			strings.ToUpper("Get"),
			"/api/v1/project/{projectId}/zone/{zoneId}/instances",
			c.GetProjectZoneInstances,
		},
		"GetProjectZoneKCEs": Route{
			strings.ToUpper("Get"),
			"/api/v1/project/{projectId}/zone/{zoneId}/kces",
			c.GetProjectZoneKCEs,
		},
		"GetProjectZoneKGWs": Route{
			strings.ToUpper("Get"),
			"/api/v1/project/{projectId}/zone/{zoneId}/kgws",
			c.GetProjectZoneKGWs,
		},
		"GetProjectZoneKfs": Route{
			strings.ToUpper("Get"),
			"/api/v1/project/{projectId}/zone/{zoneId}/kfs",
			c.GetProjectZoneKfs,
		},
		"GetProjectZoneVolumes": Route{
			strings.ToUpper("Get"),
			"/api/v1/project/{projectId}/zone/{zoneId}/volumes",
			c.GetProjectZoneVolumes,
		},
		"GetRegionZones": Route{
			strings.ToUpper("Get"),
			"/api/v1/region/{regionId}/zones",
			c.GetRegionZones,
		},
		"GetZone": Route{
			strings.ToUpper("Get"),
			"/api/v1/zone/{zoneId}",
			c.GetZone,
		},
		"GetZoneHosts": Route{
			strings.ToUpper("Get"),
			"/api/v1/zone/{zoneId}/hosts",
			c.GetZoneHosts,
		},
		"GetZoneNetGWs": Route{
			strings.ToUpper("Get"),
			"/api/v1/zone/{zoneId}/netgws",
			c.GetZoneNetGWs,
		},
		"GetZoneNfsStorages": Route{
			strings.ToUpper("Get"),
			"/api/v1/zone/{zoneId}/nfs",
			c.GetZoneNfsStorages,
		},
		"GetZonePools": Route{
			strings.ToUpper("Get"),
			"/api/v1/zone/{zoneId}/pools",
			c.GetZonePools,
		},
		"GetZoneVNets": Route{
			strings.ToUpper("Get"),
			"/api/v1/zone/{zoneId}/vnets",
			c.GetZoneVNets,
		},
		"UpdateZone": Route{
			strings.ToUpper("Put"),
			"/api/v1/zone/{zoneId}",
			c.UpdateZone,
		},
		"UpdateZoneDefaultNfsStorage": Route{
			strings.ToUpper("Put"),
			"/api/v1/zone/{zoneId}/nfs/{nfsId}/default",
			c.UpdateZoneDefaultNfsStorage,
		},
		"UpdateZoneDefaultPool": Route{
			strings.ToUpper("Put"),
			"/api/v1/zone/{zoneId}/pool/{poolId}/default",
			c.UpdateZoneDefaultPool,
		},
	}
}

// CreateHost - 
func (c *ZoneAPIController) CreateHost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	bodyParam := Host{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertHostRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertHostConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateHost(r.Context(), zoneIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateNetGW - 
func (c *ZoneAPIController) CreateNetGW(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	bodyParam := NetGw{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertNetGwRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertNetGwConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateNetGW(r.Context(), zoneIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateNfsStorage - 
func (c *ZoneAPIController) CreateNfsStorage(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	bodyParam := StorageNfs{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertStorageNfsRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertStorageNfsConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateNfsStorage(r.Context(), zoneIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreatePool - 
func (c *ZoneAPIController) CreatePool(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	bodyParam := StoragePool{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertStoragePoolRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertStoragePoolConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var hostIdParam string
	if query.Has("hostId") {
		param := query.Get("hostId")

		hostIdParam = param
	} else {
	}
	result, err := c.service.CreatePool(r.Context(), zoneIdParam, bodyParam, hostIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateProjectZoneInstance - 
func (c *ZoneAPIController) CreateProjectZoneInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	bodyParam := Instance{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertInstanceRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertInstanceConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var notifyParam bool
	if query.Has("notify") {
		param, err := parseBoolParameter(
			query.Get("notify"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		notifyParam = param
	} else {
		var param bool = true
		notifyParam = param
	}
	result, err := c.service.CreateProjectZoneInstance(r.Context(), projectIdParam, zoneIdParam, bodyParam, notifyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateProjectZoneKce - 
func (c *ZoneAPIController) CreateProjectZoneKce(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	bodyParam := Kce{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertKceRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertKceConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var poolIdParam string
	if query.Has("poolId") {
		param := query.Get("poolId")

		poolIdParam = param
	} else {
	}
	var templateIdParam string
	if query.Has("templateId") {
		param := query.Get("templateId")

		templateIdParam = param
	} else {
	}
	var publicParam bool
	if query.Has("public") {
		param, err := parseBoolParameter(
			query.Get("public"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		publicParam = param
	} else {
		var param bool = false
		publicParam = param
	}
	var notifyParam bool
	if query.Has("notify") {
		param, err := parseBoolParameter(
			query.Get("notify"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		notifyParam = param
	} else {
		var param bool = true
		notifyParam = param
	}
	result, err := c.service.CreateProjectZoneKce(r.Context(), projectIdParam, zoneIdParam, bodyParam, poolIdParam, templateIdParam, publicParam, notifyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateProjectZoneKfs - 
func (c *ZoneAPIController) CreateProjectZoneKfs(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	bodyParam := Kfs{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertKfsRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertKfsConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var nfsIdParam string
	if query.Has("nfsId") {
		param := query.Get("nfsId")

		nfsIdParam = param
	} else {
	}
	var notifyParam bool
	if query.Has("notify") {
		param, err := parseBoolParameter(
			query.Get("notify"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		notifyParam = param
	} else {
		var param bool = true
		notifyParam = param
	}
	result, err := c.service.CreateProjectZoneKfs(r.Context(), projectIdParam, zoneIdParam, bodyParam, nfsIdParam, notifyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateProjectZoneKgw - 
func (c *ZoneAPIController) CreateProjectZoneKgw(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	bodyParam := Kgw{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertKgwRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertKgwConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateProjectZoneKgw(r.Context(), projectIdParam, zoneIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateProjectZoneVolume - 
func (c *ZoneAPIController) CreateProjectZoneVolume(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	bodyParam := Volume{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertVolumeRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertVolumeConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var poolIdParam string
	if query.Has("poolId") {
		param := query.Get("poolId")

		poolIdParam = param
	} else {
	}
	var templateIdParam string
	if query.Has("templateId") {
		param := query.Get("templateId")

		templateIdParam = param
	} else {
	}
	result, err := c.service.CreateProjectZoneVolume(r.Context(), projectIdParam, zoneIdParam, bodyParam, poolIdParam, templateIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateVNet - 
func (c *ZoneAPIController) CreateVNet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	bodyParam := VNet{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertVNetRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertVNetConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateVNet(r.Context(), zoneIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateZone - 
func (c *ZoneAPIController) CreateZone(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	regionIdParam := params["regionId"]
	if regionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"regionId"}, nil)
		return
	}
	bodyParam := Zone{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertZoneRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertZoneConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateZone(r.Context(), regionIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteZone - 
func (c *ZoneAPIController) DeleteZone(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	result, err := c.service.DeleteZone(r.Context(), zoneIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAllZones - 
func (c *ZoneAPIController) GetAllZones(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetAllZones(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetProjectZoneInstances - 
func (c *ZoneAPIController) GetProjectZoneInstances(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	result, err := c.service.GetProjectZoneInstances(r.Context(), projectIdParam, zoneIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetProjectZoneKCEs - 
func (c *ZoneAPIController) GetProjectZoneKCEs(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	result, err := c.service.GetProjectZoneKCEs(r.Context(), projectIdParam, zoneIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetProjectZoneKGWs - 
func (c *ZoneAPIController) GetProjectZoneKGWs(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	result, err := c.service.GetProjectZoneKGWs(r.Context(), projectIdParam, zoneIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetProjectZoneKfs - 
func (c *ZoneAPIController) GetProjectZoneKfs(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	result, err := c.service.GetProjectZoneKfs(r.Context(), projectIdParam, zoneIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetProjectZoneVolumes - 
func (c *ZoneAPIController) GetProjectZoneVolumes(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	result, err := c.service.GetProjectZoneVolumes(r.Context(), projectIdParam, zoneIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetRegionZones - 
func (c *ZoneAPIController) GetRegionZones(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	regionIdParam := params["regionId"]
	if regionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"regionId"}, nil)
		return
	}
	result, err := c.service.GetRegionZones(r.Context(), regionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetZone - 
func (c *ZoneAPIController) GetZone(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	result, err := c.service.GetZone(r.Context(), zoneIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetZoneHosts - 
func (c *ZoneAPIController) GetZoneHosts(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	result, err := c.service.GetZoneHosts(r.Context(), zoneIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetZoneNetGWs - 
func (c *ZoneAPIController) GetZoneNetGWs(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	result, err := c.service.GetZoneNetGWs(r.Context(), zoneIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetZoneNfsStorages - 
func (c *ZoneAPIController) GetZoneNfsStorages(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	result, err := c.service.GetZoneNfsStorages(r.Context(), zoneIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetZonePools - 
func (c *ZoneAPIController) GetZonePools(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	result, err := c.service.GetZonePools(r.Context(), zoneIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetZoneVNets - 
func (c *ZoneAPIController) GetZoneVNets(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	result, err := c.service.GetZoneVNets(r.Context(), zoneIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateZone - 
func (c *ZoneAPIController) UpdateZone(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	bodyParam := Zone{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertZoneRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertZoneConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateZone(r.Context(), zoneIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateZoneDefaultNfsStorage - 
func (c *ZoneAPIController) UpdateZoneDefaultNfsStorage(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	nfsIdParam := params["nfsId"]
	if nfsIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"nfsId"}, nil)
		return
	}
	result, err := c.service.UpdateZoneDefaultNfsStorage(r.Context(), zoneIdParam, nfsIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateZoneDefaultPool - 
func (c *ZoneAPIController) UpdateZoneDefaultPool(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	poolIdParam := params["poolId"]
	if poolIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"poolId"}, nil)
		return
	}
	result, err := c.service.UpdateZoneDefaultPool(r.Context(), zoneIdParam, poolIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
