/*
 * Kowabunga API documentation
 *
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * API version: 0.31.0
 * Contact: csops@dalet.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ZoneAPIController binds http requests to an api service and writes the service results to the http response
type ZoneAPIController struct {
	service ZoneAPIServicer
	errorHandler ErrorHandler
}

// ZoneAPIOption for how the controller is set up.
type ZoneAPIOption func(*ZoneAPIController)

// WithZoneAPIErrorHandler inject ErrorHandler into controller
func WithZoneAPIErrorHandler(h ErrorHandler) ZoneAPIOption {
	return func(c *ZoneAPIController) {
		c.errorHandler = h
	}
}

// NewZoneAPIController creates a default api controller
func NewZoneAPIController(s ZoneAPIServicer, opts ...ZoneAPIOption) Router {
	controller := &ZoneAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ZoneAPIController
func (c *ZoneAPIController) Routes() Routes {
	return Routes{
		"CreateHost": Route{
			strings.ToUpper("Post"),
			"/api/v1/zone/{zoneId}/host",
			c.CreateHost,
		},
		"DeleteZone": Route{
			strings.ToUpper("Delete"),
			"/api/v1/zone/{zoneId}",
			c.DeleteZone,
		},
		"ListZoneHosts": Route{
			strings.ToUpper("Get"),
			"/api/v1/zone/{zoneId}/hosts",
			c.ListZoneHosts,
		},
		"ListZones": Route{
			strings.ToUpper("Get"),
			"/api/v1/zone",
			c.ListZones,
		},
		"ReadZone": Route{
			strings.ToUpper("Get"),
			"/api/v1/zone/{zoneId}",
			c.ReadZone,
		},
		"UpdateZone": Route{
			strings.ToUpper("Put"),
			"/api/v1/zone/{zoneId}",
			c.UpdateZone,
		},
	}
}

// CreateHost - 
func (c *ZoneAPIController) CreateHost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	hostParam := Host{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&hostParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertHostRequired(hostParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertHostConstraints(hostParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateHost(r.Context(), zoneIdParam, hostParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteZone - 
func (c *ZoneAPIController) DeleteZone(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	result, err := c.service.DeleteZone(r.Context(), zoneIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListZoneHosts - 
func (c *ZoneAPIController) ListZoneHosts(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	result, err := c.service.ListZoneHosts(r.Context(), zoneIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListZones - 
func (c *ZoneAPIController) ListZones(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListZones(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ReadZone - 
func (c *ZoneAPIController) ReadZone(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	result, err := c.service.ReadZone(r.Context(), zoneIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateZone - 
func (c *ZoneAPIController) UpdateZone(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	zoneParam := Zone{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&zoneParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertZoneRequired(zoneParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertZoneConstraints(zoneParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateZone(r.Context(), zoneIdParam, zoneParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
