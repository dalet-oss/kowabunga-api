/*
 * Kowabunga
 *
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * API version: 0.10.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"context"
	"net/http"
)



// AdapterAPIRouter defines the required methods for binding the api requests to a responses for the AdapterAPI
// The AdapterAPIRouter implementation should parse necessary information from the http request,
// pass the data to a AdapterAPIServicer to perform the required actions, then write the service results to the http response.
type AdapterAPIRouter interface { 
	CreateAdapter(http.ResponseWriter, *http.Request)
	DeleteAdapter(http.ResponseWriter, *http.Request)
	GetAdapter(http.ResponseWriter, *http.Request)
	GetAllAdapters(http.ResponseWriter, *http.Request)
	GetSubnetAdapters(http.ResponseWriter, *http.Request)
	UpdateAdapter(http.ResponseWriter, *http.Request)
}
// HostAPIRouter defines the required methods for binding the api requests to a responses for the HostAPI
// The HostAPIRouter implementation should parse necessary information from the http request,
// pass the data to a HostAPIServicer to perform the required actions, then write the service results to the http response.
type HostAPIRouter interface { 
	CreateHost(http.ResponseWriter, *http.Request)
	DeleteHost(http.ResponseWriter, *http.Request)
	GetAllHosts(http.ResponseWriter, *http.Request)
	GetHost(http.ResponseWriter, *http.Request)
	GetHostCaps(http.ResponseWriter, *http.Request)
	GetHostInstances(http.ResponseWriter, *http.Request)
	GetZoneHosts(http.ResponseWriter, *http.Request)
	UpdateHost(http.ResponseWriter, *http.Request)
}
// InstanceAPIRouter defines the required methods for binding the api requests to a responses for the InstanceAPI
// The InstanceAPIRouter implementation should parse necessary information from the http request,
// pass the data to a InstanceAPIServicer to perform the required actions, then write the service results to the http response.
type InstanceAPIRouter interface { 
	CreateProjectZoneInstance(http.ResponseWriter, *http.Request)
	DeleteInstance(http.ResponseWriter, *http.Request)
	GetAllInstances(http.ResponseWriter, *http.Request)
	GetHostInstances(http.ResponseWriter, *http.Request)
	GetInstance(http.ResponseWriter, *http.Request)
	GetInstanceRemoteConnection(http.ResponseWriter, *http.Request)
	GetInstanceState(http.ResponseWriter, *http.Request)
	GetProjectZoneInstances(http.ResponseWriter, *http.Request)
	RebootInstance(http.ResponseWriter, *http.Request)
	ResetInstance(http.ResponseWriter, *http.Request)
	ResumeInstance(http.ResponseWriter, *http.Request)
	ShutdownInstance(http.ResponseWriter, *http.Request)
	StartInstance(http.ResponseWriter, *http.Request)
	StopInstance(http.ResponseWriter, *http.Request)
	SuspendInstance(http.ResponseWriter, *http.Request)
	UpdateInstance(http.ResponseWriter, *http.Request)
}
// KceAPIRouter defines the required methods for binding the api requests to a responses for the KceAPI
// The KceAPIRouter implementation should parse necessary information from the http request,
// pass the data to a KceAPIServicer to perform the required actions, then write the service results to the http response.
type KceAPIRouter interface { 
	CreateProjectZoneKce(http.ResponseWriter, *http.Request)
	DeleteKCE(http.ResponseWriter, *http.Request)
	GetAllKCEs(http.ResponseWriter, *http.Request)
	GetKCE(http.ResponseWriter, *http.Request)
	GetKCEState(http.ResponseWriter, *http.Request)
	GetProjectZoneKCEs(http.ResponseWriter, *http.Request)
	RebootKCE(http.ResponseWriter, *http.Request)
	ResetKCE(http.ResponseWriter, *http.Request)
	ResumeKCE(http.ResponseWriter, *http.Request)
	ShutdownKCE(http.ResponseWriter, *http.Request)
	StartKCE(http.ResponseWriter, *http.Request)
	StopKCE(http.ResponseWriter, *http.Request)
	SuspendKCE(http.ResponseWriter, *http.Request)
	UpdateKCE(http.ResponseWriter, *http.Request)
}
// KfsAPIRouter defines the required methods for binding the api requests to a responses for the KfsAPI
// The KfsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a KfsAPIServicer to perform the required actions, then write the service results to the http response.
type KfsAPIRouter interface { 
	CreateProjectZoneKfs(http.ResponseWriter, *http.Request)
	DeleteKFS(http.ResponseWriter, *http.Request)
	GetAllKFSs(http.ResponseWriter, *http.Request)
	GetKFS(http.ResponseWriter, *http.Request)
	GetNfsKfs(http.ResponseWriter, *http.Request)
	GetProjectZoneKfs(http.ResponseWriter, *http.Request)
	UpdateKFS(http.ResponseWriter, *http.Request)
}
// KgwAPIRouter defines the required methods for binding the api requests to a responses for the KgwAPI
// The KgwAPIRouter implementation should parse necessary information from the http request,
// pass the data to a KgwAPIServicer to perform the required actions, then write the service results to the http response.
type KgwAPIRouter interface { 
	CreateProjectZoneKgw(http.ResponseWriter, *http.Request)
	DeleteKGW(http.ResponseWriter, *http.Request)
	GetAllKgw(http.ResponseWriter, *http.Request)
	GetKgw(http.ResponseWriter, *http.Request)
	GetProjectZoneKGWs(http.ResponseWriter, *http.Request)
	UpdateKGW(http.ResponseWriter, *http.Request)
}
// NetgwAPIRouter defines the required methods for binding the api requests to a responses for the NetgwAPI
// The NetgwAPIRouter implementation should parse necessary information from the http request,
// pass the data to a NetgwAPIServicer to perform the required actions, then write the service results to the http response.
type NetgwAPIRouter interface { 
	CreateNetGW(http.ResponseWriter, *http.Request)
	DeleteNetGW(http.ResponseWriter, *http.Request)
	GetAllNetGWs(http.ResponseWriter, *http.Request)
	GetNetGW(http.ResponseWriter, *http.Request)
	GetZoneNetGWs(http.ResponseWriter, *http.Request)
	UpdateNetGW(http.ResponseWriter, *http.Request)
}
// NfsAPIRouter defines the required methods for binding the api requests to a responses for the NfsAPI
// The NfsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a NfsAPIServicer to perform the required actions, then write the service results to the http response.
type NfsAPIRouter interface { 
	CreateNfsStorage(http.ResponseWriter, *http.Request)
	DeleteNfsStorage(http.ResponseWriter, *http.Request)
	GetAllNfsStorages(http.ResponseWriter, *http.Request)
	GetNfsKfs(http.ResponseWriter, *http.Request)
	GetNfsStorage(http.ResponseWriter, *http.Request)
	GetZoneNfsStorages(http.ResponseWriter, *http.Request)
	UpdateNfsStorage(http.ResponseWriter, *http.Request)
	UpdateZoneDefaultNfsStorage(http.ResponseWriter, *http.Request)
}
// PoolAPIRouter defines the required methods for binding the api requests to a responses for the PoolAPI
// The PoolAPIRouter implementation should parse necessary information from the http request,
// pass the data to a PoolAPIServicer to perform the required actions, then write the service results to the http response.
type PoolAPIRouter interface { 
	CreatePool(http.ResponseWriter, *http.Request)
	CreateTemplate(http.ResponseWriter, *http.Request)
	DeletePool(http.ResponseWriter, *http.Request)
	GetAllPools(http.ResponseWriter, *http.Request)
	GetPool(http.ResponseWriter, *http.Request)
	GetPoolTemplates(http.ResponseWriter, *http.Request)
	GetPoolVolumes(http.ResponseWriter, *http.Request)
	GetZonePools(http.ResponseWriter, *http.Request)
	UpdatePool(http.ResponseWriter, *http.Request)
	UpdatePoolDefaultTemplate(http.ResponseWriter, *http.Request)
	UpdateZoneDefaultPool(http.ResponseWriter, *http.Request)
}
// ProjectAPIRouter defines the required methods for binding the api requests to a responses for the ProjectAPI
// The ProjectAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ProjectAPIServicer to perform the required actions, then write the service results to the http response.
type ProjectAPIRouter interface { 
	CreateProject(http.ResponseWriter, *http.Request)
	CreateProjectDnsRecord(http.ResponseWriter, *http.Request)
	CreateProjectZoneInstance(http.ResponseWriter, *http.Request)
	CreateProjectZoneKce(http.ResponseWriter, *http.Request)
	CreateProjectZoneKfs(http.ResponseWriter, *http.Request)
	CreateProjectZoneKgw(http.ResponseWriter, *http.Request)
	CreateProjectZoneVolume(http.ResponseWriter, *http.Request)
	DeleteProject(http.ResponseWriter, *http.Request)
	GetAllProjects(http.ResponseWriter, *http.Request)
	GetProject(http.ResponseWriter, *http.Request)
	GetProjectCost(http.ResponseWriter, *http.Request)
	GetProjectDnsRecords(http.ResponseWriter, *http.Request)
	GetProjectUsage(http.ResponseWriter, *http.Request)
	GetProjectZoneInstances(http.ResponseWriter, *http.Request)
	GetProjectZoneKCEs(http.ResponseWriter, *http.Request)
	GetProjectZoneKGWs(http.ResponseWriter, *http.Request)
	GetProjectZoneKfs(http.ResponseWriter, *http.Request)
	GetProjectZoneVolumes(http.ResponseWriter, *http.Request)
	UpdateProject(http.ResponseWriter, *http.Request)
}
// RecordAPIRouter defines the required methods for binding the api requests to a responses for the RecordAPI
// The RecordAPIRouter implementation should parse necessary information from the http request,
// pass the data to a RecordAPIServicer to perform the required actions, then write the service results to the http response.
type RecordAPIRouter interface { 
	CreateProjectDnsRecord(http.ResponseWriter, *http.Request)
	DeleteDnsRecord(http.ResponseWriter, *http.Request)
	GetDnsRecord(http.ResponseWriter, *http.Request)
	GetProjectDnsRecords(http.ResponseWriter, *http.Request)
	UpdateDnsRecord(http.ResponseWriter, *http.Request)
}
// RegionAPIRouter defines the required methods for binding the api requests to a responses for the RegionAPI
// The RegionAPIRouter implementation should parse necessary information from the http request,
// pass the data to a RegionAPIServicer to perform the required actions, then write the service results to the http response.
type RegionAPIRouter interface { 
	CreateRegion(http.ResponseWriter, *http.Request)
	CreateZone(http.ResponseWriter, *http.Request)
	DeleteRegion(http.ResponseWriter, *http.Request)
	GetAllRegions(http.ResponseWriter, *http.Request)
	GetRegion(http.ResponseWriter, *http.Request)
	GetRegionZones(http.ResponseWriter, *http.Request)
	UpdateRegion(http.ResponseWriter, *http.Request)
}
// SubnetAPIRouter defines the required methods for binding the api requests to a responses for the SubnetAPI
// The SubnetAPIRouter implementation should parse necessary information from the http request,
// pass the data to a SubnetAPIServicer to perform the required actions, then write the service results to the http response.
type SubnetAPIRouter interface { 
	CreateAdapter(http.ResponseWriter, *http.Request)
	CreateSubnet(http.ResponseWriter, *http.Request)
	DeleteSubnet(http.ResponseWriter, *http.Request)
	GetAllSubnets(http.ResponseWriter, *http.Request)
	GetSubnet(http.ResponseWriter, *http.Request)
	GetSubnetAdapters(http.ResponseWriter, *http.Request)
	GetVNetSubnets(http.ResponseWriter, *http.Request)
	UpdateSubnet(http.ResponseWriter, *http.Request)
	UpdateVNetDefaultSubnet(http.ResponseWriter, *http.Request)
}
// TemplateAPIRouter defines the required methods for binding the api requests to a responses for the TemplateAPI
// The TemplateAPIRouter implementation should parse necessary information from the http request,
// pass the data to a TemplateAPIServicer to perform the required actions, then write the service results to the http response.
type TemplateAPIRouter interface { 
	CreateTemplate(http.ResponseWriter, *http.Request)
	DeleteTemplate(http.ResponseWriter, *http.Request)
	GetAllTemplates(http.ResponseWriter, *http.Request)
	GetTemplate(http.ResponseWriter, *http.Request)
	UpdatePoolDefaultTemplate(http.ResponseWriter, *http.Request)
	UpdateTemplate(http.ResponseWriter, *http.Request)
}
// TemplatesAPIRouter defines the required methods for binding the api requests to a responses for the TemplatesAPI
// The TemplatesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a TemplatesAPIServicer to perform the required actions, then write the service results to the http response.
type TemplatesAPIRouter interface { 
	GetPoolTemplates(http.ResponseWriter, *http.Request)
}
// VnetAPIRouter defines the required methods for binding the api requests to a responses for the VnetAPI
// The VnetAPIRouter implementation should parse necessary information from the http request,
// pass the data to a VnetAPIServicer to perform the required actions, then write the service results to the http response.
type VnetAPIRouter interface { 
	CreateSubnet(http.ResponseWriter, *http.Request)
	CreateVNet(http.ResponseWriter, *http.Request)
	DeleteVNet(http.ResponseWriter, *http.Request)
	GetAllVNets(http.ResponseWriter, *http.Request)
	GetVNet(http.ResponseWriter, *http.Request)
	GetVNetSubnets(http.ResponseWriter, *http.Request)
	GetZoneVNets(http.ResponseWriter, *http.Request)
	UpdateVNet(http.ResponseWriter, *http.Request)
	UpdateVNetDefaultSubnet(http.ResponseWriter, *http.Request)
}
// VolumeAPIRouter defines the required methods for binding the api requests to a responses for the VolumeAPI
// The VolumeAPIRouter implementation should parse necessary information from the http request,
// pass the data to a VolumeAPIServicer to perform the required actions, then write the service results to the http response.
type VolumeAPIRouter interface { 
	CreateProjectZoneVolume(http.ResponseWriter, *http.Request)
	DeleteVolume(http.ResponseWriter, *http.Request)
	GetAllVolumes(http.ResponseWriter, *http.Request)
	GetPoolVolumes(http.ResponseWriter, *http.Request)
	GetProjectZoneVolumes(http.ResponseWriter, *http.Request)
	GetVolume(http.ResponseWriter, *http.Request)
	UpdateVolume(http.ResponseWriter, *http.Request)
}
// ZoneAPIRouter defines the required methods for binding the api requests to a responses for the ZoneAPI
// The ZoneAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ZoneAPIServicer to perform the required actions, then write the service results to the http response.
type ZoneAPIRouter interface { 
	CreateHost(http.ResponseWriter, *http.Request)
	CreateNetGW(http.ResponseWriter, *http.Request)
	CreateNfsStorage(http.ResponseWriter, *http.Request)
	CreatePool(http.ResponseWriter, *http.Request)
	CreateProjectZoneInstance(http.ResponseWriter, *http.Request)
	CreateProjectZoneKce(http.ResponseWriter, *http.Request)
	CreateProjectZoneKfs(http.ResponseWriter, *http.Request)
	CreateProjectZoneKgw(http.ResponseWriter, *http.Request)
	CreateProjectZoneVolume(http.ResponseWriter, *http.Request)
	CreateVNet(http.ResponseWriter, *http.Request)
	CreateZone(http.ResponseWriter, *http.Request)
	DeleteZone(http.ResponseWriter, *http.Request)
	GetAllZones(http.ResponseWriter, *http.Request)
	GetProjectZoneInstances(http.ResponseWriter, *http.Request)
	GetProjectZoneKCEs(http.ResponseWriter, *http.Request)
	GetProjectZoneKGWs(http.ResponseWriter, *http.Request)
	GetProjectZoneKfs(http.ResponseWriter, *http.Request)
	GetProjectZoneVolumes(http.ResponseWriter, *http.Request)
	GetRegionZones(http.ResponseWriter, *http.Request)
	GetZone(http.ResponseWriter, *http.Request)
	GetZoneHosts(http.ResponseWriter, *http.Request)
	GetZoneNetGWs(http.ResponseWriter, *http.Request)
	GetZoneNfsStorages(http.ResponseWriter, *http.Request)
	GetZonePools(http.ResponseWriter, *http.Request)
	GetZoneVNets(http.ResponseWriter, *http.Request)
	UpdateZone(http.ResponseWriter, *http.Request)
	UpdateZoneDefaultNfsStorage(http.ResponseWriter, *http.Request)
	UpdateZoneDefaultPool(http.ResponseWriter, *http.Request)
}


// AdapterAPIServicer defines the api actions for the AdapterAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type AdapterAPIServicer interface { 
	CreateAdapter(context.Context, string, Adapter, bool) (ImplResponse, error)
	DeleteAdapter(context.Context, string) (ImplResponse, error)
	GetAdapter(context.Context, string) (ImplResponse, error)
	GetAllAdapters(context.Context) (ImplResponse, error)
	GetSubnetAdapters(context.Context, string) (ImplResponse, error)
	UpdateAdapter(context.Context, string, Adapter) (ImplResponse, error)
}


// HostAPIServicer defines the api actions for the HostAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type HostAPIServicer interface { 
	CreateHost(context.Context, string, Host) (ImplResponse, error)
	DeleteHost(context.Context, string) (ImplResponse, error)
	GetAllHosts(context.Context) (ImplResponse, error)
	GetHost(context.Context, string) (ImplResponse, error)
	GetHostCaps(context.Context, string) (ImplResponse, error)
	GetHostInstances(context.Context, string) (ImplResponse, error)
	GetZoneHosts(context.Context, string) (ImplResponse, error)
	UpdateHost(context.Context, string, Host) (ImplResponse, error)
}


// InstanceAPIServicer defines the api actions for the InstanceAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type InstanceAPIServicer interface { 
	CreateProjectZoneInstance(context.Context, string, string, Instance, bool) (ImplResponse, error)
	DeleteInstance(context.Context, string) (ImplResponse, error)
	GetAllInstances(context.Context) (ImplResponse, error)
	GetHostInstances(context.Context, string) (ImplResponse, error)
	GetInstance(context.Context, string) (ImplResponse, error)
	GetInstanceRemoteConnection(context.Context, string) (ImplResponse, error)
	GetInstanceState(context.Context, string) (ImplResponse, error)
	GetProjectZoneInstances(context.Context, string, string) (ImplResponse, error)
	RebootInstance(context.Context, string) (ImplResponse, error)
	ResetInstance(context.Context, string) (ImplResponse, error)
	ResumeInstance(context.Context, string) (ImplResponse, error)
	ShutdownInstance(context.Context, string) (ImplResponse, error)
	StartInstance(context.Context, string) (ImplResponse, error)
	StopInstance(context.Context, string) (ImplResponse, error)
	SuspendInstance(context.Context, string) (ImplResponse, error)
	UpdateInstance(context.Context, string, Instance) (ImplResponse, error)
}


// KceAPIServicer defines the api actions for the KceAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type KceAPIServicer interface { 
	CreateProjectZoneKce(context.Context, string, string, Kce, string, string, bool, bool) (ImplResponse, error)
	DeleteKCE(context.Context, string) (ImplResponse, error)
	GetAllKCEs(context.Context) (ImplResponse, error)
	GetKCE(context.Context, string) (ImplResponse, error)
	GetKCEState(context.Context, string) (ImplResponse, error)
	GetProjectZoneKCEs(context.Context, string, string) (ImplResponse, error)
	RebootKCE(context.Context, string) (ImplResponse, error)
	ResetKCE(context.Context, string) (ImplResponse, error)
	ResumeKCE(context.Context, string) (ImplResponse, error)
	ShutdownKCE(context.Context, string) (ImplResponse, error)
	StartKCE(context.Context, string) (ImplResponse, error)
	StopKCE(context.Context, string) (ImplResponse, error)
	SuspendKCE(context.Context, string) (ImplResponse, error)
	UpdateKCE(context.Context, string, Kce) (ImplResponse, error)
}


// KfsAPIServicer defines the api actions for the KfsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type KfsAPIServicer interface { 
	CreateProjectZoneKfs(context.Context, string, string, Kfs, string, bool) (ImplResponse, error)
	DeleteKFS(context.Context, string) (ImplResponse, error)
	GetAllKFSs(context.Context) (ImplResponse, error)
	GetKFS(context.Context, string) (ImplResponse, error)
	GetNfsKfs(context.Context, string) (ImplResponse, error)
	GetProjectZoneKfs(context.Context, string, string) (ImplResponse, error)
	UpdateKFS(context.Context, string, Kfs) (ImplResponse, error)
}


// KgwAPIServicer defines the api actions for the KgwAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type KgwAPIServicer interface { 
	CreateProjectZoneKgw(context.Context, string, string, Kgw) (ImplResponse, error)
	DeleteKGW(context.Context, string) (ImplResponse, error)
	GetAllKgw(context.Context) (ImplResponse, error)
	GetKgw(context.Context, string) (ImplResponse, error)
	GetProjectZoneKGWs(context.Context, string, string) (ImplResponse, error)
	UpdateKGW(context.Context, string, Kgw) (ImplResponse, error)
}


// NetgwAPIServicer defines the api actions for the NetgwAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type NetgwAPIServicer interface { 
	CreateNetGW(context.Context, string, NetGw) (ImplResponse, error)
	DeleteNetGW(context.Context, string) (ImplResponse, error)
	GetAllNetGWs(context.Context) (ImplResponse, error)
	GetNetGW(context.Context, string) (ImplResponse, error)
	GetZoneNetGWs(context.Context, string) (ImplResponse, error)
	UpdateNetGW(context.Context, string, NetGw) (ImplResponse, error)
}


// NfsAPIServicer defines the api actions for the NfsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type NfsAPIServicer interface { 
	CreateNfsStorage(context.Context, string, StorageNfs) (ImplResponse, error)
	DeleteNfsStorage(context.Context, string) (ImplResponse, error)
	GetAllNfsStorages(context.Context) (ImplResponse, error)
	GetNfsKfs(context.Context, string) (ImplResponse, error)
	GetNfsStorage(context.Context, string) (ImplResponse, error)
	GetZoneNfsStorages(context.Context, string) (ImplResponse, error)
	UpdateNfsStorage(context.Context, string, StorageNfs) (ImplResponse, error)
	UpdateZoneDefaultNfsStorage(context.Context, string, string) (ImplResponse, error)
}


// PoolAPIServicer defines the api actions for the PoolAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type PoolAPIServicer interface { 
	CreatePool(context.Context, string, StoragePool, string) (ImplResponse, error)
	CreateTemplate(context.Context, string, Template) (ImplResponse, error)
	DeletePool(context.Context, string) (ImplResponse, error)
	GetAllPools(context.Context) (ImplResponse, error)
	GetPool(context.Context, string) (ImplResponse, error)
	GetPoolTemplates(context.Context, string) (ImplResponse, error)
	GetPoolVolumes(context.Context, string) (ImplResponse, error)
	GetZonePools(context.Context, string) (ImplResponse, error)
	UpdatePool(context.Context, string, StoragePool) (ImplResponse, error)
	UpdatePoolDefaultTemplate(context.Context, string, string) (ImplResponse, error)
	UpdateZoneDefaultPool(context.Context, string, string) (ImplResponse, error)
}


// ProjectAPIServicer defines the api actions for the ProjectAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ProjectAPIServicer interface { 
	CreateProject(context.Context, Project, int32, bool) (ImplResponse, error)
	CreateProjectDnsRecord(context.Context, string, DnsRecord) (ImplResponse, error)
	CreateProjectZoneInstance(context.Context, string, string, Instance, bool) (ImplResponse, error)
	CreateProjectZoneKce(context.Context, string, string, Kce, string, string, bool, bool) (ImplResponse, error)
	CreateProjectZoneKfs(context.Context, string, string, Kfs, string, bool) (ImplResponse, error)
	CreateProjectZoneKgw(context.Context, string, string, Kgw) (ImplResponse, error)
	CreateProjectZoneVolume(context.Context, string, string, Volume, string, string) (ImplResponse, error)
	DeleteProject(context.Context, string) (ImplResponse, error)
	GetAllProjects(context.Context) (ImplResponse, error)
	GetProject(context.Context, string) (ImplResponse, error)
	GetProjectCost(context.Context, string) (ImplResponse, error)
	GetProjectDnsRecords(context.Context, string) (ImplResponse, error)
	GetProjectUsage(context.Context, string) (ImplResponse, error)
	GetProjectZoneInstances(context.Context, string, string) (ImplResponse, error)
	GetProjectZoneKCEs(context.Context, string, string) (ImplResponse, error)
	GetProjectZoneKGWs(context.Context, string, string) (ImplResponse, error)
	GetProjectZoneKfs(context.Context, string, string) (ImplResponse, error)
	GetProjectZoneVolumes(context.Context, string, string) (ImplResponse, error)
	UpdateProject(context.Context, string, Project) (ImplResponse, error)
}


// RecordAPIServicer defines the api actions for the RecordAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type RecordAPIServicer interface { 
	CreateProjectDnsRecord(context.Context, string, DnsRecord) (ImplResponse, error)
	DeleteDnsRecord(context.Context, string) (ImplResponse, error)
	GetDnsRecord(context.Context, string) (ImplResponse, error)
	GetProjectDnsRecords(context.Context, string) (ImplResponse, error)
	UpdateDnsRecord(context.Context, string, DnsRecord) (ImplResponse, error)
}


// RegionAPIServicer defines the api actions for the RegionAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type RegionAPIServicer interface { 
	CreateRegion(context.Context, Region) (ImplResponse, error)
	CreateZone(context.Context, string, Zone) (ImplResponse, error)
	DeleteRegion(context.Context, string) (ImplResponse, error)
	GetAllRegions(context.Context) (ImplResponse, error)
	GetRegion(context.Context, string) (ImplResponse, error)
	GetRegionZones(context.Context, string) (ImplResponse, error)
	UpdateRegion(context.Context, string, Region) (ImplResponse, error)
}


// SubnetAPIServicer defines the api actions for the SubnetAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type SubnetAPIServicer interface { 
	CreateAdapter(context.Context, string, Adapter, bool) (ImplResponse, error)
	CreateSubnet(context.Context, string, Subnet) (ImplResponse, error)
	DeleteSubnet(context.Context, string) (ImplResponse, error)
	GetAllSubnets(context.Context) (ImplResponse, error)
	GetSubnet(context.Context, string) (ImplResponse, error)
	GetSubnetAdapters(context.Context, string) (ImplResponse, error)
	GetVNetSubnets(context.Context, string) (ImplResponse, error)
	UpdateSubnet(context.Context, string, Subnet) (ImplResponse, error)
	UpdateVNetDefaultSubnet(context.Context, string, string) (ImplResponse, error)
}


// TemplateAPIServicer defines the api actions for the TemplateAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type TemplateAPIServicer interface { 
	CreateTemplate(context.Context, string, Template) (ImplResponse, error)
	DeleteTemplate(context.Context, string) (ImplResponse, error)
	GetAllTemplates(context.Context) (ImplResponse, error)
	GetTemplate(context.Context, string) (ImplResponse, error)
	UpdatePoolDefaultTemplate(context.Context, string, string) (ImplResponse, error)
	UpdateTemplate(context.Context, string, Template) (ImplResponse, error)
}


// TemplatesAPIServicer defines the api actions for the TemplatesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type TemplatesAPIServicer interface { 
	GetPoolTemplates(context.Context, string) (ImplResponse, error)
}


// VnetAPIServicer defines the api actions for the VnetAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type VnetAPIServicer interface { 
	CreateSubnet(context.Context, string, Subnet) (ImplResponse, error)
	CreateVNet(context.Context, string, VNet) (ImplResponse, error)
	DeleteVNet(context.Context, string) (ImplResponse, error)
	GetAllVNets(context.Context) (ImplResponse, error)
	GetVNet(context.Context, string) (ImplResponse, error)
	GetVNetSubnets(context.Context, string) (ImplResponse, error)
	GetZoneVNets(context.Context, string) (ImplResponse, error)
	UpdateVNet(context.Context, string, VNet) (ImplResponse, error)
	UpdateVNetDefaultSubnet(context.Context, string, string) (ImplResponse, error)
}


// VolumeAPIServicer defines the api actions for the VolumeAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type VolumeAPIServicer interface { 
	CreateProjectZoneVolume(context.Context, string, string, Volume, string, string) (ImplResponse, error)
	DeleteVolume(context.Context, string) (ImplResponse, error)
	GetAllVolumes(context.Context) (ImplResponse, error)
	GetPoolVolumes(context.Context, string) (ImplResponse, error)
	GetProjectZoneVolumes(context.Context, string, string) (ImplResponse, error)
	GetVolume(context.Context, string) (ImplResponse, error)
	UpdateVolume(context.Context, string, Volume) (ImplResponse, error)
}


// ZoneAPIServicer defines the api actions for the ZoneAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ZoneAPIServicer interface { 
	CreateHost(context.Context, string, Host) (ImplResponse, error)
	CreateNetGW(context.Context, string, NetGw) (ImplResponse, error)
	CreateNfsStorage(context.Context, string, StorageNfs) (ImplResponse, error)
	CreatePool(context.Context, string, StoragePool, string) (ImplResponse, error)
	CreateProjectZoneInstance(context.Context, string, string, Instance, bool) (ImplResponse, error)
	CreateProjectZoneKce(context.Context, string, string, Kce, string, string, bool, bool) (ImplResponse, error)
	CreateProjectZoneKfs(context.Context, string, string, Kfs, string, bool) (ImplResponse, error)
	CreateProjectZoneKgw(context.Context, string, string, Kgw) (ImplResponse, error)
	CreateProjectZoneVolume(context.Context, string, string, Volume, string, string) (ImplResponse, error)
	CreateVNet(context.Context, string, VNet) (ImplResponse, error)
	CreateZone(context.Context, string, Zone) (ImplResponse, error)
	DeleteZone(context.Context, string) (ImplResponse, error)
	GetAllZones(context.Context) (ImplResponse, error)
	GetProjectZoneInstances(context.Context, string, string) (ImplResponse, error)
	GetProjectZoneKCEs(context.Context, string, string) (ImplResponse, error)
	GetProjectZoneKGWs(context.Context, string, string) (ImplResponse, error)
	GetProjectZoneKfs(context.Context, string, string) (ImplResponse, error)
	GetProjectZoneVolumes(context.Context, string, string) (ImplResponse, error)
	GetRegionZones(context.Context, string) (ImplResponse, error)
	GetZone(context.Context, string) (ImplResponse, error)
	GetZoneHosts(context.Context, string) (ImplResponse, error)
	GetZoneNetGWs(context.Context, string) (ImplResponse, error)
	GetZoneNfsStorages(context.Context, string) (ImplResponse, error)
	GetZonePools(context.Context, string) (ImplResponse, error)
	GetZoneVNets(context.Context, string) (ImplResponse, error)
	UpdateZone(context.Context, string, Zone) (ImplResponse, error)
	UpdateZoneDefaultNfsStorage(context.Context, string, string) (ImplResponse, error)
	UpdateZoneDefaultPool(context.Context, string, string) (ImplResponse, error)
}
