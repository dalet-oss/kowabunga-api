/*
 * Kowabunga
 *
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * API version: 0.10.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// SubnetAPIController binds http requests to an api service and writes the service results to the http response
type SubnetAPIController struct {
	service SubnetAPIServicer
	errorHandler ErrorHandler
}

// SubnetAPIOption for how the controller is set up.
type SubnetAPIOption func(*SubnetAPIController)

// WithSubnetAPIErrorHandler inject ErrorHandler into controller
func WithSubnetAPIErrorHandler(h ErrorHandler) SubnetAPIOption {
	return func(c *SubnetAPIController) {
		c.errorHandler = h
	}
}

// NewSubnetAPIController creates a default api controller
func NewSubnetAPIController(s SubnetAPIServicer, opts ...SubnetAPIOption) Router {
	controller := &SubnetAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the SubnetAPIController
func (c *SubnetAPIController) Routes() Routes {
	return Routes{
		"CreateAdapter": Route{
			strings.ToUpper("Post"),
			"/api/v1/subnet/{subnetId}/adapter",
			c.CreateAdapter,
		},
		"CreateSubnet": Route{
			strings.ToUpper("Post"),
			"/api/v1/vnet/{vnetId}/subnet",
			c.CreateSubnet,
		},
		"DeleteSubnet": Route{
			strings.ToUpper("Delete"),
			"/api/v1/subnet/{subnetId}",
			c.DeleteSubnet,
		},
		"GetAllSubnets": Route{
			strings.ToUpper("Get"),
			"/api/v1/subnet",
			c.GetAllSubnets,
		},
		"GetSubnet": Route{
			strings.ToUpper("Get"),
			"/api/v1/subnet/{subnetId}",
			c.GetSubnet,
		},
		"GetSubnetAdapters": Route{
			strings.ToUpper("Get"),
			"/api/v1/subnet/{subnetId}/adapters",
			c.GetSubnetAdapters,
		},
		"GetVNetSubnets": Route{
			strings.ToUpper("Get"),
			"/api/v1/vnet/{vnetId}/subnets",
			c.GetVNetSubnets,
		},
		"UpdateSubnet": Route{
			strings.ToUpper("Put"),
			"/api/v1/subnet/{subnetId}",
			c.UpdateSubnet,
		},
		"UpdateVNetDefaultSubnet": Route{
			strings.ToUpper("Put"),
			"/api/v1/vnet/{vnetId}/subnet/{subnetId}/default",
			c.UpdateVNetDefaultSubnet,
		},
	}
}

// CreateAdapter - 
func (c *SubnetAPIController) CreateAdapter(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	subnetIdParam := params["subnetId"]
	if subnetIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"subnetId"}, nil)
		return
	}
	bodyParam := Adapter{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAdapterRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAdapterConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var assignIPParam bool
	if query.Has("assignIP") {
		param, err := parseBoolParameter(
			query.Get("assignIP"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		assignIPParam = param
	} else {
		var param bool = false
		assignIPParam = param
	}
	result, err := c.service.CreateAdapter(r.Context(), subnetIdParam, bodyParam, assignIPParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateSubnet - 
func (c *SubnetAPIController) CreateSubnet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	vnetIdParam := params["vnetId"]
	if vnetIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"vnetId"}, nil)
		return
	}
	bodyParam := Subnet{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSubnetRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSubnetConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateSubnet(r.Context(), vnetIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteSubnet - 
func (c *SubnetAPIController) DeleteSubnet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	subnetIdParam := params["subnetId"]
	if subnetIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"subnetId"}, nil)
		return
	}
	result, err := c.service.DeleteSubnet(r.Context(), subnetIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAllSubnets - 
func (c *SubnetAPIController) GetAllSubnets(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetAllSubnets(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetSubnet - 
func (c *SubnetAPIController) GetSubnet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	subnetIdParam := params["subnetId"]
	if subnetIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"subnetId"}, nil)
		return
	}
	result, err := c.service.GetSubnet(r.Context(), subnetIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetSubnetAdapters - 
func (c *SubnetAPIController) GetSubnetAdapters(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	subnetIdParam := params["subnetId"]
	if subnetIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"subnetId"}, nil)
		return
	}
	result, err := c.service.GetSubnetAdapters(r.Context(), subnetIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetVNetSubnets - 
func (c *SubnetAPIController) GetVNetSubnets(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	vnetIdParam := params["vnetId"]
	if vnetIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"vnetId"}, nil)
		return
	}
	result, err := c.service.GetVNetSubnets(r.Context(), vnetIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateSubnet - 
func (c *SubnetAPIController) UpdateSubnet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	subnetIdParam := params["subnetId"]
	if subnetIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"subnetId"}, nil)
		return
	}
	bodyParam := Subnet{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSubnetRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSubnetConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateSubnet(r.Context(), subnetIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateVNetDefaultSubnet - 
func (c *SubnetAPIController) UpdateVNetDefaultSubnet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	vnetIdParam := params["vnetId"]
	if vnetIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"vnetId"}, nil)
		return
	}
	subnetIdParam := params["subnetId"]
	if subnetIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"subnetId"}, nil)
		return
	}
	result, err := c.service.UpdateVNetDefaultSubnet(r.Context(), vnetIdParam, subnetIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
