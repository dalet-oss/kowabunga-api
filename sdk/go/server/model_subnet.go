/*
 * Kowabunga
 *
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * API version: 0.10.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server




type Subnet struct {

	// The subnet ID (auto-generated).
	Id string `json:"id,omitempty"`

	// The subnet name.
	Name string `json:"name"`

	// The subnet description.
	Description string `json:"description,omitempty"`

	// The subnet CIDR (e.g. 192.168.0.0/24).
	Cidr string `json:"cidr"`

	// The subnet router/gateway IP address (e.g. 192.168.0.254).
	Gateway string `json:"gateway"`

	// The subnet DNS server IP address (gateway value if unspecified).
	Dns string `json:"dns,omitempty"`

	// The list of extra routes to be access through designated gateway (format is 10.0.0.0/8).
	ExtraRoutes []string `json:"extra_routes,omitempty"`

	// The subnet list of reserved IPv4 ranges (i.e. no IP address can be assigned from there).
	Reserved []IpRange `json:"reserved,omitempty"`
}

// AssertSubnetRequired checks if the required fields are not zero-ed
func AssertSubnetRequired(obj Subnet) error {
	elements := map[string]interface{}{
		"name": obj.Name,
		"cidr": obj.Cidr,
		"gateway": obj.Gateway,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.Reserved {
		if err := AssertIpRangeRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertSubnetConstraints checks if the values respects the defined constraints
func AssertSubnetConstraints(obj Subnet) error {
	return nil
}
