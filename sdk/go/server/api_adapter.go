/*
 * Kowabunga
 *
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * API version: 0.10.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// AdapterAPIController binds http requests to an api service and writes the service results to the http response
type AdapterAPIController struct {
	service AdapterAPIServicer
	errorHandler ErrorHandler
}

// AdapterAPIOption for how the controller is set up.
type AdapterAPIOption func(*AdapterAPIController)

// WithAdapterAPIErrorHandler inject ErrorHandler into controller
func WithAdapterAPIErrorHandler(h ErrorHandler) AdapterAPIOption {
	return func(c *AdapterAPIController) {
		c.errorHandler = h
	}
}

// NewAdapterAPIController creates a default api controller
func NewAdapterAPIController(s AdapterAPIServicer, opts ...AdapterAPIOption) Router {
	controller := &AdapterAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AdapterAPIController
func (c *AdapterAPIController) Routes() Routes {
	return Routes{
		"CreateAdapter": Route{
			strings.ToUpper("Post"),
			"/api/v1/subnet/{subnetId}/adapter",
			c.CreateAdapter,
		},
		"DeleteAdapter": Route{
			strings.ToUpper("Delete"),
			"/api/v1/adapter/{adapterId}",
			c.DeleteAdapter,
		},
		"GetAdapter": Route{
			strings.ToUpper("Get"),
			"/api/v1/adapter/{adapterId}",
			c.GetAdapter,
		},
		"GetAllAdapters": Route{
			strings.ToUpper("Get"),
			"/api/v1/adapter",
			c.GetAllAdapters,
		},
		"GetSubnetAdapters": Route{
			strings.ToUpper("Get"),
			"/api/v1/subnet/{subnetId}/adapters",
			c.GetSubnetAdapters,
		},
		"UpdateAdapter": Route{
			strings.ToUpper("Put"),
			"/api/v1/adapter/{adapterId}",
			c.UpdateAdapter,
		},
	}
}

// CreateAdapter - 
func (c *AdapterAPIController) CreateAdapter(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	subnetIdParam := params["subnetId"]
	if subnetIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"subnetId"}, nil)
		return
	}
	bodyParam := Adapter{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAdapterRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAdapterConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var assignIPParam bool
	if query.Has("assignIP") {
		param, err := parseBoolParameter(
			query.Get("assignIP"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		assignIPParam = param
	} else {
		var param bool = false
		assignIPParam = param
	}
	result, err := c.service.CreateAdapter(r.Context(), subnetIdParam, bodyParam, assignIPParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteAdapter - 
func (c *AdapterAPIController) DeleteAdapter(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adapterIdParam := params["adapterId"]
	if adapterIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"adapterId"}, nil)
		return
	}
	result, err := c.service.DeleteAdapter(r.Context(), adapterIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAdapter - 
func (c *AdapterAPIController) GetAdapter(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adapterIdParam := params["adapterId"]
	if adapterIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"adapterId"}, nil)
		return
	}
	result, err := c.service.GetAdapter(r.Context(), adapterIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAllAdapters - 
func (c *AdapterAPIController) GetAllAdapters(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetAllAdapters(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetSubnetAdapters - 
func (c *AdapterAPIController) GetSubnetAdapters(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	subnetIdParam := params["subnetId"]
	if subnetIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"subnetId"}, nil)
		return
	}
	result, err := c.service.GetSubnetAdapters(r.Context(), subnetIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateAdapter - 
func (c *AdapterAPIController) UpdateAdapter(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	adapterIdParam := params["adapterId"]
	if adapterIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"adapterId"}, nil)
		return
	}
	bodyParam := Adapter{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAdapterRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAdapterConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateAdapter(r.Context(), adapterIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
