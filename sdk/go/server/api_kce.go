/*
 * Kowabunga API documentation
 *
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * API version: 0.36.0
 * Contact: csops@dalet.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// KceAPIController binds http requests to an api service and writes the service results to the http response
type KceAPIController struct {
	service KceAPIServicer
	errorHandler ErrorHandler
}

// KceAPIOption for how the controller is set up.
type KceAPIOption func(*KceAPIController)

// WithKceAPIErrorHandler inject ErrorHandler into controller
func WithKceAPIErrorHandler(h ErrorHandler) KceAPIOption {
	return func(c *KceAPIController) {
		c.errorHandler = h
	}
}

// NewKceAPIController creates a default api controller
func NewKceAPIController(s KceAPIServicer, opts ...KceAPIOption) Router {
	controller := &KceAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the KceAPIController
func (c *KceAPIController) Routes() Routes {
	return Routes{
		"DeleteKCE": Route{
			strings.ToUpper("Delete"),
			"/api/v1/kce/{kceId}",
			c.DeleteKCE,
		},
		"ListKCEs": Route{
			strings.ToUpper("Get"),
			"/api/v1/kce",
			c.ListKCEs,
		},
		"ReadKCE": Route{
			strings.ToUpper("Get"),
			"/api/v1/kce/{kceId}",
			c.ReadKCE,
		},
		"ReadKCEState": Route{
			strings.ToUpper("Get"),
			"/api/v1/kce/{kceId}/state",
			c.ReadKCEState,
		},
		"RebootKCE": Route{
			strings.ToUpper("Patch"),
			"/api/v1/kce/{kceId}/reboot",
			c.RebootKCE,
		},
		"ResetKCE": Route{
			strings.ToUpper("Patch"),
			"/api/v1/kce/{kceId}/reset",
			c.ResetKCE,
		},
		"ResumeKCE": Route{
			strings.ToUpper("Patch"),
			"/api/v1/kce/{kceId}/resume",
			c.ResumeKCE,
		},
		"ShutdownKCE": Route{
			strings.ToUpper("Patch"),
			"/api/v1/kce/{kceId}/shutdown",
			c.ShutdownKCE,
		},
		"StartKCE": Route{
			strings.ToUpper("Patch"),
			"/api/v1/kce/{kceId}/start",
			c.StartKCE,
		},
		"StopKCE": Route{
			strings.ToUpper("Patch"),
			"/api/v1/kce/{kceId}/stop",
			c.StopKCE,
		},
		"SuspendKCE": Route{
			strings.ToUpper("Patch"),
			"/api/v1/kce/{kceId}/suspend",
			c.SuspendKCE,
		},
		"UpdateKCE": Route{
			strings.ToUpper("Put"),
			"/api/v1/kce/{kceId}",
			c.UpdateKCE,
		},
	}
}

// DeleteKCE - 
func (c *KceAPIController) DeleteKCE(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kceIdParam := params["kceId"]
	if kceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"kceId"}, nil)
		return
	}
	result, err := c.service.DeleteKCE(r.Context(), kceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListKCEs - 
func (c *KceAPIController) ListKCEs(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListKCEs(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ReadKCE - 
func (c *KceAPIController) ReadKCE(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kceIdParam := params["kceId"]
	if kceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"kceId"}, nil)
		return
	}
	result, err := c.service.ReadKCE(r.Context(), kceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ReadKCEState - 
func (c *KceAPIController) ReadKCEState(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kceIdParam := params["kceId"]
	if kceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"kceId"}, nil)
		return
	}
	result, err := c.service.ReadKCEState(r.Context(), kceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RebootKCE - 
func (c *KceAPIController) RebootKCE(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kceIdParam := params["kceId"]
	if kceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"kceId"}, nil)
		return
	}
	result, err := c.service.RebootKCE(r.Context(), kceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ResetKCE - 
func (c *KceAPIController) ResetKCE(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kceIdParam := params["kceId"]
	if kceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"kceId"}, nil)
		return
	}
	result, err := c.service.ResetKCE(r.Context(), kceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ResumeKCE - 
func (c *KceAPIController) ResumeKCE(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kceIdParam := params["kceId"]
	if kceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"kceId"}, nil)
		return
	}
	result, err := c.service.ResumeKCE(r.Context(), kceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ShutdownKCE - 
func (c *KceAPIController) ShutdownKCE(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kceIdParam := params["kceId"]
	if kceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"kceId"}, nil)
		return
	}
	result, err := c.service.ShutdownKCE(r.Context(), kceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// StartKCE - 
func (c *KceAPIController) StartKCE(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kceIdParam := params["kceId"]
	if kceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"kceId"}, nil)
		return
	}
	result, err := c.service.StartKCE(r.Context(), kceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// StopKCE - 
func (c *KceAPIController) StopKCE(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kceIdParam := params["kceId"]
	if kceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"kceId"}, nil)
		return
	}
	result, err := c.service.StopKCE(r.Context(), kceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SuspendKCE - 
func (c *KceAPIController) SuspendKCE(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kceIdParam := params["kceId"]
	if kceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"kceId"}, nil)
		return
	}
	result, err := c.service.SuspendKCE(r.Context(), kceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateKCE - 
func (c *KceAPIController) UpdateKCE(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kceIdParam := params["kceId"]
	if kceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"kceId"}, nil)
		return
	}
	kceParam := Kce{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&kceParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertKceRequired(kceParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertKceConstraints(kceParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateKCE(r.Context(), kceIdParam, kceParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
