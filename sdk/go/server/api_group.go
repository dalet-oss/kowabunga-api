/*
 * Kowabunga API documentation
 *
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * API version: 0.42.0
 * Contact: csops@dalet.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// GroupAPIController binds http requests to an api service and writes the service results to the http response
type GroupAPIController struct {
	service GroupAPIServicer
	errorHandler ErrorHandler
}

// GroupAPIOption for how the controller is set up.
type GroupAPIOption func(*GroupAPIController)

// WithGroupAPIErrorHandler inject ErrorHandler into controller
func WithGroupAPIErrorHandler(h ErrorHandler) GroupAPIOption {
	return func(c *GroupAPIController) {
		c.errorHandler = h
	}
}

// NewGroupAPIController creates a default api controller
func NewGroupAPIController(s GroupAPIServicer, opts ...GroupAPIOption) Router {
	controller := &GroupAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the GroupAPIController
func (c *GroupAPIController) Routes() Routes {
	return Routes{
		"CreateGroup": Route{
			strings.ToUpper("Post"),
			"/api/v1/group",
			c.CreateGroup,
		},
		"DeleteGroup": Route{
			strings.ToUpper("Delete"),
			"/api/v1/group/{groupId}",
			c.DeleteGroup,
		},
		"ListGroups": Route{
			strings.ToUpper("Get"),
			"/api/v1/group",
			c.ListGroups,
		},
		"ReadGroup": Route{
			strings.ToUpper("Get"),
			"/api/v1/group/{groupId}",
			c.ReadGroup,
		},
		"UpdateGroup": Route{
			strings.ToUpper("Put"),
			"/api/v1/group/{groupId}",
			c.UpdateGroup,
		},
	}
}

// CreateGroup - 
func (c *GroupAPIController) CreateGroup(w http.ResponseWriter, r *http.Request) {
	groupParam := Group{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&groupParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGroupRequired(groupParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGroupConstraints(groupParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateGroup(r.Context(), groupParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteGroup - 
func (c *GroupAPIController) DeleteGroup(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	groupIdParam := params["groupId"]
	if groupIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"groupId"}, nil)
		return
	}
	result, err := c.service.DeleteGroup(r.Context(), groupIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListGroups - 
func (c *GroupAPIController) ListGroups(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListGroups(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ReadGroup - 
func (c *GroupAPIController) ReadGroup(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	groupIdParam := params["groupId"]
	if groupIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"groupId"}, nil)
		return
	}
	result, err := c.service.ReadGroup(r.Context(), groupIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateGroup - 
func (c *GroupAPIController) UpdateGroup(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	groupIdParam := params["groupId"]
	if groupIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"groupId"}, nil)
		return
	}
	groupParam := Group{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&groupParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGroupRequired(groupParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGroupConstraints(groupParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateGroup(r.Context(), groupIdParam, groupParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
