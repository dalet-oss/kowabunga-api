/*
 * Kowabunga API documentation
 *
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * API version: 0.40.0
 * Contact: csops@dalet.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server




// KgwVpcPeering - A KGW internal VPC subnet peering.
type KgwVpcPeering struct {

	// Kowabunga Subnet ID to be peered with (subnet local IP addresses will be automatically assigned to KGW instances)..
	Subnet string `json:"subnet"`

	// The default VPC traffic forwarding policy.
	Policy string `json:"policy,omitempty"`

	// The firewall list of forwarding ingress rules from VPC peered subnet. ICMP traffic is always accepted. The specified ruleset will be explicitly accepted if drop is the default policy (useless otherwise).
	Ingress []KgwVpcForwardRule `json:"ingress,omitempty"`

	// The firewall list of forwarding egress rules to VPC peered subnet. ICMP traffic is always accepted. The specified ruleset will be explicitly accepted if drop is the default policy (useless otherwise).
	Egress []KgwVpcForwardRule `json:"egress,omitempty"`

	// The per-zone auto-assigned private IPs in peered subnet (read-only).
	Netip []KgwVpcNetIpZone `json:"netip,omitempty"`
}

// AssertKgwVpcPeeringRequired checks if the required fields are not zero-ed
func AssertKgwVpcPeeringRequired(obj KgwVpcPeering) error {
	elements := map[string]interface{}{
		"subnet": obj.Subnet,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.Ingress {
		if err := AssertKgwVpcForwardRuleRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Egress {
		if err := AssertKgwVpcForwardRuleRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Netip {
		if err := AssertKgwVpcNetIpZoneRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertKgwVpcPeeringConstraints checks if the values respects the defined constraints
func AssertKgwVpcPeeringConstraints(obj KgwVpcPeering) error {
	return nil
}
