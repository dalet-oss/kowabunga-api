/*
 * Kowabunga API documentation
 *
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * API version: 0.36.0
 * Contact: csops@dalet.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// KfsAPIController binds http requests to an api service and writes the service results to the http response
type KfsAPIController struct {
	service KfsAPIServicer
	errorHandler ErrorHandler
}

// KfsAPIOption for how the controller is set up.
type KfsAPIOption func(*KfsAPIController)

// WithKfsAPIErrorHandler inject ErrorHandler into controller
func WithKfsAPIErrorHandler(h ErrorHandler) KfsAPIOption {
	return func(c *KfsAPIController) {
		c.errorHandler = h
	}
}

// NewKfsAPIController creates a default api controller
func NewKfsAPIController(s KfsAPIServicer, opts ...KfsAPIOption) Router {
	controller := &KfsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the KfsAPIController
func (c *KfsAPIController) Routes() Routes {
	return Routes{
		"DeleteKFS": Route{
			strings.ToUpper("Delete"),
			"/api/v1/kfs/{kfsId}",
			c.DeleteKFS,
		},
		"ListKFSs": Route{
			strings.ToUpper("Get"),
			"/api/v1/kfs",
			c.ListKFSs,
		},
		"ReadKFS": Route{
			strings.ToUpper("Get"),
			"/api/v1/kfs/{kfsId}",
			c.ReadKFS,
		},
		"UpdateKFS": Route{
			strings.ToUpper("Put"),
			"/api/v1/kfs/{kfsId}",
			c.UpdateKFS,
		},
	}
}

// DeleteKFS - 
func (c *KfsAPIController) DeleteKFS(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kfsIdParam := params["kfsId"]
	if kfsIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"kfsId"}, nil)
		return
	}
	result, err := c.service.DeleteKFS(r.Context(), kfsIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListKFSs - 
func (c *KfsAPIController) ListKFSs(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListKFSs(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ReadKFS - 
func (c *KfsAPIController) ReadKFS(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kfsIdParam := params["kfsId"]
	if kfsIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"kfsId"}, nil)
		return
	}
	result, err := c.service.ReadKFS(r.Context(), kfsIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateKFS - 
func (c *KfsAPIController) UpdateKFS(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kfsIdParam := params["kfsId"]
	if kfsIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"kfsId"}, nil)
		return
	}
	kfsParam := Kfs{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&kfsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertKfsRequired(kfsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertKfsConstraints(kfsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateKFS(r.Context(), kfsIdParam, kfsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
