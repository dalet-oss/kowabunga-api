/*
 * Kowabunga API documentation
 *
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * API version: 0.10.0
 * Contact: csops@dalet.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// RegionAPIController binds http requests to an api service and writes the service results to the http response
type RegionAPIController struct {
	service RegionAPIServicer
	errorHandler ErrorHandler
}

// RegionAPIOption for how the controller is set up.
type RegionAPIOption func(*RegionAPIController)

// WithRegionAPIErrorHandler inject ErrorHandler into controller
func WithRegionAPIErrorHandler(h ErrorHandler) RegionAPIOption {
	return func(c *RegionAPIController) {
		c.errorHandler = h
	}
}

// NewRegionAPIController creates a default api controller
func NewRegionAPIController(s RegionAPIServicer, opts ...RegionAPIOption) Router {
	controller := &RegionAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the RegionAPIController
func (c *RegionAPIController) Routes() Routes {
	return Routes{
		"CreateRegion": Route{
			strings.ToUpper("Post"),
			"/api/v1/region",
			c.CreateRegion,
		},
		"CreateZone": Route{
			strings.ToUpper("Post"),
			"/api/v1/region/{regionId}/zone",
			c.CreateZone,
		},
		"DeleteRegion": Route{
			strings.ToUpper("Delete"),
			"/api/v1/region/{regionId}",
			c.DeleteRegion,
		},
		"GetAllRegions": Route{
			strings.ToUpper("Get"),
			"/api/v1/region",
			c.GetAllRegions,
		},
		"GetRegion": Route{
			strings.ToUpper("Get"),
			"/api/v1/region/{regionId}",
			c.GetRegion,
		},
		"GetRegionZones": Route{
			strings.ToUpper("Get"),
			"/api/v1/region/{regionId}/zones",
			c.GetRegionZones,
		},
		"UpdateRegion": Route{
			strings.ToUpper("Put"),
			"/api/v1/region/{regionId}",
			c.UpdateRegion,
		},
	}
}

// CreateRegion - 
func (c *RegionAPIController) CreateRegion(w http.ResponseWriter, r *http.Request) {
	regionParam := Region{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&regionParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRegionRequired(regionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRegionConstraints(regionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateRegion(r.Context(), regionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateZone - 
func (c *RegionAPIController) CreateZone(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	regionIdParam := params["regionId"]
	if regionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"regionId"}, nil)
		return
	}
	zoneParam := Zone{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&zoneParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertZoneRequired(zoneParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertZoneConstraints(zoneParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateZone(r.Context(), regionIdParam, zoneParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteRegion - 
func (c *RegionAPIController) DeleteRegion(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	regionIdParam := params["regionId"]
	if regionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"regionId"}, nil)
		return
	}
	result, err := c.service.DeleteRegion(r.Context(), regionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAllRegions - 
func (c *RegionAPIController) GetAllRegions(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetAllRegions(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetRegion - 
func (c *RegionAPIController) GetRegion(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	regionIdParam := params["regionId"]
	if regionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"regionId"}, nil)
		return
	}
	result, err := c.service.GetRegion(r.Context(), regionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetRegionZones - 
func (c *RegionAPIController) GetRegionZones(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	regionIdParam := params["regionId"]
	if regionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"regionId"}, nil)
		return
	}
	result, err := c.service.GetRegionZones(r.Context(), regionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateRegion - 
func (c *RegionAPIController) UpdateRegion(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	regionIdParam := params["regionId"]
	if regionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"regionId"}, nil)
		return
	}
	regionParam := Region{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&regionParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRegionRequired(regionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRegionConstraints(regionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateRegion(r.Context(), regionIdParam, regionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
