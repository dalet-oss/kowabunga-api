/*
 * Kowabunga API documentation
 *
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * API version: 0.32.0
 * Contact: csops@dalet.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// NetgwAPIController binds http requests to an api service and writes the service results to the http response
type NetgwAPIController struct {
	service NetgwAPIServicer
	errorHandler ErrorHandler
}

// NetgwAPIOption for how the controller is set up.
type NetgwAPIOption func(*NetgwAPIController)

// WithNetgwAPIErrorHandler inject ErrorHandler into controller
func WithNetgwAPIErrorHandler(h ErrorHandler) NetgwAPIOption {
	return func(c *NetgwAPIController) {
		c.errorHandler = h
	}
}

// NewNetgwAPIController creates a default api controller
func NewNetgwAPIController(s NetgwAPIServicer, opts ...NetgwAPIOption) Router {
	controller := &NetgwAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the NetgwAPIController
func (c *NetgwAPIController) Routes() Routes {
	return Routes{
		"DeleteNetGW": Route{
			strings.ToUpper("Delete"),
			"/api/v1/netgw/{netgwId}",
			c.DeleteNetGW,
		},
		"ListNetGWs": Route{
			strings.ToUpper("Get"),
			"/api/v1/netgw",
			c.ListNetGWs,
		},
		"ReadNetGW": Route{
			strings.ToUpper("Get"),
			"/api/v1/netgw/{netgwId}",
			c.ReadNetGW,
		},
		"UpdateNetGW": Route{
			strings.ToUpper("Put"),
			"/api/v1/netgw/{netgwId}",
			c.UpdateNetGW,
		},
	}
}

// DeleteNetGW - 
func (c *NetgwAPIController) DeleteNetGW(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	netgwIdParam := params["netgwId"]
	if netgwIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"netgwId"}, nil)
		return
	}
	result, err := c.service.DeleteNetGW(r.Context(), netgwIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListNetGWs - 
func (c *NetgwAPIController) ListNetGWs(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListNetGWs(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ReadNetGW - 
func (c *NetgwAPIController) ReadNetGW(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	netgwIdParam := params["netgwId"]
	if netgwIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"netgwId"}, nil)
		return
	}
	result, err := c.service.ReadNetGW(r.Context(), netgwIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateNetGW - 
func (c *NetgwAPIController) UpdateNetGW(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	netgwIdParam := params["netgwId"]
	if netgwIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"netgwId"}, nil)
		return
	}
	netGwParam := NetGw{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&netGwParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertNetGwRequired(netGwParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertNetGwConstraints(netGwParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateNetGW(r.Context(), netgwIdParam, netGwParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
