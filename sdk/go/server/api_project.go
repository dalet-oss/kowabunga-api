/*
 * Kowabunga
 *
 * Kvm Orchestrator With A BUNch of Goods Added
 *
 * API version: 0.10.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ProjectAPIController binds http requests to an api service and writes the service results to the http response
type ProjectAPIController struct {
	service ProjectAPIServicer
	errorHandler ErrorHandler
}

// ProjectAPIOption for how the controller is set up.
type ProjectAPIOption func(*ProjectAPIController)

// WithProjectAPIErrorHandler inject ErrorHandler into controller
func WithProjectAPIErrorHandler(h ErrorHandler) ProjectAPIOption {
	return func(c *ProjectAPIController) {
		c.errorHandler = h
	}
}

// NewProjectAPIController creates a default api controller
func NewProjectAPIController(s ProjectAPIServicer, opts ...ProjectAPIOption) Router {
	controller := &ProjectAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ProjectAPIController
func (c *ProjectAPIController) Routes() Routes {
	return Routes{
		"CreateProject": Route{
			strings.ToUpper("Post"),
			"/api/v1/project",
			c.CreateProject,
		},
		"CreateProjectDnsRecord": Route{
			strings.ToUpper("Post"),
			"/api/v1/project/{projectId}/record",
			c.CreateProjectDnsRecord,
		},
		"CreateProjectZoneInstance": Route{
			strings.ToUpper("Post"),
			"/api/v1/project/{projectId}/zone/{zoneId}/instance",
			c.CreateProjectZoneInstance,
		},
		"CreateProjectZoneKce": Route{
			strings.ToUpper("Post"),
			"/api/v1/project/{projectId}/zone/{zoneId}/kce",
			c.CreateProjectZoneKce,
		},
		"CreateProjectZoneKfs": Route{
			strings.ToUpper("Post"),
			"/api/v1/project/{projectId}/zone/{zoneId}/kfs",
			c.CreateProjectZoneKfs,
		},
		"CreateProjectZoneKgw": Route{
			strings.ToUpper("Post"),
			"/api/v1/project/{projectId}/zone/{zoneId}/kgw",
			c.CreateProjectZoneKgw,
		},
		"CreateProjectZoneVolume": Route{
			strings.ToUpper("Post"),
			"/api/v1/project/{projectId}/zone/{zoneId}/volume",
			c.CreateProjectZoneVolume,
		},
		"DeleteProject": Route{
			strings.ToUpper("Delete"),
			"/api/v1/project/{projectId}",
			c.DeleteProject,
		},
		"GetAllProjects": Route{
			strings.ToUpper("Get"),
			"/api/v1/project",
			c.GetAllProjects,
		},
		"GetProject": Route{
			strings.ToUpper("Get"),
			"/api/v1/project/{projectId}",
			c.GetProject,
		},
		"GetProjectCost": Route{
			strings.ToUpper("Get"),
			"/api/v1/project/{projectId}/cost",
			c.GetProjectCost,
		},
		"GetProjectDnsRecords": Route{
			strings.ToUpper("Get"),
			"/api/v1/project/{projectId}/records",
			c.GetProjectDnsRecords,
		},
		"GetProjectUsage": Route{
			strings.ToUpper("Get"),
			"/api/v1/project/{projectId}/usage",
			c.GetProjectUsage,
		},
		"GetProjectZoneInstances": Route{
			strings.ToUpper("Get"),
			"/api/v1/project/{projectId}/zone/{zoneId}/instances",
			c.GetProjectZoneInstances,
		},
		"GetProjectZoneKCEs": Route{
			strings.ToUpper("Get"),
			"/api/v1/project/{projectId}/zone/{zoneId}/kces",
			c.GetProjectZoneKCEs,
		},
		"GetProjectZoneKGWs": Route{
			strings.ToUpper("Get"),
			"/api/v1/project/{projectId}/zone/{zoneId}/kgws",
			c.GetProjectZoneKGWs,
		},
		"GetProjectZoneKfs": Route{
			strings.ToUpper("Get"),
			"/api/v1/project/{projectId}/zone/{zoneId}/kfs",
			c.GetProjectZoneKfs,
		},
		"GetProjectZoneVolumes": Route{
			strings.ToUpper("Get"),
			"/api/v1/project/{projectId}/zone/{zoneId}/volumes",
			c.GetProjectZoneVolumes,
		},
		"UpdateProject": Route{
			strings.ToUpper("Put"),
			"/api/v1/project/{projectId}",
			c.UpdateProject,
		},
	}
}

// CreateProject - 
func (c *ProjectAPIController) CreateProject(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	bodyParam := Project{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertProjectRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertProjectConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var subnetSizeParam int32
	if query.Has("subnetSize") {
		param, err := parseNumericParameter[int32](
			query.Get("subnetSize"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		subnetSizeParam = param
	} else {
		var param int32 = 26
		subnetSizeParam = param
	}
	var notifyParam bool
	if query.Has("notify") {
		param, err := parseBoolParameter(
			query.Get("notify"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		notifyParam = param
	} else {
		var param bool = true
		notifyParam = param
	}
	result, err := c.service.CreateProject(r.Context(), bodyParam, subnetSizeParam, notifyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateProjectDnsRecord - 
func (c *ProjectAPIController) CreateProjectDnsRecord(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	bodyParam := DnsRecord{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDnsRecordRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDnsRecordConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateProjectDnsRecord(r.Context(), projectIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateProjectZoneInstance - 
func (c *ProjectAPIController) CreateProjectZoneInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	bodyParam := Instance{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertInstanceRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertInstanceConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var notifyParam bool
	if query.Has("notify") {
		param, err := parseBoolParameter(
			query.Get("notify"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		notifyParam = param
	} else {
		var param bool = true
		notifyParam = param
	}
	result, err := c.service.CreateProjectZoneInstance(r.Context(), projectIdParam, zoneIdParam, bodyParam, notifyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateProjectZoneKce - 
func (c *ProjectAPIController) CreateProjectZoneKce(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	bodyParam := Kce{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertKceRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertKceConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var poolIdParam string
	if query.Has("poolId") {
		param := query.Get("poolId")

		poolIdParam = param
	} else {
	}
	var templateIdParam string
	if query.Has("templateId") {
		param := query.Get("templateId")

		templateIdParam = param
	} else {
	}
	var publicParam bool
	if query.Has("public") {
		param, err := parseBoolParameter(
			query.Get("public"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		publicParam = param
	} else {
		var param bool = false
		publicParam = param
	}
	var notifyParam bool
	if query.Has("notify") {
		param, err := parseBoolParameter(
			query.Get("notify"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		notifyParam = param
	} else {
		var param bool = true
		notifyParam = param
	}
	result, err := c.service.CreateProjectZoneKce(r.Context(), projectIdParam, zoneIdParam, bodyParam, poolIdParam, templateIdParam, publicParam, notifyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateProjectZoneKfs - 
func (c *ProjectAPIController) CreateProjectZoneKfs(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	bodyParam := Kfs{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertKfsRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertKfsConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var nfsIdParam string
	if query.Has("nfsId") {
		param := query.Get("nfsId")

		nfsIdParam = param
	} else {
	}
	var notifyParam bool
	if query.Has("notify") {
		param, err := parseBoolParameter(
			query.Get("notify"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		notifyParam = param
	} else {
		var param bool = true
		notifyParam = param
	}
	result, err := c.service.CreateProjectZoneKfs(r.Context(), projectIdParam, zoneIdParam, bodyParam, nfsIdParam, notifyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateProjectZoneKgw - 
func (c *ProjectAPIController) CreateProjectZoneKgw(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	bodyParam := Kgw{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertKgwRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertKgwConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateProjectZoneKgw(r.Context(), projectIdParam, zoneIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateProjectZoneVolume - 
func (c *ProjectAPIController) CreateProjectZoneVolume(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	bodyParam := Volume{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertVolumeRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertVolumeConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var poolIdParam string
	if query.Has("poolId") {
		param := query.Get("poolId")

		poolIdParam = param
	} else {
	}
	var templateIdParam string
	if query.Has("templateId") {
		param := query.Get("templateId")

		templateIdParam = param
	} else {
	}
	result, err := c.service.CreateProjectZoneVolume(r.Context(), projectIdParam, zoneIdParam, bodyParam, poolIdParam, templateIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteProject - 
func (c *ProjectAPIController) DeleteProject(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	result, err := c.service.DeleteProject(r.Context(), projectIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAllProjects - 
func (c *ProjectAPIController) GetAllProjects(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetAllProjects(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetProject - 
func (c *ProjectAPIController) GetProject(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	result, err := c.service.GetProject(r.Context(), projectIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetProjectCost - 
func (c *ProjectAPIController) GetProjectCost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	result, err := c.service.GetProjectCost(r.Context(), projectIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetProjectDnsRecords - 
func (c *ProjectAPIController) GetProjectDnsRecords(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	result, err := c.service.GetProjectDnsRecords(r.Context(), projectIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetProjectUsage - 
func (c *ProjectAPIController) GetProjectUsage(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	result, err := c.service.GetProjectUsage(r.Context(), projectIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetProjectZoneInstances - 
func (c *ProjectAPIController) GetProjectZoneInstances(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	result, err := c.service.GetProjectZoneInstances(r.Context(), projectIdParam, zoneIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetProjectZoneKCEs - 
func (c *ProjectAPIController) GetProjectZoneKCEs(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	result, err := c.service.GetProjectZoneKCEs(r.Context(), projectIdParam, zoneIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetProjectZoneKGWs - 
func (c *ProjectAPIController) GetProjectZoneKGWs(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	result, err := c.service.GetProjectZoneKGWs(r.Context(), projectIdParam, zoneIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetProjectZoneKfs - 
func (c *ProjectAPIController) GetProjectZoneKfs(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	result, err := c.service.GetProjectZoneKfs(r.Context(), projectIdParam, zoneIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetProjectZoneVolumes - 
func (c *ProjectAPIController) GetProjectZoneVolumes(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	zoneIdParam := params["zoneId"]
	if zoneIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"zoneId"}, nil)
		return
	}
	result, err := c.service.GetProjectZoneVolumes(r.Context(), projectIdParam, zoneIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateProject - 
func (c *ProjectAPIController) UpdateProject(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	bodyParam := Project{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertProjectRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertProjectConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateProject(r.Context(), projectIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
