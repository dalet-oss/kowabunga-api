// Code generated by go-swagger; DO NOT EDIT.

package vnet

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteVNetReader is a Reader for the DeleteVNet structure.
type DeleteVNetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteVNetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteVNetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewDeleteVNetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewDeleteVNetConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteVNetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /vnet/{vnetId}] DeleteVNet", response, response.Code())
	}
}

// NewDeleteVNetOK creates a DeleteVNetOK with default headers values
func NewDeleteVNetOK() *DeleteVNetOK {
	return &DeleteVNetOK{}
}

/*
DeleteVNetOK describes a response with status code 200, with default header values.

The virtual network has been successfully removed.
*/
type DeleteVNetOK struct {
}

// IsSuccess returns true when this delete v net o k response has a 2xx status code
func (o *DeleteVNetOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete v net o k response has a 3xx status code
func (o *DeleteVNetOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete v net o k response has a 4xx status code
func (o *DeleteVNetOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete v net o k response has a 5xx status code
func (o *DeleteVNetOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete v net o k response a status code equal to that given
func (o *DeleteVNetOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete v net o k response
func (o *DeleteVNetOK) Code() int {
	return 200
}

func (o *DeleteVNetOK) Error() string {
	return fmt.Sprintf("[DELETE /vnet/{vnetId}][%d] deleteVNetOK ", 200)
}

func (o *DeleteVNetOK) String() string {
	return fmt.Sprintf("[DELETE /vnet/{vnetId}][%d] deleteVNetOK ", 200)
}

func (o *DeleteVNetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteVNetNotFound creates a DeleteVNetNotFound with default headers values
func NewDeleteVNetNotFound() *DeleteVNetNotFound {
	return &DeleteVNetNotFound{}
}

/*
DeleteVNetNotFound describes a response with status code 404, with default header values.

Invalid virtual network ID was provided.
*/
type DeleteVNetNotFound struct {
}

// IsSuccess returns true when this delete v net not found response has a 2xx status code
func (o *DeleteVNetNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete v net not found response has a 3xx status code
func (o *DeleteVNetNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete v net not found response has a 4xx status code
func (o *DeleteVNetNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete v net not found response has a 5xx status code
func (o *DeleteVNetNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete v net not found response a status code equal to that given
func (o *DeleteVNetNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete v net not found response
func (o *DeleteVNetNotFound) Code() int {
	return 404
}

func (o *DeleteVNetNotFound) Error() string {
	return fmt.Sprintf("[DELETE /vnet/{vnetId}][%d] deleteVNetNotFound ", 404)
}

func (o *DeleteVNetNotFound) String() string {
	return fmt.Sprintf("[DELETE /vnet/{vnetId}][%d] deleteVNetNotFound ", 404)
}

func (o *DeleteVNetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteVNetConflict creates a DeleteVNetConflict with default headers values
func NewDeleteVNetConflict() *DeleteVNetConflict {
	return &DeleteVNetConflict{}
}

/*
DeleteVNetConflict describes a response with status code 409, with default header values.

The virtual network is not empty or still being referenced.
*/
type DeleteVNetConflict struct {
}

// IsSuccess returns true when this delete v net conflict response has a 2xx status code
func (o *DeleteVNetConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete v net conflict response has a 3xx status code
func (o *DeleteVNetConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete v net conflict response has a 4xx status code
func (o *DeleteVNetConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete v net conflict response has a 5xx status code
func (o *DeleteVNetConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this delete v net conflict response a status code equal to that given
func (o *DeleteVNetConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the delete v net conflict response
func (o *DeleteVNetConflict) Code() int {
	return 409
}

func (o *DeleteVNetConflict) Error() string {
	return fmt.Sprintf("[DELETE /vnet/{vnetId}][%d] deleteVNetConflict ", 409)
}

func (o *DeleteVNetConflict) String() string {
	return fmt.Sprintf("[DELETE /vnet/{vnetId}][%d] deleteVNetConflict ", 409)
}

func (o *DeleteVNetConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteVNetInternalServerError creates a DeleteVNetInternalServerError with default headers values
func NewDeleteVNetInternalServerError() *DeleteVNetInternalServerError {
	return &DeleteVNetInternalServerError{}
}

/*
DeleteVNetInternalServerError describes a response with status code 500, with default header values.

Unable to delete virtual network.
*/
type DeleteVNetInternalServerError struct {
}

// IsSuccess returns true when this delete v net internal server error response has a 2xx status code
func (o *DeleteVNetInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete v net internal server error response has a 3xx status code
func (o *DeleteVNetInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete v net internal server error response has a 4xx status code
func (o *DeleteVNetInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete v net internal server error response has a 5xx status code
func (o *DeleteVNetInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete v net internal server error response a status code equal to that given
func (o *DeleteVNetInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete v net internal server error response
func (o *DeleteVNetInternalServerError) Code() int {
	return 500
}

func (o *DeleteVNetInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /vnet/{vnetId}][%d] deleteVNetInternalServerError ", 500)
}

func (o *DeleteVNetInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /vnet/{vnetId}][%d] deleteVNetInternalServerError ", 500)
}

func (o *DeleteVNetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
