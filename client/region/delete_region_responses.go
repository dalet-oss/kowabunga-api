// Code generated by go-swagger; DO NOT EDIT.

package region

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteRegionReader is a Reader for the DeleteRegion structure.
type DeleteRegionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteRegionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteRegionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewDeleteRegionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewDeleteRegionConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteRegionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteRegionOK creates a DeleteRegionOK with default headers values
func NewDeleteRegionOK() *DeleteRegionOK {
	return &DeleteRegionOK{}
}

/*
DeleteRegionOK describes a response with status code 200, with default header values.

The region has been successfully removed.
*/
type DeleteRegionOK struct {
}

// IsSuccess returns true when this delete region o k response has a 2xx status code
func (o *DeleteRegionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete region o k response has a 3xx status code
func (o *DeleteRegionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete region o k response has a 4xx status code
func (o *DeleteRegionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete region o k response has a 5xx status code
func (o *DeleteRegionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete region o k response a status code equal to that given
func (o *DeleteRegionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete region o k response
func (o *DeleteRegionOK) Code() int {
	return 200
}

func (o *DeleteRegionOK) Error() string {
	return fmt.Sprintf("[DELETE /region/{regionId}][%d] deleteRegionOK ", 200)
}

func (o *DeleteRegionOK) String() string {
	return fmt.Sprintf("[DELETE /region/{regionId}][%d] deleteRegionOK ", 200)
}

func (o *DeleteRegionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteRegionNotFound creates a DeleteRegionNotFound with default headers values
func NewDeleteRegionNotFound() *DeleteRegionNotFound {
	return &DeleteRegionNotFound{}
}

/*
DeleteRegionNotFound describes a response with status code 404, with default header values.

Invalid region ID was provided.
*/
type DeleteRegionNotFound struct {
}

// IsSuccess returns true when this delete region not found response has a 2xx status code
func (o *DeleteRegionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete region not found response has a 3xx status code
func (o *DeleteRegionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete region not found response has a 4xx status code
func (o *DeleteRegionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete region not found response has a 5xx status code
func (o *DeleteRegionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete region not found response a status code equal to that given
func (o *DeleteRegionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete region not found response
func (o *DeleteRegionNotFound) Code() int {
	return 404
}

func (o *DeleteRegionNotFound) Error() string {
	return fmt.Sprintf("[DELETE /region/{regionId}][%d] deleteRegionNotFound ", 404)
}

func (o *DeleteRegionNotFound) String() string {
	return fmt.Sprintf("[DELETE /region/{regionId}][%d] deleteRegionNotFound ", 404)
}

func (o *DeleteRegionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteRegionConflict creates a DeleteRegionConflict with default headers values
func NewDeleteRegionConflict() *DeleteRegionConflict {
	return &DeleteRegionConflict{}
}

/*
DeleteRegionConflict describes a response with status code 409, with default header values.

The region is not empty or still being referenced.
*/
type DeleteRegionConflict struct {
}

// IsSuccess returns true when this delete region conflict response has a 2xx status code
func (o *DeleteRegionConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete region conflict response has a 3xx status code
func (o *DeleteRegionConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete region conflict response has a 4xx status code
func (o *DeleteRegionConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete region conflict response has a 5xx status code
func (o *DeleteRegionConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this delete region conflict response a status code equal to that given
func (o *DeleteRegionConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the delete region conflict response
func (o *DeleteRegionConflict) Code() int {
	return 409
}

func (o *DeleteRegionConflict) Error() string {
	return fmt.Sprintf("[DELETE /region/{regionId}][%d] deleteRegionConflict ", 409)
}

func (o *DeleteRegionConflict) String() string {
	return fmt.Sprintf("[DELETE /region/{regionId}][%d] deleteRegionConflict ", 409)
}

func (o *DeleteRegionConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteRegionInternalServerError creates a DeleteRegionInternalServerError with default headers values
func NewDeleteRegionInternalServerError() *DeleteRegionInternalServerError {
	return &DeleteRegionInternalServerError{}
}

/*
DeleteRegionInternalServerError describes a response with status code 500, with default header values.

Unable to delete region.
*/
type DeleteRegionInternalServerError struct {
}

// IsSuccess returns true when this delete region internal server error response has a 2xx status code
func (o *DeleteRegionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete region internal server error response has a 3xx status code
func (o *DeleteRegionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete region internal server error response has a 4xx status code
func (o *DeleteRegionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete region internal server error response has a 5xx status code
func (o *DeleteRegionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete region internal server error response a status code equal to that given
func (o *DeleteRegionInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete region internal server error response
func (o *DeleteRegionInternalServerError) Code() int {
	return 500
}

func (o *DeleteRegionInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /region/{regionId}][%d] deleteRegionInternalServerError ", 500)
}

func (o *DeleteRegionInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /region/{regionId}][%d] deleteRegionInternalServerError ", 500)
}

func (o *DeleteRegionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
