// Code generated by go-swagger; DO NOT EDIT.

package region

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/dalet-oss/kowabunga-api/models"
)

// UpdateRegionReader is a Reader for the UpdateRegion structure.
type UpdateRegionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateRegionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateRegionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateRegionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateRegionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateRegionOK creates a UpdateRegionOK with default headers values
func NewUpdateRegionOK() *UpdateRegionOK {
	return &UpdateRegionOK{}
}

/*
UpdateRegionOK describes a response with status code 200, with default header values.

Returns the updated region object.
*/
type UpdateRegionOK struct {
	Payload *models.Region
}

// IsSuccess returns true when this update region o k response has a 2xx status code
func (o *UpdateRegionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update region o k response has a 3xx status code
func (o *UpdateRegionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update region o k response has a 4xx status code
func (o *UpdateRegionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update region o k response has a 5xx status code
func (o *UpdateRegionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update region o k response a status code equal to that given
func (o *UpdateRegionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update region o k response
func (o *UpdateRegionOK) Code() int {
	return 200
}

func (o *UpdateRegionOK) Error() string {
	return fmt.Sprintf("[PUT /region/{regionId}][%d] updateRegionOK  %+v", 200, o.Payload)
}

func (o *UpdateRegionOK) String() string {
	return fmt.Sprintf("[PUT /region/{regionId}][%d] updateRegionOK  %+v", 200, o.Payload)
}

func (o *UpdateRegionOK) GetPayload() *models.Region {
	return o.Payload
}

func (o *UpdateRegionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Region)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRegionBadRequest creates a UpdateRegionBadRequest with default headers values
func NewUpdateRegionBadRequest() *UpdateRegionBadRequest {
	return &UpdateRegionBadRequest{}
}

/*
UpdateRegionBadRequest describes a response with status code 400, with default header values.

Bad parameters were provided.
*/
type UpdateRegionBadRequest struct {
}

// IsSuccess returns true when this update region bad request response has a 2xx status code
func (o *UpdateRegionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update region bad request response has a 3xx status code
func (o *UpdateRegionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update region bad request response has a 4xx status code
func (o *UpdateRegionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update region bad request response has a 5xx status code
func (o *UpdateRegionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update region bad request response a status code equal to that given
func (o *UpdateRegionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update region bad request response
func (o *UpdateRegionBadRequest) Code() int {
	return 400
}

func (o *UpdateRegionBadRequest) Error() string {
	return fmt.Sprintf("[PUT /region/{regionId}][%d] updateRegionBadRequest ", 400)
}

func (o *UpdateRegionBadRequest) String() string {
	return fmt.Sprintf("[PUT /region/{regionId}][%d] updateRegionBadRequest ", 400)
}

func (o *UpdateRegionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRegionNotFound creates a UpdateRegionNotFound with default headers values
func NewUpdateRegionNotFound() *UpdateRegionNotFound {
	return &UpdateRegionNotFound{}
}

/*
UpdateRegionNotFound describes a response with status code 404, with default header values.

Invalid region ID was provided.
*/
type UpdateRegionNotFound struct {
}

// IsSuccess returns true when this update region not found response has a 2xx status code
func (o *UpdateRegionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update region not found response has a 3xx status code
func (o *UpdateRegionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update region not found response has a 4xx status code
func (o *UpdateRegionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update region not found response has a 5xx status code
func (o *UpdateRegionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update region not found response a status code equal to that given
func (o *UpdateRegionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update region not found response
func (o *UpdateRegionNotFound) Code() int {
	return 404
}

func (o *UpdateRegionNotFound) Error() string {
	return fmt.Sprintf("[PUT /region/{regionId}][%d] updateRegionNotFound ", 404)
}

func (o *UpdateRegionNotFound) String() string {
	return fmt.Sprintf("[PUT /region/{regionId}][%d] updateRegionNotFound ", 404)
}

func (o *UpdateRegionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
