// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/dalet-oss/kowabunga-api/models"
)

// NewCreateProjectZoneKceParams creates a new CreateProjectZoneKceParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCreateProjectZoneKceParams() *CreateProjectZoneKceParams {
	return &CreateProjectZoneKceParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCreateProjectZoneKceParamsWithTimeout creates a new CreateProjectZoneKceParams object
// with the ability to set a timeout on a request.
func NewCreateProjectZoneKceParamsWithTimeout(timeout time.Duration) *CreateProjectZoneKceParams {
	return &CreateProjectZoneKceParams{
		timeout: timeout,
	}
}

// NewCreateProjectZoneKceParamsWithContext creates a new CreateProjectZoneKceParams object
// with the ability to set a context for a request.
func NewCreateProjectZoneKceParamsWithContext(ctx context.Context) *CreateProjectZoneKceParams {
	return &CreateProjectZoneKceParams{
		Context: ctx,
	}
}

// NewCreateProjectZoneKceParamsWithHTTPClient creates a new CreateProjectZoneKceParams object
// with the ability to set a custom HTTPClient for a request.
func NewCreateProjectZoneKceParamsWithHTTPClient(client *http.Client) *CreateProjectZoneKceParams {
	return &CreateProjectZoneKceParams{
		HTTPClient: client,
	}
}

/*
CreateProjectZoneKceParams contains all the parameters to send to the API endpoint

	for the create project zone kce operation.

	Typically these are written to a http.Request.
*/
type CreateProjectZoneKceParams struct {

	// Body.
	Body *models.KCE

	/* PoolID.

	   the ID of the associated storage pool (optional, zone's default if unspecified).
	*/
	PoolID *string

	/* ProjectID.

	   the ID of the associated project.
	*/
	ProjectID string

	/* Public.

	   Should KCE be exposed over public Internet ? (a public IPv4 address will then be auto-assigned, default to false).
	*/
	Public *bool

	/* TemplateID.

	   the ID of the template to clone the OS storage volume from (optional, zone's default if unspecified)
	*/
	TemplateID *string

	/* ZoneID.

	   the ID of the associated zone.
	*/
	ZoneID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the create project zone kce params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateProjectZoneKceParams) WithDefaults() *CreateProjectZoneKceParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the create project zone kce params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateProjectZoneKceParams) SetDefaults() {
	var (
		publicDefault = bool(false)
	)

	val := CreateProjectZoneKceParams{
		Public: &publicDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the create project zone kce params
func (o *CreateProjectZoneKceParams) WithTimeout(timeout time.Duration) *CreateProjectZoneKceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create project zone kce params
func (o *CreateProjectZoneKceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create project zone kce params
func (o *CreateProjectZoneKceParams) WithContext(ctx context.Context) *CreateProjectZoneKceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create project zone kce params
func (o *CreateProjectZoneKceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create project zone kce params
func (o *CreateProjectZoneKceParams) WithHTTPClient(client *http.Client) *CreateProjectZoneKceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create project zone kce params
func (o *CreateProjectZoneKceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the create project zone kce params
func (o *CreateProjectZoneKceParams) WithBody(body *models.KCE) *CreateProjectZoneKceParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the create project zone kce params
func (o *CreateProjectZoneKceParams) SetBody(body *models.KCE) {
	o.Body = body
}

// WithPoolID adds the poolID to the create project zone kce params
func (o *CreateProjectZoneKceParams) WithPoolID(poolID *string) *CreateProjectZoneKceParams {
	o.SetPoolID(poolID)
	return o
}

// SetPoolID adds the poolId to the create project zone kce params
func (o *CreateProjectZoneKceParams) SetPoolID(poolID *string) {
	o.PoolID = poolID
}

// WithProjectID adds the projectID to the create project zone kce params
func (o *CreateProjectZoneKceParams) WithProjectID(projectID string) *CreateProjectZoneKceParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the create project zone kce params
func (o *CreateProjectZoneKceParams) SetProjectID(projectID string) {
	o.ProjectID = projectID
}

// WithPublic adds the public to the create project zone kce params
func (o *CreateProjectZoneKceParams) WithPublic(public *bool) *CreateProjectZoneKceParams {
	o.SetPublic(public)
	return o
}

// SetPublic adds the public to the create project zone kce params
func (o *CreateProjectZoneKceParams) SetPublic(public *bool) {
	o.Public = public
}

// WithTemplateID adds the templateID to the create project zone kce params
func (o *CreateProjectZoneKceParams) WithTemplateID(templateID *string) *CreateProjectZoneKceParams {
	o.SetTemplateID(templateID)
	return o
}

// SetTemplateID adds the templateId to the create project zone kce params
func (o *CreateProjectZoneKceParams) SetTemplateID(templateID *string) {
	o.TemplateID = templateID
}

// WithZoneID adds the zoneID to the create project zone kce params
func (o *CreateProjectZoneKceParams) WithZoneID(zoneID string) *CreateProjectZoneKceParams {
	o.SetZoneID(zoneID)
	return o
}

// SetZoneID adds the zoneId to the create project zone kce params
func (o *CreateProjectZoneKceParams) SetZoneID(zoneID string) {
	o.ZoneID = zoneID
}

// WriteToRequest writes these params to a swagger request
func (o *CreateProjectZoneKceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.PoolID != nil {

		// query param poolId
		var qrPoolID string

		if o.PoolID != nil {
			qrPoolID = *o.PoolID
		}
		qPoolID := qrPoolID
		if qPoolID != "" {

			if err := r.SetQueryParam("poolId", qPoolID); err != nil {
				return err
			}
		}
	}

	// path param projectId
	if err := r.SetPathParam("projectId", o.ProjectID); err != nil {
		return err
	}

	if o.Public != nil {

		// query param public
		var qrPublic bool

		if o.Public != nil {
			qrPublic = *o.Public
		}
		qPublic := swag.FormatBool(qrPublic)
		if qPublic != "" {

			if err := r.SetQueryParam("public", qPublic); err != nil {
				return err
			}
		}
	}

	if o.TemplateID != nil {

		// query param templateId
		var qrTemplateID string

		if o.TemplateID != nil {
			qrTemplateID = *o.TemplateID
		}
		qTemplateID := qrTemplateID
		if qTemplateID != "" {

			if err := r.SetQueryParam("templateId", qTemplateID); err != nil {
				return err
			}
		}
	}

	// path param zoneId
	if err := r.SetPathParam("zoneId", o.ZoneID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
