// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/dalet-oss/kowabunga-api/models"
)

// NewCreateProjectParams creates a new CreateProjectParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCreateProjectParams() *CreateProjectParams {
	return &CreateProjectParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCreateProjectParamsWithTimeout creates a new CreateProjectParams object
// with the ability to set a timeout on a request.
func NewCreateProjectParamsWithTimeout(timeout time.Duration) *CreateProjectParams {
	return &CreateProjectParams{
		timeout: timeout,
	}
}

// NewCreateProjectParamsWithContext creates a new CreateProjectParams object
// with the ability to set a context for a request.
func NewCreateProjectParamsWithContext(ctx context.Context) *CreateProjectParams {
	return &CreateProjectParams{
		Context: ctx,
	}
}

// NewCreateProjectParamsWithHTTPClient creates a new CreateProjectParams object
// with the ability to set a custom HTTPClient for a request.
func NewCreateProjectParamsWithHTTPClient(client *http.Client) *CreateProjectParams {
	return &CreateProjectParams{
		HTTPClient: client,
	}
}

/*
CreateProjectParams contains all the parameters to send to the API endpoint

	for the create project operation.

	Typically these are written to a http.Request.
*/
type CreateProjectParams struct {

	// Body.
	Body *models.Project

	/* Notify.

	   Whether or not to send a notification email at resource creation.

	   Default: true
	*/
	Notify *bool

	/* SubnetSize.

	   The minimum VPC subnet size to be affected to the project. WARNING, this cannot be changed later.

	   Default: 26
	*/
	SubnetSize *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the create project params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateProjectParams) WithDefaults() *CreateProjectParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the create project params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateProjectParams) SetDefaults() {
	var (
		notifyDefault = bool(true)

		subnetSizeDefault = int64(26)
	)

	val := CreateProjectParams{
		Notify:     &notifyDefault,
		SubnetSize: &subnetSizeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the create project params
func (o *CreateProjectParams) WithTimeout(timeout time.Duration) *CreateProjectParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create project params
func (o *CreateProjectParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create project params
func (o *CreateProjectParams) WithContext(ctx context.Context) *CreateProjectParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create project params
func (o *CreateProjectParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create project params
func (o *CreateProjectParams) WithHTTPClient(client *http.Client) *CreateProjectParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create project params
func (o *CreateProjectParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the create project params
func (o *CreateProjectParams) WithBody(body *models.Project) *CreateProjectParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the create project params
func (o *CreateProjectParams) SetBody(body *models.Project) {
	o.Body = body
}

// WithNotify adds the notify to the create project params
func (o *CreateProjectParams) WithNotify(notify *bool) *CreateProjectParams {
	o.SetNotify(notify)
	return o
}

// SetNotify adds the notify to the create project params
func (o *CreateProjectParams) SetNotify(notify *bool) {
	o.Notify = notify
}

// WithSubnetSize adds the subnetSize to the create project params
func (o *CreateProjectParams) WithSubnetSize(subnetSize *int64) *CreateProjectParams {
	o.SetSubnetSize(subnetSize)
	return o
}

// SetSubnetSize adds the subnetSize to the create project params
func (o *CreateProjectParams) SetSubnetSize(subnetSize *int64) {
	o.SubnetSize = subnetSize
}

// WriteToRequest writes these params to a swagger request
func (o *CreateProjectParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.Notify != nil {

		// query param notify
		var qrNotify bool

		if o.Notify != nil {
			qrNotify = *o.Notify
		}
		qNotify := swag.FormatBool(qrNotify)
		if qNotify != "" {

			if err := r.SetQueryParam("notify", qNotify); err != nil {
				return err
			}
		}
	}

	if o.SubnetSize != nil {

		// query param subnetSize
		var qrSubnetSize int64

		if o.SubnetSize != nil {
			qrSubnetSize = *o.SubnetSize
		}
		qSubnetSize := swag.FormatInt64(qrSubnetSize)
		if qSubnetSize != "" {

			if err := r.SetQueryParam("subnetSize", qSubnetSize); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
