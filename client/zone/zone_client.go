// Code generated by go-swagger; DO NOT EDIT.

package zone

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new zone API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for zone API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateHost(params *CreateHostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateHostCreated, error)

	CreateNetGW(params *CreateNetGWParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNetGWCreated, error)

	CreatePool(params *CreatePoolParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePoolCreated, error)

	CreateVNet(params *CreateVNetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateVNetCreated, error)

	DeleteZone(params *DeleteZoneParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteZoneOK, error)

	GetAllZones(params *GetAllZonesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllZonesOK, error)

	GetZone(params *GetZoneParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetZoneOK, error)

	GetZoneHosts(params *GetZoneHostsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetZoneHostsOK, error)

	GetZoneNetGWs(params *GetZoneNetGWsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetZoneNetGWsOK, error)

	GetZonePools(params *GetZonePoolsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetZonePoolsOK, error)

	GetZoneVNets(params *GetZoneVNetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetZoneVNetsOK, error)

	UpdateZone(params *UpdateZoneParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateZoneOK, error)

	UpdateZoneDefaultPool(params *UpdateZoneDefaultPoolParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateZoneDefaultPoolOK, error)

	UpdateZoneDefaultVNet(params *UpdateZoneDefaultVNetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateZoneDefaultVNetOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateHost Creates a new host.
*/
func (a *Client) CreateHost(params *CreateHostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateHostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateHostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateHost",
		Method:             "POST",
		PathPattern:        "/zone/{zoneId}/host",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateHostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateHostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateHost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateNetGW Creates a new network gateway.
*/
func (a *Client) CreateNetGW(params *CreateNetGWParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNetGWCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetGWParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateNetGW",
		Method:             "POST",
		PathPattern:        "/zone/{zoneId}/netgw",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateNetGWReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNetGWCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateNetGW: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreatePool Creates a new storage pool.
*/
func (a *Client) CreatePool(params *CreatePoolParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePoolCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePoolParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreatePool",
		Method:             "POST",
		PathPattern:        "/zone/{zoneId}/pool",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreatePoolReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePoolCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreatePool: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateVNet Creates a new virtual network.
*/
func (a *Client) CreateVNet(params *CreateVNetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateVNetCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateVNetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateVNet",
		Method:             "POST",
		PathPattern:        "/zone/{zoneId}/vnet",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateVNetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateVNetCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateVNet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteZone Deletes an existing zone.
*/
func (a *Client) DeleteZone(params *DeleteZoneParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteZoneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteZoneParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteZone",
		Method:             "DELETE",
		PathPattern:        "/zone/{zoneId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteZoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteZoneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteZone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllZones Returns the IDs of registered zones.
*/
func (a *Client) GetAllZones(params *GetAllZonesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllZonesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllZonesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAllZones",
		Method:             "GET",
		PathPattern:        "/zone",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllZonesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllZonesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAllZones: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetZone Returns a description of the zone
*/
func (a *Client) GetZone(params *GetZoneParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetZoneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetZoneParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetZone",
		Method:             "GET",
		PathPattern:        "/zone/{zoneId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetZoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetZoneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetZone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetZoneHosts Returns the IDs of the hosts existing in the zone.
*/
func (a *Client) GetZoneHosts(params *GetZoneHostsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetZoneHostsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetZoneHostsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetZoneHosts",
		Method:             "GET",
		PathPattern:        "/zone/{zoneId}/hosts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetZoneHostsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetZoneHostsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetZoneHosts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetZoneNetGWs Returns the IDs of the hosts existing in the zone.
*/
func (a *Client) GetZoneNetGWs(params *GetZoneNetGWsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetZoneNetGWsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetZoneNetGWsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetZoneNetGWs",
		Method:             "GET",
		PathPattern:        "/zone/{zoneId}/netgws",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetZoneNetGWsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetZoneNetGWsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetZoneNetGWs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetZonePools Returns the IDs of the pools existing in the zone.
*/
func (a *Client) GetZonePools(params *GetZonePoolsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetZonePoolsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetZonePoolsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetZonePools",
		Method:             "GET",
		PathPattern:        "/zone/{zoneId}/pools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetZonePoolsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetZonePoolsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetZonePools: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetZoneVNets Returns the IDs of the virtual networks existing in the zone.
*/
func (a *Client) GetZoneVNets(params *GetZoneVNetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetZoneVNetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetZoneVNetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetZoneVNets",
		Method:             "GET",
		PathPattern:        "/zone/{zoneId}/vnets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetZoneVNetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetZoneVNetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetZoneVNets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateZone Updates a zone configuration.
*/
func (a *Client) UpdateZone(params *UpdateZoneParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateZoneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateZoneParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateZone",
		Method:             "PUT",
		PathPattern:        "/zone/{zoneId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateZoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateZoneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateZone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateZoneDefaultPool Set a zone's default storage pool.
*/
func (a *Client) UpdateZoneDefaultPool(params *UpdateZoneDefaultPoolParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateZoneDefaultPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateZoneDefaultPoolParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateZoneDefaultPool",
		Method:             "PUT",
		PathPattern:        "/zone/{zoneId}/pool/{poolId}/default",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateZoneDefaultPoolReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateZoneDefaultPoolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateZoneDefaultPool: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateZoneDefaultVNet Set a zone's default virtual network.
*/
func (a *Client) UpdateZoneDefaultVNet(params *UpdateZoneDefaultVNetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateZoneDefaultVNetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateZoneDefaultVNetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateZoneDefaultVNet",
		Method:             "PUT",
		PathPattern:        "/zone/{zoneId}/vnet/{vnetId}/default",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateZoneDefaultVNetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateZoneDefaultVNetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateZoneDefaultVNet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
