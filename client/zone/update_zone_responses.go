// Code generated by go-swagger; DO NOT EDIT.

package zone

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/dalet-oss/kowabunga-api/models"
)

// UpdateZoneReader is a Reader for the UpdateZone structure.
type UpdateZoneReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateZoneReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateZoneOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateZoneBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateZoneNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /zone/{zoneId}] UpdateZone", response, response.Code())
	}
}

// NewUpdateZoneOK creates a UpdateZoneOK with default headers values
func NewUpdateZoneOK() *UpdateZoneOK {
	return &UpdateZoneOK{}
}

/*
UpdateZoneOK describes a response with status code 200, with default header values.

Returns the updated zone object.
*/
type UpdateZoneOK struct {
	Payload *models.Zone
}

// IsSuccess returns true when this update zone o k response has a 2xx status code
func (o *UpdateZoneOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update zone o k response has a 3xx status code
func (o *UpdateZoneOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update zone o k response has a 4xx status code
func (o *UpdateZoneOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update zone o k response has a 5xx status code
func (o *UpdateZoneOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update zone o k response a status code equal to that given
func (o *UpdateZoneOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update zone o k response
func (o *UpdateZoneOK) Code() int {
	return 200
}

func (o *UpdateZoneOK) Error() string {
	return fmt.Sprintf("[PUT /zone/{zoneId}][%d] updateZoneOK  %+v", 200, o.Payload)
}

func (o *UpdateZoneOK) String() string {
	return fmt.Sprintf("[PUT /zone/{zoneId}][%d] updateZoneOK  %+v", 200, o.Payload)
}

func (o *UpdateZoneOK) GetPayload() *models.Zone {
	return o.Payload
}

func (o *UpdateZoneOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Zone)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateZoneBadRequest creates a UpdateZoneBadRequest with default headers values
func NewUpdateZoneBadRequest() *UpdateZoneBadRequest {
	return &UpdateZoneBadRequest{}
}

/*
UpdateZoneBadRequest describes a response with status code 400, with default header values.

Bad parameters were provided.
*/
type UpdateZoneBadRequest struct {
}

// IsSuccess returns true when this update zone bad request response has a 2xx status code
func (o *UpdateZoneBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update zone bad request response has a 3xx status code
func (o *UpdateZoneBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update zone bad request response has a 4xx status code
func (o *UpdateZoneBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update zone bad request response has a 5xx status code
func (o *UpdateZoneBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update zone bad request response a status code equal to that given
func (o *UpdateZoneBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update zone bad request response
func (o *UpdateZoneBadRequest) Code() int {
	return 400
}

func (o *UpdateZoneBadRequest) Error() string {
	return fmt.Sprintf("[PUT /zone/{zoneId}][%d] updateZoneBadRequest ", 400)
}

func (o *UpdateZoneBadRequest) String() string {
	return fmt.Sprintf("[PUT /zone/{zoneId}][%d] updateZoneBadRequest ", 400)
}

func (o *UpdateZoneBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateZoneNotFound creates a UpdateZoneNotFound with default headers values
func NewUpdateZoneNotFound() *UpdateZoneNotFound {
	return &UpdateZoneNotFound{}
}

/*
UpdateZoneNotFound describes a response with status code 404, with default header values.

Invalid zone ID was provided.
*/
type UpdateZoneNotFound struct {
}

// IsSuccess returns true when this update zone not found response has a 2xx status code
func (o *UpdateZoneNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update zone not found response has a 3xx status code
func (o *UpdateZoneNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update zone not found response has a 4xx status code
func (o *UpdateZoneNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update zone not found response has a 5xx status code
func (o *UpdateZoneNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update zone not found response a status code equal to that given
func (o *UpdateZoneNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update zone not found response
func (o *UpdateZoneNotFound) Code() int {
	return 404
}

func (o *UpdateZoneNotFound) Error() string {
	return fmt.Sprintf("[PUT /zone/{zoneId}][%d] updateZoneNotFound ", 404)
}

func (o *UpdateZoneNotFound) String() string {
	return fmt.Sprintf("[PUT /zone/{zoneId}][%d] updateZoneNotFound ", 404)
}

func (o *UpdateZoneNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
