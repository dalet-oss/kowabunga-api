// Code generated by go-swagger; DO NOT EDIT.

package subnet

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/dalet-oss/kowabunga-api/models"
)

// UpdateSubnetReader is a Reader for the UpdateSubnet structure.
type UpdateSubnetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateSubnetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateSubnetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateSubnetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateSubnetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateSubnetOK creates a UpdateSubnetOK with default headers values
func NewUpdateSubnetOK() *UpdateSubnetOK {
	return &UpdateSubnetOK{}
}

/*
UpdateSubnetOK describes a response with status code 200, with default header values.

Returns the updated subnet object.
*/
type UpdateSubnetOK struct {
	Payload *models.Subnet
}

// IsSuccess returns true when this update subnet o k response has a 2xx status code
func (o *UpdateSubnetOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update subnet o k response has a 3xx status code
func (o *UpdateSubnetOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update subnet o k response has a 4xx status code
func (o *UpdateSubnetOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update subnet o k response has a 5xx status code
func (o *UpdateSubnetOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update subnet o k response a status code equal to that given
func (o *UpdateSubnetOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update subnet o k response
func (o *UpdateSubnetOK) Code() int {
	return 200
}

func (o *UpdateSubnetOK) Error() string {
	return fmt.Sprintf("[PUT /subnet/{subnetId}][%d] updateSubnetOK  %+v", 200, o.Payload)
}

func (o *UpdateSubnetOK) String() string {
	return fmt.Sprintf("[PUT /subnet/{subnetId}][%d] updateSubnetOK  %+v", 200, o.Payload)
}

func (o *UpdateSubnetOK) GetPayload() *models.Subnet {
	return o.Payload
}

func (o *UpdateSubnetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Subnet)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSubnetBadRequest creates a UpdateSubnetBadRequest with default headers values
func NewUpdateSubnetBadRequest() *UpdateSubnetBadRequest {
	return &UpdateSubnetBadRequest{}
}

/*
UpdateSubnetBadRequest describes a response with status code 400, with default header values.

Bad parameters were provided.
*/
type UpdateSubnetBadRequest struct {
}

// IsSuccess returns true when this update subnet bad request response has a 2xx status code
func (o *UpdateSubnetBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update subnet bad request response has a 3xx status code
func (o *UpdateSubnetBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update subnet bad request response has a 4xx status code
func (o *UpdateSubnetBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update subnet bad request response has a 5xx status code
func (o *UpdateSubnetBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update subnet bad request response a status code equal to that given
func (o *UpdateSubnetBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update subnet bad request response
func (o *UpdateSubnetBadRequest) Code() int {
	return 400
}

func (o *UpdateSubnetBadRequest) Error() string {
	return fmt.Sprintf("[PUT /subnet/{subnetId}][%d] updateSubnetBadRequest ", 400)
}

func (o *UpdateSubnetBadRequest) String() string {
	return fmt.Sprintf("[PUT /subnet/{subnetId}][%d] updateSubnetBadRequest ", 400)
}

func (o *UpdateSubnetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateSubnetNotFound creates a UpdateSubnetNotFound with default headers values
func NewUpdateSubnetNotFound() *UpdateSubnetNotFound {
	return &UpdateSubnetNotFound{}
}

/*
UpdateSubnetNotFound describes a response with status code 404, with default header values.

Invalid subnet ID was provided.
*/
type UpdateSubnetNotFound struct {
}

// IsSuccess returns true when this update subnet not found response has a 2xx status code
func (o *UpdateSubnetNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update subnet not found response has a 3xx status code
func (o *UpdateSubnetNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update subnet not found response has a 4xx status code
func (o *UpdateSubnetNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update subnet not found response has a 5xx status code
func (o *UpdateSubnetNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update subnet not found response a status code equal to that given
func (o *UpdateSubnetNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update subnet not found response
func (o *UpdateSubnetNotFound) Code() int {
	return 404
}

func (o *UpdateSubnetNotFound) Error() string {
	return fmt.Sprintf("[PUT /subnet/{subnetId}][%d] updateSubnetNotFound ", 404)
}

func (o *UpdateSubnetNotFound) String() string {
	return fmt.Sprintf("[PUT /subnet/{subnetId}][%d] updateSubnetNotFound ", 404)
}

func (o *UpdateSubnetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
