// Code generated by go-swagger; DO NOT EDIT.

package record

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/dalet-oss/kowabunga-api/models"
)

// UpdateDNSRecordReader is a Reader for the UpdateDNSRecord structure.
type UpdateDNSRecordReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateDNSRecordReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateDNSRecordOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateDNSRecordBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateDNSRecordNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /record/{recordId}] UpdateDnsRecord", response, response.Code())
	}
}

// NewUpdateDNSRecordOK creates a UpdateDNSRecordOK with default headers values
func NewUpdateDNSRecordOK() *UpdateDNSRecordOK {
	return &UpdateDNSRecordOK{}
}

/*
UpdateDNSRecordOK describes a response with status code 200, with default header values.

Returns the updated DNS record object.
*/
type UpdateDNSRecordOK struct {
	Payload *models.DNSRecord
}

// IsSuccess returns true when this update Dns record o k response has a 2xx status code
func (o *UpdateDNSRecordOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update Dns record o k response has a 3xx status code
func (o *UpdateDNSRecordOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update Dns record o k response has a 4xx status code
func (o *UpdateDNSRecordOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update Dns record o k response has a 5xx status code
func (o *UpdateDNSRecordOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update Dns record o k response a status code equal to that given
func (o *UpdateDNSRecordOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update Dns record o k response
func (o *UpdateDNSRecordOK) Code() int {
	return 200
}

func (o *UpdateDNSRecordOK) Error() string {
	return fmt.Sprintf("[PUT /record/{recordId}][%d] updateDnsRecordOK  %+v", 200, o.Payload)
}

func (o *UpdateDNSRecordOK) String() string {
	return fmt.Sprintf("[PUT /record/{recordId}][%d] updateDnsRecordOK  %+v", 200, o.Payload)
}

func (o *UpdateDNSRecordOK) GetPayload() *models.DNSRecord {
	return o.Payload
}

func (o *UpdateDNSRecordOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DNSRecord)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDNSRecordBadRequest creates a UpdateDNSRecordBadRequest with default headers values
func NewUpdateDNSRecordBadRequest() *UpdateDNSRecordBadRequest {
	return &UpdateDNSRecordBadRequest{}
}

/*
UpdateDNSRecordBadRequest describes a response with status code 400, with default header values.

Bad parameters were provided.
*/
type UpdateDNSRecordBadRequest struct {
}

// IsSuccess returns true when this update Dns record bad request response has a 2xx status code
func (o *UpdateDNSRecordBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update Dns record bad request response has a 3xx status code
func (o *UpdateDNSRecordBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update Dns record bad request response has a 4xx status code
func (o *UpdateDNSRecordBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update Dns record bad request response has a 5xx status code
func (o *UpdateDNSRecordBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update Dns record bad request response a status code equal to that given
func (o *UpdateDNSRecordBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update Dns record bad request response
func (o *UpdateDNSRecordBadRequest) Code() int {
	return 400
}

func (o *UpdateDNSRecordBadRequest) Error() string {
	return fmt.Sprintf("[PUT /record/{recordId}][%d] updateDnsRecordBadRequest ", 400)
}

func (o *UpdateDNSRecordBadRequest) String() string {
	return fmt.Sprintf("[PUT /record/{recordId}][%d] updateDnsRecordBadRequest ", 400)
}

func (o *UpdateDNSRecordBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateDNSRecordNotFound creates a UpdateDNSRecordNotFound with default headers values
func NewUpdateDNSRecordNotFound() *UpdateDNSRecordNotFound {
	return &UpdateDNSRecordNotFound{}
}

/*
UpdateDNSRecordNotFound describes a response with status code 404, with default header values.

Invalid DNS record ID was provided.
*/
type UpdateDNSRecordNotFound struct {
}

// IsSuccess returns true when this update Dns record not found response has a 2xx status code
func (o *UpdateDNSRecordNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update Dns record not found response has a 3xx status code
func (o *UpdateDNSRecordNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update Dns record not found response has a 4xx status code
func (o *UpdateDNSRecordNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update Dns record not found response has a 5xx status code
func (o *UpdateDNSRecordNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update Dns record not found response a status code equal to that given
func (o *UpdateDNSRecordNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update Dns record not found response
func (o *UpdateDNSRecordNotFound) Code() int {
	return 404
}

func (o *UpdateDNSRecordNotFound) Error() string {
	return fmt.Sprintf("[PUT /record/{recordId}][%d] updateDnsRecordNotFound ", 404)
}

func (o *UpdateDNSRecordNotFound) String() string {
	return fmt.Sprintf("[PUT /record/{recordId}][%d] updateDnsRecordNotFound ", 404)
}

func (o *UpdateDNSRecordNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
