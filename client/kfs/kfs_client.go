// Code generated by go-swagger; DO NOT EDIT.

package kfs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new kfs API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for kfs API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteKFS(params *DeleteKFSParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteKFSOK, error)

	GetAllKFSs(params *GetAllKFSsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllKFSsOK, error)

	GetKFS(params *GetKFSParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKFSOK, error)

	UpdateKFS(params *UpdateKFSParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateKFSOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteKFS Deletes an existing KFS storage volume.
*/
func (a *Client) DeleteKFS(params *DeleteKFSParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteKFSOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteKFSParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteKFS",
		Method:             "DELETE",
		PathPattern:        "/kfs/{kfsId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteKFSReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteKFSOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteKFS: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllKFSs Returns the IDs of registered KFS storage volumes.
*/
func (a *Client) GetAllKFSs(params *GetAllKFSsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllKFSsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllKFSsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAllKFSs",
		Method:             "GET",
		PathPattern:        "/kfs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllKFSsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllKFSsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAllKFSs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetKFS Returns the description of the KFS storage volume.
*/
func (a *Client) GetKFS(params *GetKFSParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKFSOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKFSParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetKFS",
		Method:             "GET",
		PathPattern:        "/kfs/{kfsId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetKFSReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKFSOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetKFS: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateKFS Updates a KFS storage volume configuration.
*/
func (a *Client) UpdateKFS(params *UpdateKFSParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateKFSOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateKFSParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateKFS",
		Method:             "PUT",
		PathPattern:        "/kfs/{kfsId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateKFSReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateKFSOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateKFS: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
