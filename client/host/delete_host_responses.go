// Code generated by go-swagger; DO NOT EDIT.

package host

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteHostReader is a Reader for the DeleteHost structure.
type DeleteHostReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteHostReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteHostOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewDeleteHostNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewDeleteHostConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteHostInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteHostOK creates a DeleteHostOK with default headers values
func NewDeleteHostOK() *DeleteHostOK {
	return &DeleteHostOK{}
}

/*
DeleteHostOK describes a response with status code 200, with default header values.

The host has been successfully removed.
*/
type DeleteHostOK struct {
}

// IsSuccess returns true when this delete host o k response has a 2xx status code
func (o *DeleteHostOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete host o k response has a 3xx status code
func (o *DeleteHostOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete host o k response has a 4xx status code
func (o *DeleteHostOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete host o k response has a 5xx status code
func (o *DeleteHostOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete host o k response a status code equal to that given
func (o *DeleteHostOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete host o k response
func (o *DeleteHostOK) Code() int {
	return 200
}

func (o *DeleteHostOK) Error() string {
	return fmt.Sprintf("[DELETE /host/{hostId}][%d] deleteHostOK ", 200)
}

func (o *DeleteHostOK) String() string {
	return fmt.Sprintf("[DELETE /host/{hostId}][%d] deleteHostOK ", 200)
}

func (o *DeleteHostOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteHostNotFound creates a DeleteHostNotFound with default headers values
func NewDeleteHostNotFound() *DeleteHostNotFound {
	return &DeleteHostNotFound{}
}

/*
DeleteHostNotFound describes a response with status code 404, with default header values.

Invalid host ID was provided.
*/
type DeleteHostNotFound struct {
}

// IsSuccess returns true when this delete host not found response has a 2xx status code
func (o *DeleteHostNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete host not found response has a 3xx status code
func (o *DeleteHostNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete host not found response has a 4xx status code
func (o *DeleteHostNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete host not found response has a 5xx status code
func (o *DeleteHostNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete host not found response a status code equal to that given
func (o *DeleteHostNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete host not found response
func (o *DeleteHostNotFound) Code() int {
	return 404
}

func (o *DeleteHostNotFound) Error() string {
	return fmt.Sprintf("[DELETE /host/{hostId}][%d] deleteHostNotFound ", 404)
}

func (o *DeleteHostNotFound) String() string {
	return fmt.Sprintf("[DELETE /host/{hostId}][%d] deleteHostNotFound ", 404)
}

func (o *DeleteHostNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteHostConflict creates a DeleteHostConflict with default headers values
func NewDeleteHostConflict() *DeleteHostConflict {
	return &DeleteHostConflict{}
}

/*
DeleteHostConflict describes a response with status code 409, with default header values.

The host is not empty or still being referenced.
*/
type DeleteHostConflict struct {
}

// IsSuccess returns true when this delete host conflict response has a 2xx status code
func (o *DeleteHostConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete host conflict response has a 3xx status code
func (o *DeleteHostConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete host conflict response has a 4xx status code
func (o *DeleteHostConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete host conflict response has a 5xx status code
func (o *DeleteHostConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this delete host conflict response a status code equal to that given
func (o *DeleteHostConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the delete host conflict response
func (o *DeleteHostConflict) Code() int {
	return 409
}

func (o *DeleteHostConflict) Error() string {
	return fmt.Sprintf("[DELETE /host/{hostId}][%d] deleteHostConflict ", 409)
}

func (o *DeleteHostConflict) String() string {
	return fmt.Sprintf("[DELETE /host/{hostId}][%d] deleteHostConflict ", 409)
}

func (o *DeleteHostConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteHostInternalServerError creates a DeleteHostInternalServerError with default headers values
func NewDeleteHostInternalServerError() *DeleteHostInternalServerError {
	return &DeleteHostInternalServerError{}
}

/*
DeleteHostInternalServerError describes a response with status code 500, with default header values.

Unable to disconnect from host's libvirt.
*/
type DeleteHostInternalServerError struct {
}

// IsSuccess returns true when this delete host internal server error response has a 2xx status code
func (o *DeleteHostInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete host internal server error response has a 3xx status code
func (o *DeleteHostInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete host internal server error response has a 4xx status code
func (o *DeleteHostInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete host internal server error response has a 5xx status code
func (o *DeleteHostInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete host internal server error response a status code equal to that given
func (o *DeleteHostInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete host internal server error response
func (o *DeleteHostInternalServerError) Code() int {
	return 500
}

func (o *DeleteHostInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /host/{hostId}][%d] deleteHostInternalServerError ", 500)
}

func (o *DeleteHostInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /host/{hostId}][%d] deleteHostInternalServerError ", 500)
}

func (o *DeleteHostInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
