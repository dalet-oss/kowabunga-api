// Code generated by go-swagger; DO NOT EDIT.

package pool

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeletePoolReader is a Reader for the DeletePool structure.
type DeletePoolReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeletePoolReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeletePoolOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewDeletePoolNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewDeletePoolConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeletePoolInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /pool/{poolId}] DeletePool", response, response.Code())
	}
}

// NewDeletePoolOK creates a DeletePoolOK with default headers values
func NewDeletePoolOK() *DeletePoolOK {
	return &DeletePoolOK{}
}

/*
DeletePoolOK describes a response with status code 200, with default header values.

The pool has been successfully removed.
*/
type DeletePoolOK struct {
}

// IsSuccess returns true when this delete pool o k response has a 2xx status code
func (o *DeletePoolOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete pool o k response has a 3xx status code
func (o *DeletePoolOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete pool o k response has a 4xx status code
func (o *DeletePoolOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete pool o k response has a 5xx status code
func (o *DeletePoolOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete pool o k response a status code equal to that given
func (o *DeletePoolOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete pool o k response
func (o *DeletePoolOK) Code() int {
	return 200
}

func (o *DeletePoolOK) Error() string {
	return fmt.Sprintf("[DELETE /pool/{poolId}][%d] deletePoolOK ", 200)
}

func (o *DeletePoolOK) String() string {
	return fmt.Sprintf("[DELETE /pool/{poolId}][%d] deletePoolOK ", 200)
}

func (o *DeletePoolOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeletePoolNotFound creates a DeletePoolNotFound with default headers values
func NewDeletePoolNotFound() *DeletePoolNotFound {
	return &DeletePoolNotFound{}
}

/*
DeletePoolNotFound describes a response with status code 404, with default header values.

Invalid pool ID was provided.
*/
type DeletePoolNotFound struct {
}

// IsSuccess returns true when this delete pool not found response has a 2xx status code
func (o *DeletePoolNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete pool not found response has a 3xx status code
func (o *DeletePoolNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete pool not found response has a 4xx status code
func (o *DeletePoolNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete pool not found response has a 5xx status code
func (o *DeletePoolNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete pool not found response a status code equal to that given
func (o *DeletePoolNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete pool not found response
func (o *DeletePoolNotFound) Code() int {
	return 404
}

func (o *DeletePoolNotFound) Error() string {
	return fmt.Sprintf("[DELETE /pool/{poolId}][%d] deletePoolNotFound ", 404)
}

func (o *DeletePoolNotFound) String() string {
	return fmt.Sprintf("[DELETE /pool/{poolId}][%d] deletePoolNotFound ", 404)
}

func (o *DeletePoolNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeletePoolConflict creates a DeletePoolConflict with default headers values
func NewDeletePoolConflict() *DeletePoolConflict {
	return &DeletePoolConflict{}
}

/*
DeletePoolConflict describes a response with status code 409, with default header values.

The pool is not empty or still being referenced.
*/
type DeletePoolConflict struct {
}

// IsSuccess returns true when this delete pool conflict response has a 2xx status code
func (o *DeletePoolConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete pool conflict response has a 3xx status code
func (o *DeletePoolConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete pool conflict response has a 4xx status code
func (o *DeletePoolConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete pool conflict response has a 5xx status code
func (o *DeletePoolConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this delete pool conflict response a status code equal to that given
func (o *DeletePoolConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the delete pool conflict response
func (o *DeletePoolConflict) Code() int {
	return 409
}

func (o *DeletePoolConflict) Error() string {
	return fmt.Sprintf("[DELETE /pool/{poolId}][%d] deletePoolConflict ", 409)
}

func (o *DeletePoolConflict) String() string {
	return fmt.Sprintf("[DELETE /pool/{poolId}][%d] deletePoolConflict ", 409)
}

func (o *DeletePoolConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeletePoolInternalServerError creates a DeletePoolInternalServerError with default headers values
func NewDeletePoolInternalServerError() *DeletePoolInternalServerError {
	return &DeletePoolInternalServerError{}
}

/*
DeletePoolInternalServerError describes a response with status code 500, with default header values.

Unable to delete pool.
*/
type DeletePoolInternalServerError struct {
}

// IsSuccess returns true when this delete pool internal server error response has a 2xx status code
func (o *DeletePoolInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete pool internal server error response has a 3xx status code
func (o *DeletePoolInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete pool internal server error response has a 4xx status code
func (o *DeletePoolInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete pool internal server error response has a 5xx status code
func (o *DeletePoolInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete pool internal server error response a status code equal to that given
func (o *DeletePoolInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete pool internal server error response
func (o *DeletePoolInternalServerError) Code() int {
	return 500
}

func (o *DeletePoolInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /pool/{poolId}][%d] deletePoolInternalServerError ", 500)
}

func (o *DeletePoolInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /pool/{poolId}][%d] deletePoolInternalServerError ", 500)
}

func (o *DeletePoolInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
