// Code generated by go-swagger; DO NOT EDIT.

package pool

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/dalet-oss/kowabunga-api/models"
)

// UpdatePoolReader is a Reader for the UpdatePool structure.
type UpdatePoolReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdatePoolReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdatePoolOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdatePoolBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdatePoolNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /pool/{poolId}] UpdatePool", response, response.Code())
	}
}

// NewUpdatePoolOK creates a UpdatePoolOK with default headers values
func NewUpdatePoolOK() *UpdatePoolOK {
	return &UpdatePoolOK{}
}

/*
UpdatePoolOK describes a response with status code 200, with default header values.

Returns the updated pool object.
*/
type UpdatePoolOK struct {
	Payload *models.StoragePool
}

// IsSuccess returns true when this update pool o k response has a 2xx status code
func (o *UpdatePoolOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update pool o k response has a 3xx status code
func (o *UpdatePoolOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update pool o k response has a 4xx status code
func (o *UpdatePoolOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update pool o k response has a 5xx status code
func (o *UpdatePoolOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update pool o k response a status code equal to that given
func (o *UpdatePoolOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update pool o k response
func (o *UpdatePoolOK) Code() int {
	return 200
}

func (o *UpdatePoolOK) Error() string {
	return fmt.Sprintf("[PUT /pool/{poolId}][%d] updatePoolOK  %+v", 200, o.Payload)
}

func (o *UpdatePoolOK) String() string {
	return fmt.Sprintf("[PUT /pool/{poolId}][%d] updatePoolOK  %+v", 200, o.Payload)
}

func (o *UpdatePoolOK) GetPayload() *models.StoragePool {
	return o.Payload
}

func (o *UpdatePoolOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StoragePool)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePoolBadRequest creates a UpdatePoolBadRequest with default headers values
func NewUpdatePoolBadRequest() *UpdatePoolBadRequest {
	return &UpdatePoolBadRequest{}
}

/*
UpdatePoolBadRequest describes a response with status code 400, with default header values.

Bad parameters were provided.
*/
type UpdatePoolBadRequest struct {
}

// IsSuccess returns true when this update pool bad request response has a 2xx status code
func (o *UpdatePoolBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update pool bad request response has a 3xx status code
func (o *UpdatePoolBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update pool bad request response has a 4xx status code
func (o *UpdatePoolBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update pool bad request response has a 5xx status code
func (o *UpdatePoolBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update pool bad request response a status code equal to that given
func (o *UpdatePoolBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update pool bad request response
func (o *UpdatePoolBadRequest) Code() int {
	return 400
}

func (o *UpdatePoolBadRequest) Error() string {
	return fmt.Sprintf("[PUT /pool/{poolId}][%d] updatePoolBadRequest ", 400)
}

func (o *UpdatePoolBadRequest) String() string {
	return fmt.Sprintf("[PUT /pool/{poolId}][%d] updatePoolBadRequest ", 400)
}

func (o *UpdatePoolBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdatePoolNotFound creates a UpdatePoolNotFound with default headers values
func NewUpdatePoolNotFound() *UpdatePoolNotFound {
	return &UpdatePoolNotFound{}
}

/*
UpdatePoolNotFound describes a response with status code 404, with default header values.

Invalid pool ID was provided.
*/
type UpdatePoolNotFound struct {
}

// IsSuccess returns true when this update pool not found response has a 2xx status code
func (o *UpdatePoolNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update pool not found response has a 3xx status code
func (o *UpdatePoolNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update pool not found response has a 4xx status code
func (o *UpdatePoolNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update pool not found response has a 5xx status code
func (o *UpdatePoolNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update pool not found response a status code equal to that given
func (o *UpdatePoolNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update pool not found response
func (o *UpdatePoolNotFound) Code() int {
	return 404
}

func (o *UpdatePoolNotFound) Error() string {
	return fmt.Sprintf("[PUT /pool/{poolId}][%d] updatePoolNotFound ", 404)
}

func (o *UpdatePoolNotFound) String() string {
	return fmt.Sprintf("[PUT /pool/{poolId}][%d] updatePoolNotFound ", 404)
}

func (o *UpdatePoolNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
