// Code generated by go-swagger; DO NOT EDIT.

package volume

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/dalet-oss/kowabunga-api/models"
)

// UpdateVolumeReader is a Reader for the UpdateVolume structure.
type UpdateVolumeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateVolumeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateVolumeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateVolumeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateVolumeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateVolumeOK creates a UpdateVolumeOK with default headers values
func NewUpdateVolumeOK() *UpdateVolumeOK {
	return &UpdateVolumeOK{}
}

/*
UpdateVolumeOK describes a response with status code 200, with default header values.

Returns the updated storage volume object.
*/
type UpdateVolumeOK struct {
	Payload *models.Volume
}

// IsSuccess returns true when this update volume o k response has a 2xx status code
func (o *UpdateVolumeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update volume o k response has a 3xx status code
func (o *UpdateVolumeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update volume o k response has a 4xx status code
func (o *UpdateVolumeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update volume o k response has a 5xx status code
func (o *UpdateVolumeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update volume o k response a status code equal to that given
func (o *UpdateVolumeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update volume o k response
func (o *UpdateVolumeOK) Code() int {
	return 200
}

func (o *UpdateVolumeOK) Error() string {
	return fmt.Sprintf("[PUT /volume/{volumeId}][%d] updateVolumeOK  %+v", 200, o.Payload)
}

func (o *UpdateVolumeOK) String() string {
	return fmt.Sprintf("[PUT /volume/{volumeId}][%d] updateVolumeOK  %+v", 200, o.Payload)
}

func (o *UpdateVolumeOK) GetPayload() *models.Volume {
	return o.Payload
}

func (o *UpdateVolumeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Volume)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVolumeBadRequest creates a UpdateVolumeBadRequest with default headers values
func NewUpdateVolumeBadRequest() *UpdateVolumeBadRequest {
	return &UpdateVolumeBadRequest{}
}

/*
UpdateVolumeBadRequest describes a response with status code 400, with default header values.

Bad parameters were provided.
*/
type UpdateVolumeBadRequest struct {
}

// IsSuccess returns true when this update volume bad request response has a 2xx status code
func (o *UpdateVolumeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update volume bad request response has a 3xx status code
func (o *UpdateVolumeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update volume bad request response has a 4xx status code
func (o *UpdateVolumeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update volume bad request response has a 5xx status code
func (o *UpdateVolumeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update volume bad request response a status code equal to that given
func (o *UpdateVolumeBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update volume bad request response
func (o *UpdateVolumeBadRequest) Code() int {
	return 400
}

func (o *UpdateVolumeBadRequest) Error() string {
	return fmt.Sprintf("[PUT /volume/{volumeId}][%d] updateVolumeBadRequest ", 400)
}

func (o *UpdateVolumeBadRequest) String() string {
	return fmt.Sprintf("[PUT /volume/{volumeId}][%d] updateVolumeBadRequest ", 400)
}

func (o *UpdateVolumeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateVolumeNotFound creates a UpdateVolumeNotFound with default headers values
func NewUpdateVolumeNotFound() *UpdateVolumeNotFound {
	return &UpdateVolumeNotFound{}
}

/*
UpdateVolumeNotFound describes a response with status code 404, with default header values.

Invalid storage volume ID was provided.
*/
type UpdateVolumeNotFound struct {
}

// IsSuccess returns true when this update volume not found response has a 2xx status code
func (o *UpdateVolumeNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update volume not found response has a 3xx status code
func (o *UpdateVolumeNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update volume not found response has a 4xx status code
func (o *UpdateVolumeNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update volume not found response has a 5xx status code
func (o *UpdateVolumeNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update volume not found response a status code equal to that given
func (o *UpdateVolumeNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update volume not found response
func (o *UpdateVolumeNotFound) Code() int {
	return 404
}

func (o *UpdateVolumeNotFound) Error() string {
	return fmt.Sprintf("[PUT /volume/{volumeId}][%d] updateVolumeNotFound ", 404)
}

func (o *UpdateVolumeNotFound) String() string {
	return fmt.Sprintf("[PUT /volume/{volumeId}][%d] updateVolumeNotFound ", 404)
}

func (o *UpdateVolumeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
