// Code generated by go-swagger; DO NOT EDIT.

package volume

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteVolumeReader is a Reader for the DeleteVolume structure.
type DeleteVolumeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteVolumeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteVolumeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewDeleteVolumeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewDeleteVolumeConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteVolumeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /volume/{volumeId}] DeleteVolume", response, response.Code())
	}
}

// NewDeleteVolumeOK creates a DeleteVolumeOK with default headers values
func NewDeleteVolumeOK() *DeleteVolumeOK {
	return &DeleteVolumeOK{}
}

/*
DeleteVolumeOK describes a response with status code 200, with default header values.

The storage volume has been successfully removed.
*/
type DeleteVolumeOK struct {
}

// IsSuccess returns true when this delete volume o k response has a 2xx status code
func (o *DeleteVolumeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete volume o k response has a 3xx status code
func (o *DeleteVolumeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete volume o k response has a 4xx status code
func (o *DeleteVolumeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete volume o k response has a 5xx status code
func (o *DeleteVolumeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete volume o k response a status code equal to that given
func (o *DeleteVolumeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete volume o k response
func (o *DeleteVolumeOK) Code() int {
	return 200
}

func (o *DeleteVolumeOK) Error() string {
	return fmt.Sprintf("[DELETE /volume/{volumeId}][%d] deleteVolumeOK ", 200)
}

func (o *DeleteVolumeOK) String() string {
	return fmt.Sprintf("[DELETE /volume/{volumeId}][%d] deleteVolumeOK ", 200)
}

func (o *DeleteVolumeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteVolumeNotFound creates a DeleteVolumeNotFound with default headers values
func NewDeleteVolumeNotFound() *DeleteVolumeNotFound {
	return &DeleteVolumeNotFound{}
}

/*
DeleteVolumeNotFound describes a response with status code 404, with default header values.

Invalid storage volume ID was provided.
*/
type DeleteVolumeNotFound struct {
}

// IsSuccess returns true when this delete volume not found response has a 2xx status code
func (o *DeleteVolumeNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete volume not found response has a 3xx status code
func (o *DeleteVolumeNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete volume not found response has a 4xx status code
func (o *DeleteVolumeNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete volume not found response has a 5xx status code
func (o *DeleteVolumeNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete volume not found response a status code equal to that given
func (o *DeleteVolumeNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete volume not found response
func (o *DeleteVolumeNotFound) Code() int {
	return 404
}

func (o *DeleteVolumeNotFound) Error() string {
	return fmt.Sprintf("[DELETE /volume/{volumeId}][%d] deleteVolumeNotFound ", 404)
}

func (o *DeleteVolumeNotFound) String() string {
	return fmt.Sprintf("[DELETE /volume/{volumeId}][%d] deleteVolumeNotFound ", 404)
}

func (o *DeleteVolumeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteVolumeConflict creates a DeleteVolumeConflict with default headers values
func NewDeleteVolumeConflict() *DeleteVolumeConflict {
	return &DeleteVolumeConflict{}
}

/*
DeleteVolumeConflict describes a response with status code 409, with default header values.

The storage volume is not empty or still being referenced.
*/
type DeleteVolumeConflict struct {
}

// IsSuccess returns true when this delete volume conflict response has a 2xx status code
func (o *DeleteVolumeConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete volume conflict response has a 3xx status code
func (o *DeleteVolumeConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete volume conflict response has a 4xx status code
func (o *DeleteVolumeConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete volume conflict response has a 5xx status code
func (o *DeleteVolumeConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this delete volume conflict response a status code equal to that given
func (o *DeleteVolumeConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the delete volume conflict response
func (o *DeleteVolumeConflict) Code() int {
	return 409
}

func (o *DeleteVolumeConflict) Error() string {
	return fmt.Sprintf("[DELETE /volume/{volumeId}][%d] deleteVolumeConflict ", 409)
}

func (o *DeleteVolumeConflict) String() string {
	return fmt.Sprintf("[DELETE /volume/{volumeId}][%d] deleteVolumeConflict ", 409)
}

func (o *DeleteVolumeConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteVolumeInternalServerError creates a DeleteVolumeInternalServerError with default headers values
func NewDeleteVolumeInternalServerError() *DeleteVolumeInternalServerError {
	return &DeleteVolumeInternalServerError{}
}

/*
DeleteVolumeInternalServerError describes a response with status code 500, with default header values.

Unable to delete storage volume.
*/
type DeleteVolumeInternalServerError struct {
}

// IsSuccess returns true when this delete volume internal server error response has a 2xx status code
func (o *DeleteVolumeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete volume internal server error response has a 3xx status code
func (o *DeleteVolumeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete volume internal server error response has a 4xx status code
func (o *DeleteVolumeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete volume internal server error response has a 5xx status code
func (o *DeleteVolumeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete volume internal server error response a status code equal to that given
func (o *DeleteVolumeInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete volume internal server error response
func (o *DeleteVolumeInternalServerError) Code() int {
	return 500
}

func (o *DeleteVolumeInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /volume/{volumeId}][%d] deleteVolumeInternalServerError ", 500)
}

func (o *DeleteVolumeInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /volume/{volumeId}][%d] deleteVolumeInternalServerError ", 500)
}

func (o *DeleteVolumeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
