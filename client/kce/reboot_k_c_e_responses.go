// Code generated by go-swagger; DO NOT EDIT.

package kce

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// RebootKCEReader is a Reader for the RebootKCE structure.
type RebootKCEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RebootKCEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRebootKCEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewRebootKCENotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRebootKCEInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRebootKCEOK creates a RebootKCEOK with default headers values
func NewRebootKCEOK() *RebootKCEOK {
	return &RebootKCEOK{}
}

/*
RebootKCEOK describes a response with status code 200, with default header values.

The KCE virtual machine has been rebooted successfully.
*/
type RebootKCEOK struct {
}

// IsSuccess returns true when this reboot k c e o k response has a 2xx status code
func (o *RebootKCEOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this reboot k c e o k response has a 3xx status code
func (o *RebootKCEOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reboot k c e o k response has a 4xx status code
func (o *RebootKCEOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this reboot k c e o k response has a 5xx status code
func (o *RebootKCEOK) IsServerError() bool {
	return false
}

// IsCode returns true when this reboot k c e o k response a status code equal to that given
func (o *RebootKCEOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the reboot k c e o k response
func (o *RebootKCEOK) Code() int {
	return 200
}

func (o *RebootKCEOK) Error() string {
	return fmt.Sprintf("[POST /kce/{kceId}/reboot][%d] rebootKCEOK ", 200)
}

func (o *RebootKCEOK) String() string {
	return fmt.Sprintf("[POST /kce/{kceId}/reboot][%d] rebootKCEOK ", 200)
}

func (o *RebootKCEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRebootKCENotFound creates a RebootKCENotFound with default headers values
func NewRebootKCENotFound() *RebootKCENotFound {
	return &RebootKCENotFound{}
}

/*
RebootKCENotFound describes a response with status code 404, with default header values.

Invalid KCE ID was provided.
*/
type RebootKCENotFound struct {
}

// IsSuccess returns true when this reboot k c e not found response has a 2xx status code
func (o *RebootKCENotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this reboot k c e not found response has a 3xx status code
func (o *RebootKCENotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reboot k c e not found response has a 4xx status code
func (o *RebootKCENotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this reboot k c e not found response has a 5xx status code
func (o *RebootKCENotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this reboot k c e not found response a status code equal to that given
func (o *RebootKCENotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the reboot k c e not found response
func (o *RebootKCENotFound) Code() int {
	return 404
}

func (o *RebootKCENotFound) Error() string {
	return fmt.Sprintf("[POST /kce/{kceId}/reboot][%d] rebootKCENotFound ", 404)
}

func (o *RebootKCENotFound) String() string {
	return fmt.Sprintf("[POST /kce/{kceId}/reboot][%d] rebootKCENotFound ", 404)
}

func (o *RebootKCENotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRebootKCEInternalServerError creates a RebootKCEInternalServerError with default headers values
func NewRebootKCEInternalServerError() *RebootKCEInternalServerError {
	return &RebootKCEInternalServerError{}
}

/*
RebootKCEInternalServerError describes a response with status code 500, with default header values.

An error occurred when trying to reboot the KCE virtual machine.
*/
type RebootKCEInternalServerError struct {
}

// IsSuccess returns true when this reboot k c e internal server error response has a 2xx status code
func (o *RebootKCEInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this reboot k c e internal server error response has a 3xx status code
func (o *RebootKCEInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reboot k c e internal server error response has a 4xx status code
func (o *RebootKCEInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this reboot k c e internal server error response has a 5xx status code
func (o *RebootKCEInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this reboot k c e internal server error response a status code equal to that given
func (o *RebootKCEInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the reboot k c e internal server error response
func (o *RebootKCEInternalServerError) Code() int {
	return 500
}

func (o *RebootKCEInternalServerError) Error() string {
	return fmt.Sprintf("[POST /kce/{kceId}/reboot][%d] rebootKCEInternalServerError ", 500)
}

func (o *RebootKCEInternalServerError) String() string {
	return fmt.Sprintf("[POST /kce/{kceId}/reboot][%d] rebootKCEInternalServerError ", 500)
}

func (o *RebootKCEInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
