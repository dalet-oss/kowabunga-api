// Code generated by go-swagger; DO NOT EDIT.

package kce

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/dalet-oss/kowabunga-api/models"
)

// GetKCEReader is a Reader for the GetKCE structure.
type GetKCEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetKCEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetKCEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetKCENotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /kce/{kceId}] GetKCE", response, response.Code())
	}
}

// NewGetKCEOK creates a GetKCEOK with default headers values
func NewGetKCEOK() *GetKCEOK {
	return &GetKCEOK{}
}

/*
GetKCEOK describes a response with status code 200, with default header values.

Returns the KCE virtual machine object.
*/
type GetKCEOK struct {
	Payload *models.KCE
}

// IsSuccess returns true when this get k c e o k response has a 2xx status code
func (o *GetKCEOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get k c e o k response has a 3xx status code
func (o *GetKCEOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get k c e o k response has a 4xx status code
func (o *GetKCEOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get k c e o k response has a 5xx status code
func (o *GetKCEOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get k c e o k response a status code equal to that given
func (o *GetKCEOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get k c e o k response
func (o *GetKCEOK) Code() int {
	return 200
}

func (o *GetKCEOK) Error() string {
	return fmt.Sprintf("[GET /kce/{kceId}][%d] getKCEOK  %+v", 200, o.Payload)
}

func (o *GetKCEOK) String() string {
	return fmt.Sprintf("[GET /kce/{kceId}][%d] getKCEOK  %+v", 200, o.Payload)
}

func (o *GetKCEOK) GetPayload() *models.KCE {
	return o.Payload
}

func (o *GetKCEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.KCE)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKCENotFound creates a GetKCENotFound with default headers values
func NewGetKCENotFound() *GetKCENotFound {
	return &GetKCENotFound{}
}

/*
GetKCENotFound describes a response with status code 404, with default header values.

Invalid KCE ID was provided.
*/
type GetKCENotFound struct {
}

// IsSuccess returns true when this get k c e not found response has a 2xx status code
func (o *GetKCENotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get k c e not found response has a 3xx status code
func (o *GetKCENotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get k c e not found response has a 4xx status code
func (o *GetKCENotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get k c e not found response has a 5xx status code
func (o *GetKCENotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get k c e not found response a status code equal to that given
func (o *GetKCENotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get k c e not found response
func (o *GetKCENotFound) Code() int {
	return 404
}

func (o *GetKCENotFound) Error() string {
	return fmt.Sprintf("[GET /kce/{kceId}][%d] getKCENotFound ", 404)
}

func (o *GetKCENotFound) String() string {
	return fmt.Sprintf("[GET /kce/{kceId}][%d] getKCENotFound ", 404)
}

func (o *GetKCENotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
