// Code generated by go-swagger; DO NOT EDIT.

package kce

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteKCEReader is a Reader for the DeleteKCE structure.
type DeleteKCEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteKCEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteKCEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewDeleteKCENotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewDeleteKCEConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteKCEInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteKCEOK creates a DeleteKCEOK with default headers values
func NewDeleteKCEOK() *DeleteKCEOK {
	return &DeleteKCEOK{}
}

/*
DeleteKCEOK describes a response with status code 200, with default header values.

The KCE virtual machine has been successfully removed.
*/
type DeleteKCEOK struct {
}

// IsSuccess returns true when this delete k c e o k response has a 2xx status code
func (o *DeleteKCEOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete k c e o k response has a 3xx status code
func (o *DeleteKCEOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete k c e o k response has a 4xx status code
func (o *DeleteKCEOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete k c e o k response has a 5xx status code
func (o *DeleteKCEOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete k c e o k response a status code equal to that given
func (o *DeleteKCEOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete k c e o k response
func (o *DeleteKCEOK) Code() int {
	return 200
}

func (o *DeleteKCEOK) Error() string {
	return fmt.Sprintf("[DELETE /kce/{kceId}][%d] deleteKCEOK ", 200)
}

func (o *DeleteKCEOK) String() string {
	return fmt.Sprintf("[DELETE /kce/{kceId}][%d] deleteKCEOK ", 200)
}

func (o *DeleteKCEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteKCENotFound creates a DeleteKCENotFound with default headers values
func NewDeleteKCENotFound() *DeleteKCENotFound {
	return &DeleteKCENotFound{}
}

/*
DeleteKCENotFound describes a response with status code 404, with default header values.

Invalid KCE ID was provided.
*/
type DeleteKCENotFound struct {
}

// IsSuccess returns true when this delete k c e not found response has a 2xx status code
func (o *DeleteKCENotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete k c e not found response has a 3xx status code
func (o *DeleteKCENotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete k c e not found response has a 4xx status code
func (o *DeleteKCENotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete k c e not found response has a 5xx status code
func (o *DeleteKCENotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete k c e not found response a status code equal to that given
func (o *DeleteKCENotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete k c e not found response
func (o *DeleteKCENotFound) Code() int {
	return 404
}

func (o *DeleteKCENotFound) Error() string {
	return fmt.Sprintf("[DELETE /kce/{kceId}][%d] deleteKCENotFound ", 404)
}

func (o *DeleteKCENotFound) String() string {
	return fmt.Sprintf("[DELETE /kce/{kceId}][%d] deleteKCENotFound ", 404)
}

func (o *DeleteKCENotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteKCEConflict creates a DeleteKCEConflict with default headers values
func NewDeleteKCEConflict() *DeleteKCEConflict {
	return &DeleteKCEConflict{}
}

/*
DeleteKCEConflict describes a response with status code 409, with default header values.

The KCE virtual machine is not empty or still being referenced.
*/
type DeleteKCEConflict struct {
}

// IsSuccess returns true when this delete k c e conflict response has a 2xx status code
func (o *DeleteKCEConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete k c e conflict response has a 3xx status code
func (o *DeleteKCEConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete k c e conflict response has a 4xx status code
func (o *DeleteKCEConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete k c e conflict response has a 5xx status code
func (o *DeleteKCEConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this delete k c e conflict response a status code equal to that given
func (o *DeleteKCEConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the delete k c e conflict response
func (o *DeleteKCEConflict) Code() int {
	return 409
}

func (o *DeleteKCEConflict) Error() string {
	return fmt.Sprintf("[DELETE /kce/{kceId}][%d] deleteKCEConflict ", 409)
}

func (o *DeleteKCEConflict) String() string {
	return fmt.Sprintf("[DELETE /kce/{kceId}][%d] deleteKCEConflict ", 409)
}

func (o *DeleteKCEConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteKCEInternalServerError creates a DeleteKCEInternalServerError with default headers values
func NewDeleteKCEInternalServerError() *DeleteKCEInternalServerError {
	return &DeleteKCEInternalServerError{}
}

/*
DeleteKCEInternalServerError describes a response with status code 500, with default header values.

Unable to delete KCE virtual machine.
*/
type DeleteKCEInternalServerError struct {
}

// IsSuccess returns true when this delete k c e internal server error response has a 2xx status code
func (o *DeleteKCEInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete k c e internal server error response has a 3xx status code
func (o *DeleteKCEInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete k c e internal server error response has a 4xx status code
func (o *DeleteKCEInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete k c e internal server error response has a 5xx status code
func (o *DeleteKCEInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete k c e internal server error response a status code equal to that given
func (o *DeleteKCEInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete k c e internal server error response
func (o *DeleteKCEInternalServerError) Code() int {
	return 500
}

func (o *DeleteKCEInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /kce/{kceId}][%d] deleteKCEInternalServerError ", 500)
}

func (o *DeleteKCEInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /kce/{kceId}][%d] deleteKCEInternalServerError ", 500)
}

func (o *DeleteKCEInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
