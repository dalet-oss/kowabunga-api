// Code generated by go-swagger; DO NOT EDIT.

package kce

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// StartKCEReader is a Reader for the StartKCE structure.
type StartKCEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StartKCEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStartKCEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewStartKCENotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewStartKCEInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewStartKCEOK creates a StartKCEOK with default headers values
func NewStartKCEOK() *StartKCEOK {
	return &StartKCEOK{}
}

/*
StartKCEOK describes a response with status code 200, with default header values.

The KCE virtual machine has been started successfully.
*/
type StartKCEOK struct {
}

// IsSuccess returns true when this start k c e o k response has a 2xx status code
func (o *StartKCEOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this start k c e o k response has a 3xx status code
func (o *StartKCEOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this start k c e o k response has a 4xx status code
func (o *StartKCEOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this start k c e o k response has a 5xx status code
func (o *StartKCEOK) IsServerError() bool {
	return false
}

// IsCode returns true when this start k c e o k response a status code equal to that given
func (o *StartKCEOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the start k c e o k response
func (o *StartKCEOK) Code() int {
	return 200
}

func (o *StartKCEOK) Error() string {
	return fmt.Sprintf("[POST /kce/{kceId}/start][%d] startKCEOK ", 200)
}

func (o *StartKCEOK) String() string {
	return fmt.Sprintf("[POST /kce/{kceId}/start][%d] startKCEOK ", 200)
}

func (o *StartKCEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStartKCENotFound creates a StartKCENotFound with default headers values
func NewStartKCENotFound() *StartKCENotFound {
	return &StartKCENotFound{}
}

/*
StartKCENotFound describes a response with status code 404, with default header values.

Invalid KCE ID was provided.
*/
type StartKCENotFound struct {
}

// IsSuccess returns true when this start k c e not found response has a 2xx status code
func (o *StartKCENotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this start k c e not found response has a 3xx status code
func (o *StartKCENotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this start k c e not found response has a 4xx status code
func (o *StartKCENotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this start k c e not found response has a 5xx status code
func (o *StartKCENotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this start k c e not found response a status code equal to that given
func (o *StartKCENotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the start k c e not found response
func (o *StartKCENotFound) Code() int {
	return 404
}

func (o *StartKCENotFound) Error() string {
	return fmt.Sprintf("[POST /kce/{kceId}/start][%d] startKCENotFound ", 404)
}

func (o *StartKCENotFound) String() string {
	return fmt.Sprintf("[POST /kce/{kceId}/start][%d] startKCENotFound ", 404)
}

func (o *StartKCENotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStartKCEInternalServerError creates a StartKCEInternalServerError with default headers values
func NewStartKCEInternalServerError() *StartKCEInternalServerError {
	return &StartKCEInternalServerError{}
}

/*
StartKCEInternalServerError describes a response with status code 500, with default header values.

An error occurred when trying to start the KCE virtual machine.
*/
type StartKCEInternalServerError struct {
}

// IsSuccess returns true when this start k c e internal server error response has a 2xx status code
func (o *StartKCEInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this start k c e internal server error response has a 3xx status code
func (o *StartKCEInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this start k c e internal server error response has a 4xx status code
func (o *StartKCEInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this start k c e internal server error response has a 5xx status code
func (o *StartKCEInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this start k c e internal server error response a status code equal to that given
func (o *StartKCEInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the start k c e internal server error response
func (o *StartKCEInternalServerError) Code() int {
	return 500
}

func (o *StartKCEInternalServerError) Error() string {
	return fmt.Sprintf("[POST /kce/{kceId}/start][%d] startKCEInternalServerError ", 500)
}

func (o *StartKCEInternalServerError) String() string {
	return fmt.Sprintf("[POST /kce/{kceId}/start][%d] startKCEInternalServerError ", 500)
}

func (o *StartKCEInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
