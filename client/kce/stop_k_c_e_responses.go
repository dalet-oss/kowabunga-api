// Code generated by go-swagger; DO NOT EDIT.

package kce

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// StopKCEReader is a Reader for the StopKCE structure.
type StopKCEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StopKCEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStopKCEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewStopKCENotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewStopKCEInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewStopKCEOK creates a StopKCEOK with default headers values
func NewStopKCEOK() *StopKCEOK {
	return &StopKCEOK{}
}

/*
StopKCEOK describes a response with status code 200, with default header values.

The KCE virtual machine has been stopped successfully.
*/
type StopKCEOK struct {
}

// IsSuccess returns true when this stop k c e o k response has a 2xx status code
func (o *StopKCEOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this stop k c e o k response has a 3xx status code
func (o *StopKCEOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop k c e o k response has a 4xx status code
func (o *StopKCEOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this stop k c e o k response has a 5xx status code
func (o *StopKCEOK) IsServerError() bool {
	return false
}

// IsCode returns true when this stop k c e o k response a status code equal to that given
func (o *StopKCEOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the stop k c e o k response
func (o *StopKCEOK) Code() int {
	return 200
}

func (o *StopKCEOK) Error() string {
	return fmt.Sprintf("[POST /kce/{kceId}/stop][%d] stopKCEOK ", 200)
}

func (o *StopKCEOK) String() string {
	return fmt.Sprintf("[POST /kce/{kceId}/stop][%d] stopKCEOK ", 200)
}

func (o *StopKCEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStopKCENotFound creates a StopKCENotFound with default headers values
func NewStopKCENotFound() *StopKCENotFound {
	return &StopKCENotFound{}
}

/*
StopKCENotFound describes a response with status code 404, with default header values.

Invalid KCE ID was provided.
*/
type StopKCENotFound struct {
}

// IsSuccess returns true when this stop k c e not found response has a 2xx status code
func (o *StopKCENotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop k c e not found response has a 3xx status code
func (o *StopKCENotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop k c e not found response has a 4xx status code
func (o *StopKCENotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this stop k c e not found response has a 5xx status code
func (o *StopKCENotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this stop k c e not found response a status code equal to that given
func (o *StopKCENotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the stop k c e not found response
func (o *StopKCENotFound) Code() int {
	return 404
}

func (o *StopKCENotFound) Error() string {
	return fmt.Sprintf("[POST /kce/{kceId}/stop][%d] stopKCENotFound ", 404)
}

func (o *StopKCENotFound) String() string {
	return fmt.Sprintf("[POST /kce/{kceId}/stop][%d] stopKCENotFound ", 404)
}

func (o *StopKCENotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStopKCEInternalServerError creates a StopKCEInternalServerError with default headers values
func NewStopKCEInternalServerError() *StopKCEInternalServerError {
	return &StopKCEInternalServerError{}
}

/*
StopKCEInternalServerError describes a response with status code 500, with default header values.

An error occurred when trying to stop the KCE virtual machine.
*/
type StopKCEInternalServerError struct {
}

// IsSuccess returns true when this stop k c e internal server error response has a 2xx status code
func (o *StopKCEInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop k c e internal server error response has a 3xx status code
func (o *StopKCEInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop k c e internal server error response has a 4xx status code
func (o *StopKCEInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this stop k c e internal server error response has a 5xx status code
func (o *StopKCEInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this stop k c e internal server error response a status code equal to that given
func (o *StopKCEInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the stop k c e internal server error response
func (o *StopKCEInternalServerError) Code() int {
	return 500
}

func (o *StopKCEInternalServerError) Error() string {
	return fmt.Sprintf("[POST /kce/{kceId}/stop][%d] stopKCEInternalServerError ", 500)
}

func (o *StopKCEInternalServerError) String() string {
	return fmt.Sprintf("[POST /kce/{kceId}/stop][%d] stopKCEInternalServerError ", 500)
}

func (o *StopKCEInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
