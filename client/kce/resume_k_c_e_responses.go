// Code generated by go-swagger; DO NOT EDIT.

package kce

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// ResumeKCEReader is a Reader for the ResumeKCE structure.
type ResumeKCEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ResumeKCEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewResumeKCEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewResumeKCENotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewResumeKCEInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewResumeKCEOK creates a ResumeKCEOK with default headers values
func NewResumeKCEOK() *ResumeKCEOK {
	return &ResumeKCEOK{}
}

/*
ResumeKCEOK describes a response with status code 200, with default header values.

The KCE virtual machine has been resumed successfully.
*/
type ResumeKCEOK struct {
}

// IsSuccess returns true when this resume k c e o k response has a 2xx status code
func (o *ResumeKCEOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this resume k c e o k response has a 3xx status code
func (o *ResumeKCEOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this resume k c e o k response has a 4xx status code
func (o *ResumeKCEOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this resume k c e o k response has a 5xx status code
func (o *ResumeKCEOK) IsServerError() bool {
	return false
}

// IsCode returns true when this resume k c e o k response a status code equal to that given
func (o *ResumeKCEOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the resume k c e o k response
func (o *ResumeKCEOK) Code() int {
	return 200
}

func (o *ResumeKCEOK) Error() string {
	return fmt.Sprintf("[POST /kce/{kceId}/resume][%d] resumeKCEOK ", 200)
}

func (o *ResumeKCEOK) String() string {
	return fmt.Sprintf("[POST /kce/{kceId}/resume][%d] resumeKCEOK ", 200)
}

func (o *ResumeKCEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewResumeKCENotFound creates a ResumeKCENotFound with default headers values
func NewResumeKCENotFound() *ResumeKCENotFound {
	return &ResumeKCENotFound{}
}

/*
ResumeKCENotFound describes a response with status code 404, with default header values.

Invalid KCE ID was provided.
*/
type ResumeKCENotFound struct {
}

// IsSuccess returns true when this resume k c e not found response has a 2xx status code
func (o *ResumeKCENotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this resume k c e not found response has a 3xx status code
func (o *ResumeKCENotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this resume k c e not found response has a 4xx status code
func (o *ResumeKCENotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this resume k c e not found response has a 5xx status code
func (o *ResumeKCENotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this resume k c e not found response a status code equal to that given
func (o *ResumeKCENotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the resume k c e not found response
func (o *ResumeKCENotFound) Code() int {
	return 404
}

func (o *ResumeKCENotFound) Error() string {
	return fmt.Sprintf("[POST /kce/{kceId}/resume][%d] resumeKCENotFound ", 404)
}

func (o *ResumeKCENotFound) String() string {
	return fmt.Sprintf("[POST /kce/{kceId}/resume][%d] resumeKCENotFound ", 404)
}

func (o *ResumeKCENotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewResumeKCEInternalServerError creates a ResumeKCEInternalServerError with default headers values
func NewResumeKCEInternalServerError() *ResumeKCEInternalServerError {
	return &ResumeKCEInternalServerError{}
}

/*
ResumeKCEInternalServerError describes a response with status code 500, with default header values.

An error occurred when trying to resume the KCE virtual machine.
*/
type ResumeKCEInternalServerError struct {
}

// IsSuccess returns true when this resume k c e internal server error response has a 2xx status code
func (o *ResumeKCEInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this resume k c e internal server error response has a 3xx status code
func (o *ResumeKCEInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this resume k c e internal server error response has a 4xx status code
func (o *ResumeKCEInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this resume k c e internal server error response has a 5xx status code
func (o *ResumeKCEInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this resume k c e internal server error response a status code equal to that given
func (o *ResumeKCEInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the resume k c e internal server error response
func (o *ResumeKCEInternalServerError) Code() int {
	return 500
}

func (o *ResumeKCEInternalServerError) Error() string {
	return fmt.Sprintf("[POST /kce/{kceId}/resume][%d] resumeKCEInternalServerError ", 500)
}

func (o *ResumeKCEInternalServerError) String() string {
	return fmt.Sprintf("[POST /kce/{kceId}/resume][%d] resumeKCEInternalServerError ", 500)
}

func (o *ResumeKCEInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
