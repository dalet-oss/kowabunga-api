// Code generated by go-swagger; DO NOT EDIT.

package server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Kvm Orchestrator With A BUNch of Goods Added",
    "title": "Kowabunga",
    "version": "0.2.2"
  },
  "basePath": "/api/v1",
  "paths": {
    "/healthz": {
      "get": {
        "produces": [
          "text/plain"
        ],
        "operationId": "Healthz",
        "responses": {
          "200": {
            "description": "OK message.",
            "schema": {
              "type": "string",
              "enum": [
                "OK"
              ]
            }
          }
        }
      }
    },
    "/host": {
      "get": {
        "description": "Returns the IDs of registered hosts.",
        "tags": [
          "host"
        ],
        "operationId": "GetAllHosts",
        "responses": {
          "200": {
            "description": "Returns the an array of host IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/host/{hostId}": {
      "get": {
        "description": "Returns a description of the host",
        "tags": [
          "host"
        ],
        "operationId": "GetHost",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the host to get.",
            "name": "hostId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the host object.",
            "schema": {
              "$ref": "#/definitions/Host"
            }
          },
          "404": {
            "description": "Invalid host ID was provided."
          }
        }
      },
      "put": {
        "description": "Updates a host configuration.",
        "tags": [
          "host"
        ],
        "operationId": "UpdateHost",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the host to update.",
            "name": "hostId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Host"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated host object.",
            "schema": {
              "$ref": "#/definitions/Host"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid host ID was provided."
          }
        }
      },
      "delete": {
        "description": "Deletes an existing host.",
        "tags": [
          "host"
        ],
        "operationId": "DeleteHost",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the host to delete.",
            "name": "hostId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The host has been successfully removed."
          },
          "404": {
            "description": "Invalid host ID was provided."
          },
          "409": {
            "description": "The host is not empty or still being referenced."
          },
          "500": {
            "description": "Unable to disconnect from host's libvirt."
          }
        }
      }
    },
    "/host/{hostId}/caps": {
      "get": {
        "description": "Returns the host capabilities.",
        "tags": [
          "host"
        ],
        "operationId": "GetHostCaps",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the host to query.",
            "name": "hostId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the host capabilities.",
            "schema": {
              "$ref": "#/definitions/HostCaps"
            }
          },
          "404": {
            "description": "Invalid host ID was provided."
          }
        }
      }
    },
    "/host/{hostId}/instances": {
      "get": {
        "description": "Returns the UUIDs of the virtual machines running on the host.",
        "tags": [
          "host",
          "instance"
        ],
        "operationId": "GetHostInstances",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the host to query.",
            "name": "hostId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the an array of virtual machine UUIDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Invalid host ID was provided."
          }
        }
      }
    },
    "/instance": {
      "get": {
        "description": "Returns the IDs of registered virtual machines.",
        "tags": [
          "instance"
        ],
        "operationId": "GetAllInstances",
        "responses": {
          "200": {
            "description": "Returns the an array of virtual machines UUIDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/instance/{instanceId}": {
      "get": {
        "description": "Returns the description of the virtual machine.",
        "tags": [
          "instance"
        ],
        "operationId": "GetInstance",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual machine to query.",
            "name": "instanceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the virtual machine object.",
            "schema": {
              "$ref": "#/definitions/Instance"
            }
          },
          "404": {
            "description": "Invalid instance ID was provided."
          }
        }
      }
    },
    "/instance/{instanceId}/reboot": {
      "post": {
        "description": "Perform a virtual machine software reboot.",
        "tags": [
          "instance"
        ],
        "operationId": "RebootInstance",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual machine to query.",
            "name": "instanceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The virtual machine has been rebooted successfully."
          },
          "404": {
            "description": "Invalid instance ID was provided."
          },
          "500": {
            "description": "An error occurred when trying to reboot the virtual machine."
          }
        }
      }
    },
    "/instance/{instanceId}/reset": {
      "post": {
        "description": "Perform a virtual machine hardware reset.",
        "tags": [
          "instance"
        ],
        "operationId": "ResetInstance",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual machine to query.",
            "name": "instanceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The virtual machine has been reseted successfully."
          },
          "404": {
            "description": "Invalid instance ID was provided."
          },
          "500": {
            "description": "An error occurred when trying to reset the virtual machine."
          }
        }
      }
    },
    "/instance/{instanceId}/resume": {
      "post": {
        "description": "Perform a virtual machine software PM resume.",
        "tags": [
          "instance"
        ],
        "operationId": "ResumeInstance",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual machine to query.",
            "name": "instanceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The virtual machine has been resumed successfully."
          },
          "404": {
            "description": "Invalid instance ID was provided."
          },
          "500": {
            "description": "An error occurred when trying to resume the virtual machine."
          }
        }
      }
    },
    "/instance/{instanceId}/shutdown": {
      "post": {
        "description": "Initiate a software shutdown of a virtual machine.",
        "tags": [
          "instance"
        ],
        "operationId": "ShutdownInstance",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual machine to query.",
            "name": "instanceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The virtual machine has been shut down successfully."
          },
          "404": {
            "description": "Invalid instance ID was provided."
          },
          "500": {
            "description": "An error occurred when trying to shut down the virtual machine."
          }
        }
      }
    },
    "/instance/{instanceId}/start": {
      "post": {
        "description": "Boot up a virtual machine.",
        "tags": [
          "instance"
        ],
        "operationId": "StartInstance",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual machine to query.",
            "name": "instanceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The virtual machine has been started successfully."
          },
          "404": {
            "description": "Invalid instance ID was provided."
          },
          "500": {
            "description": "An error occurred when trying to start the virtual machine."
          }
        }
      }
    },
    "/instance/{instanceId}/state": {
      "get": {
        "description": "Returns the state of the virtual machine.",
        "tags": [
          "instance"
        ],
        "operationId": "GetInstanceState",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual machine to query.",
            "name": "instanceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the virtual machine state object.",
            "schema": {
              "$ref": "#/definitions/InstanceState"
            }
          },
          "404": {
            "description": "Invalid instance ID was provided."
          }
        }
      }
    },
    "/instance/{instanceId}/stop": {
      "post": {
        "description": "Initiate a hardware stop of a virtual machine.",
        "tags": [
          "instance"
        ],
        "operationId": "StopInstance",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual machine to query.",
            "name": "instanceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The virtual machine has been stopped successfully."
          },
          "404": {
            "description": "Invalid instance ID was provided."
          },
          "500": {
            "description": "An error occurred when trying to stop the virtual machine."
          }
        }
      }
    },
    "/instance/{instanceId}/suspend": {
      "post": {
        "description": "Perform a virtual machine software PM suspend.",
        "tags": [
          "instance"
        ],
        "operationId": "SuspendInstance",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual machine to query.",
            "name": "instanceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The virtual machine has been suspended successfully."
          },
          "404": {
            "description": "Invalid instance ID was provided."
          },
          "500": {
            "description": "An error occurred when trying to suspend the virtual machine."
          }
        }
      }
    },
    "/netgw": {
      "get": {
        "description": "Returns the IDs of network gateways.",
        "tags": [
          "netgw"
        ],
        "operationId": "GetAllNetGWs",
        "responses": {
          "200": {
            "description": "Returns an array of network gateway IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/netgw/{netgwId}": {
      "get": {
        "description": "Returns a description of the network gateway",
        "tags": [
          "netgw"
        ],
        "operationId": "GetNetGW",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the network gateway to get.",
            "name": "netgwId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the network gateway object.",
            "schema": {
              "$ref": "#/definitions/NetGW"
            }
          },
          "404": {
            "description": "Invalid network gateway ID was provided."
          }
        }
      },
      "put": {
        "description": "Updates a network gateway configuration.",
        "tags": [
          "netgw"
        ],
        "operationId": "UpdateNetGW",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the network gateway to get.",
            "name": "netgwId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NetGW"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated network gateway object.",
            "schema": {
              "$ref": "#/definitions/NetGW"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid network gateway ID was provided."
          }
        }
      },
      "delete": {
        "description": "Deletes an existing network gateway.",
        "tags": [
          "netgw"
        ],
        "operationId": "DeleteNetGW",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the network gateway to get.",
            "name": "netgwId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The network gateway has been successfully removed."
          },
          "404": {
            "description": "Invalid network gateway ID was provided."
          },
          "409": {
            "description": "The network gateway is not empty or still being referenced."
          },
          "500": {
            "description": "Unable to delete network gateway."
          }
        }
      }
    },
    "/pool": {
      "get": {
        "description": "Returns the IDs of registered pools.",
        "tags": [
          "pool"
        ],
        "operationId": "GetAllPools",
        "responses": {
          "200": {
            "description": "Returns the an array of pool IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/pool/{poolId}": {
      "get": {
        "description": "Returns a description of the pool",
        "tags": [
          "pool"
        ],
        "operationId": "GetPool",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the pool to get.",
            "name": "poolId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the pool object.",
            "schema": {
              "$ref": "#/definitions/StoragePool"
            }
          },
          "404": {
            "description": "Invalid pool ID was provided."
          }
        }
      },
      "put": {
        "description": "Updates a pool configuration.",
        "tags": [
          "pool"
        ],
        "operationId": "UpdatePool",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the pool to get.",
            "name": "poolId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/StoragePool"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated pool object.",
            "schema": {
              "$ref": "#/definitions/StoragePool"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid pool ID was provided."
          }
        }
      },
      "delete": {
        "description": "Deletes an existing pool.",
        "tags": [
          "pool"
        ],
        "operationId": "DeletePool",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the pool to get.",
            "name": "poolId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The pool has been successfully removed."
          },
          "404": {
            "description": "Invalid pool ID was provided."
          },
          "409": {
            "description": "The pool is not empty or still being referenced."
          },
          "500": {
            "description": "Unable to delete pool."
          }
        }
      }
    },
    "/project": {
      "get": {
        "description": "Returns the IDs of registered projects.",
        "tags": [
          "project"
        ],
        "operationId": "GetAllProjects",
        "responses": {
          "200": {
            "description": "Returns the an array of project IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "post": {
        "description": "Creates a new project.",
        "tags": [
          "project"
        ],
        "operationId": "CreateProject",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created project object.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "409": {
            "description": "Project already exists."
          },
          "500": {
            "description": "Unable to create the requested project."
          }
        }
      }
    },
    "/project/{projectId}": {
      "get": {
        "description": "Returns a description of the project",
        "tags": [
          "project"
        ],
        "operationId": "GetProject",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the project to get.",
            "name": "projectId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the project object.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "404": {
            "description": "Invalid project ID was provided."
          }
        }
      },
      "put": {
        "description": "Updates a project configuration.",
        "tags": [
          "project"
        ],
        "operationId": "UpdateProject",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the project to update.",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated project object.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid project ID was provided."
          }
        }
      },
      "delete": {
        "description": "Deletes an existing project.",
        "tags": [
          "project"
        ],
        "operationId": "DeleteProject",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the project to delete.",
            "name": "projectId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The project has been successfully removed."
          },
          "404": {
            "description": "Invalid project ID was provided."
          },
          "409": {
            "description": "The project is not empty or still being referenced."
          },
          "500": {
            "description": "Unable to delete project."
          }
        }
      }
    },
    "/project/{projectId}/quotas": {
      "get": {
        "description": "Returns the quotas set for the project.",
        "tags": [
          "project"
        ],
        "operationId": "GetProjectQuotas",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the project to query.",
            "name": "projectId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the project resources object.",
            "schema": {
              "$ref": "#/definitions/ProjectResources"
            }
          },
          "404": {
            "description": "Invalid project ID was provided."
          }
        }
      },
      "put": {
        "description": "Updates a project's quotas.",
        "tags": [
          "project"
        ],
        "operationId": "UpdateProjectQuotas",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the project to update.",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectResources"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated project resources object.",
            "schema": {
              "$ref": "#/definitions/ProjectResources"
            }
          },
          "404": {
            "description": "Invalid project ID was provided."
          }
        }
      },
      "delete": {
        "description": "Reset project's quotas to default value.",
        "tags": [
          "project"
        ],
        "operationId": "ResetProjectQuotas",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the project to query.",
            "name": "projectId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The project quotas have been successfully reset."
          },
          "404": {
            "description": "Invalid project ID was provided."
          }
        }
      }
    },
    "/project/{projectId}/usage": {
      "get": {
        "description": "Returns the current resources usage for the project.",
        "tags": [
          "project"
        ],
        "operationId": "GetProjectUsage",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the project to query.",
            "name": "projectId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the project resources object.",
            "schema": {
              "$ref": "#/definitions/ProjectResources"
            }
          },
          "404": {
            "description": "Invalid project ID was provided."
          }
        }
      }
    },
    "/region": {
      "get": {
        "description": "Returns the IDs of registered regions.",
        "tags": [
          "region"
        ],
        "operationId": "GetAllRegions",
        "responses": {
          "200": {
            "description": "Returns the an array of region IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "post": {
        "description": "Creates a new region.",
        "tags": [
          "region"
        ],
        "operationId": "CreateRegion",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Region"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created region object.",
            "schema": {
              "$ref": "#/definitions/Region"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "409": {
            "description": "Region already exists."
          },
          "500": {
            "description": "Unable to create the region."
          }
        }
      }
    },
    "/region/{regionId}": {
      "get": {
        "description": "Returns a description of the region",
        "tags": [
          "region"
        ],
        "operationId": "GetRegion",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the region to get.",
            "name": "regionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the region object.",
            "schema": {
              "$ref": "#/definitions/Region"
            }
          },
          "404": {
            "description": "Invalid region ID was provided."
          }
        }
      },
      "put": {
        "description": "Updates a region configuration.",
        "tags": [
          "region"
        ],
        "operationId": "UpdateRegion",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the region to get.",
            "name": "regionId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Region"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated region object.",
            "schema": {
              "$ref": "#/definitions/Region"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid region ID was provided."
          }
        }
      },
      "delete": {
        "description": "Deletes an existing region.",
        "tags": [
          "region"
        ],
        "operationId": "DeleteRegion",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the region to get.",
            "name": "regionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The region has been successfully removed."
          },
          "404": {
            "description": "Invalid region ID was provided."
          },
          "409": {
            "description": "The region is not empty or still being referenced."
          },
          "500": {
            "description": "Unable to delete region."
          }
        }
      }
    },
    "/region/{regionId}/zone": {
      "post": {
        "description": "Creates a new zone.",
        "tags": [
          "region",
          "zone"
        ],
        "operationId": "CreateZone",
        "parameters": [
          {
            "type": "string",
            "description": "the ID of the associated region.",
            "name": "regionId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Zone"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created zone object.",
            "schema": {
              "$ref": "#/definitions/Zone"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid region ID was provided."
          },
          "409": {
            "description": "Zone already exists."
          },
          "500": {
            "description": "Unable to create zone."
          }
        }
      }
    },
    "/region/{regionId}/zones": {
      "get": {
        "description": "Returns the IDs of the availability zones existing in the region.",
        "tags": [
          "region",
          "zone"
        ],
        "operationId": "GetRegionZones",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the region to query.",
            "name": "regionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of availability zone IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Invalid region ID was provided."
          }
        }
      }
    },
    "/vnet": {
      "get": {
        "description": "Returns the IDs of virtual networks.",
        "tags": [
          "vnet"
        ],
        "operationId": "GetAllVNets",
        "responses": {
          "200": {
            "description": "Returns the an array of virtual network IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/vnet/{vnetId}": {
      "get": {
        "description": "Returns a description of the virtual network",
        "tags": [
          "vnet"
        ],
        "operationId": "GetVNet",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual network to get.",
            "name": "vnetId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the virtual network object.",
            "schema": {
              "$ref": "#/definitions/VNet"
            }
          },
          "404": {
            "description": "Invalid virtual network ID was provided."
          }
        }
      },
      "put": {
        "description": "Updates a virtual network configuration.",
        "tags": [
          "vnet"
        ],
        "operationId": "UpdateVNet",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual network to get.",
            "name": "vnetId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/VNet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated virtual network object.",
            "schema": {
              "$ref": "#/definitions/VNet"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid virtual network ID was provided."
          }
        }
      },
      "delete": {
        "description": "Deletes an existing virtual network.",
        "tags": [
          "vnet"
        ],
        "operationId": "DeleteVNet",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual network to get.",
            "name": "vnetId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The virtual network has been successfully removed."
          },
          "404": {
            "description": "Invalid virtual network ID was provided."
          },
          "409": {
            "description": "The virtual network is not empty or still being referenced."
          },
          "500": {
            "description": "Unable to delete virtual network."
          }
        }
      }
    },
    "/zone": {
      "get": {
        "description": "Returns the IDs of registered zones.",
        "tags": [
          "zone"
        ],
        "operationId": "GetAllZones",
        "responses": {
          "200": {
            "description": "Returns the an array of zone IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/zone/{zoneId}": {
      "get": {
        "description": "Returns a description of the zone",
        "tags": [
          "zone"
        ],
        "operationId": "GetZone",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the zone to get.",
            "name": "zoneId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the zone object.",
            "schema": {
              "$ref": "#/definitions/Zone"
            }
          },
          "404": {
            "description": "Invalid zone ID was provided."
          }
        }
      },
      "put": {
        "description": "Updates a zone configuration.",
        "tags": [
          "zone"
        ],
        "operationId": "UpdateZone",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the zone to get.",
            "name": "zoneId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Zone"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated zone object.",
            "schema": {
              "$ref": "#/definitions/Zone"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid zone ID was provided."
          }
        }
      },
      "delete": {
        "description": "Deletes an existing zone.",
        "tags": [
          "zone"
        ],
        "operationId": "DeleteZone",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the zone to get.",
            "name": "zoneId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The zone has been successfully removed."
          },
          "404": {
            "description": "Invalid zone ID was provided."
          },
          "409": {
            "description": "The zone is not empty or still being referenced."
          },
          "500": {
            "description": "Unable to delete zone."
          }
        }
      }
    },
    "/zone/{zoneId}/host": {
      "post": {
        "description": "Creates a new host.",
        "tags": [
          "zone",
          "host"
        ],
        "operationId": "CreateHost",
        "parameters": [
          {
            "type": "string",
            "description": "the ID of the associated zone.",
            "name": "zoneId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HostConfiguration"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created host object.",
            "schema": {
              "$ref": "#/definitions/Host"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid zone ID was provided."
          },
          "409": {
            "description": "Host already exists."
          },
          "500": {
            "description": "Unable to connect to host's libvirt."
          }
        }
      }
    },
    "/zone/{zoneId}/hosts": {
      "get": {
        "description": "Returns the IDs of the hosts existing in the zone.",
        "tags": [
          "zone",
          "host"
        ],
        "operationId": "GetZoneHosts",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the zone to query.",
            "name": "zoneId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of host IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Invalid zone ID was provided."
          }
        }
      }
    },
    "/zone/{zoneId}/netgw": {
      "post": {
        "description": "Creates a new network gateway.",
        "tags": [
          "zone",
          "netgw"
        ],
        "operationId": "CreateNetGW",
        "parameters": [
          {
            "type": "string",
            "description": "the ID of the associated zone.",
            "name": "zoneId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NetGW"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created network gateway object.",
            "schema": {
              "$ref": "#/definitions/NetGW"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid zone ID was provided."
          },
          "409": {
            "description": "Network gateway already exists."
          },
          "500": {
            "description": "Unable to connect to network gateway."
          }
        }
      }
    },
    "/zone/{zoneId}/netgws": {
      "get": {
        "description": "Returns the IDs of the hosts existing in the zone.",
        "tags": [
          "zone",
          "netgw"
        ],
        "operationId": "GetZoneNetGWs",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the zone to query.",
            "name": "zoneId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of network gateway IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Invalid zone ID was provided."
          }
        }
      }
    },
    "/zone/{zoneId}/pool": {
      "post": {
        "description": "Creates a new storage pool.",
        "tags": [
          "zone",
          "pool"
        ],
        "operationId": "CreatePool",
        "parameters": [
          {
            "type": "string",
            "description": "the ID of the associated zone.",
            "name": "zoneId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StoragePool"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created storage pool object.",
            "schema": {
              "$ref": "#/definitions/StoragePool"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid zone ID was provided."
          },
          "409": {
            "description": "Pool already exists."
          },
          "500": {
            "description": "Unable to create storage pool."
          }
        }
      }
    },
    "/zone/{zoneId}/pool/{poolId}/default": {
      "put": {
        "description": "Set a zone's default storage pool.",
        "tags": [
          "zone",
          "pool"
        ],
        "operationId": "UpdateZoneDefaultPool",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the zone to update.",
            "name": "zoneId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The ID of the storage pool to set as default.",
            "name": "poolId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated project resources object."
          },
          "404": {
            "description": "Invalid zone ID or storage pool ID was provided."
          },
          "500": {
            "description": "Unable to assign the requested storage pool as zone's default."
          }
        }
      }
    },
    "/zone/{zoneId}/pools": {
      "get": {
        "description": "Returns the IDs of the pools existing in the zone.",
        "tags": [
          "zone",
          "pool"
        ],
        "operationId": "GetZonePools",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the zone to query.",
            "name": "zoneId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of storage pool IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Invalid zone ID was provided."
          }
        }
      }
    },
    "/zone/{zoneId}/vnet": {
      "post": {
        "description": "Creates a new virtual network.",
        "tags": [
          "zone",
          "vnet"
        ],
        "operationId": "CreateVNet",
        "parameters": [
          {
            "type": "string",
            "description": "the ID of the associated zone.",
            "name": "zoneId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VNet"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created virtual network object.",
            "schema": {
              "$ref": "#/definitions/VNet"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid zone ID was provided."
          },
          "409": {
            "description": "Virtual network already exists."
          },
          "500": {
            "description": "Unable to create virtual network."
          }
        }
      }
    },
    "/zone/{zoneId}/vnet/{vnetId}/default": {
      "put": {
        "description": "Set a zone's default virtual network.",
        "tags": [
          "zone",
          "vnet"
        ],
        "operationId": "UpdateZoneDefaultVNet",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the zone to update.",
            "name": "zoneId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The ID of the virtual network to set as default.",
            "name": "vnetId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated project resources object."
          },
          "404": {
            "description": "Invalid zone ID or virtual network ID was provided."
          },
          "500": {
            "description": "Unable to assign the requested virtual network as zone's default."
          }
        }
      }
    },
    "/zone/{zoneId}/vnets": {
      "get": {
        "description": "Returns the IDs of the virtual networks existing in the zone.",
        "tags": [
          "zone",
          "vnet"
        ],
        "operationId": "GetZoneVNets",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the zone to query.",
            "name": "zoneId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of virtual network IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Invalid zone ID was provided."
          }
        }
      }
    }
  },
  "definitions": {
    "Disk": {
      "type": "object",
      "properties": {
        "device": {
          "description": "name of the disk block device",
          "type": "string"
        },
        "rbd": {
          "type": "object",
          "properties": {
            "host": {
              "description": "RBD pool server address",
              "type": "string"
            },
            "image": {
              "description": "disk image name on RBD pool",
              "type": "string"
            },
            "port": {
              "description": "RBD pool server port",
              "type": "integer"
            }
          }
        }
      }
    },
    "Host": {
      "type": "object",
      "properties": {
        "description": {
          "description": "The host description.",
          "type": "string"
        },
        "id": {
          "description": "The host ID (auto-generated).",
          "type": "string"
        },
        "name": {
          "description": "The host name.",
          "type": "string"
        },
        "region": {
          "description": "The host region.",
          "type": "string"
        },
        "version": {
          "description": "The host libvirt version.",
          "type": "string"
        },
        "zone": {
          "description": "The host availability-zone.",
          "type": "string"
        }
      }
    },
    "HostCaps": {
      "type": "object",
      "properties": {
        "cpu": {
          "description": "the host CPU characteristics",
          "type": "object",
          "properties": {
            "arch": {
              "description": "the host CPU architecture",
              "type": "string"
            },
            "cores": {
              "description": "the host CPU number of cores",
              "type": "integer"
            },
            "model": {
              "description": "the host CPU model",
              "type": "string"
            },
            "sockets": {
              "description": "the host CPU number of sockets",
              "type": "integer"
            },
            "threads": {
              "description": "the host CPU number of threads",
              "type": "integer"
            },
            "vendor": {
              "description": "the host CPU vendor",
              "type": "string"
            }
          }
        },
        "memory": {
          "description": "the host memory size in bytes",
          "type": "integer"
        },
        "uuid": {
          "description": "the host UUID",
          "type": "string"
        }
      }
    },
    "HostConfiguration": {
      "type": "object",
      "required": [
        "name",
        "protocol",
        "address"
      ],
      "properties": {
        "address": {
          "description": "The host libvirt's IPv4 address.",
          "type": "string"
        },
        "description": {
          "description": "The host description.",
          "type": "string"
        },
        "name": {
          "description": "The host name.",
          "type": "string"
        },
        "port": {
          "description": "The host libvirt's port.",
          "type": "integer"
        },
        "protocol": {
          "description": "The protocol to use to issue libvirt connection.",
          "type": "string",
          "enum": [
            "tcp",
            "tls"
          ]
        },
        "tls": {
          "description": "The host libvirt's TLS configuration.",
          "type": "object",
          "$ref": "#/definitions/HostConfigurationTLS"
        }
      }
    },
    "HostConfigurationTLS": {
      "type": "object",
      "required": [
        "key",
        "cert",
        "ca"
      ],
      "properties": {
        "ca": {
          "description": "The TLS certificate of authority.",
          "type": "string"
        },
        "cert": {
          "description": "The TLS client public cert.",
          "type": "string"
        },
        "key": {
          "description": "The TLS client private key.",
          "type": "string"
        }
      }
    },
    "Instance": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The instance ID  (auto-generated).",
          "type": "string"
        },
        "name": {
          "description": "the name of the Virtual Machine",
          "type": "string"
        },
        "template": {
          "description": "is the VM a template ?",
          "type": "boolean"
        },
        "topology": {
          "$ref": "#/definitions/InstanceTopology"
        },
        "vm_id": {
          "description": "the ID of the Virtual Machine",
          "type": "string"
        },
        "vm_uuid": {
          "description": "the UUID of the Virtual Machine",
          "type": "string"
        }
      }
    },
    "InstanceState": {
      "type": "object",
      "properties": {
        "reason": {
          "description": "the reason of the state of the VM",
          "type": "string"
        },
        "state": {
          "description": "the state of the VM",
          "type": "string"
        }
      }
    },
    "InstanceTopology": {
      "type": "object",
      "properties": {
        "disks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Disk"
          }
        },
        "memory": {
          "description": "the memory size of the VM in bytes",
          "type": "integer"
        },
        "nics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NIC"
          }
        },
        "vcpus": {
          "description": "the memory size of the VM in bytes",
          "type": "integer"
        }
      }
    },
    "NIC": {
      "type": "object",
      "properties": {
        "bridge": {
          "description": "name of the host's network bridge interface the interface is currently mapped to",
          "type": "string"
        },
        "mac": {
          "description": "MAC address of the interface",
          "type": "string"
        }
      }
    },
    "NetGW": {
      "type": "object",
      "required": [
        "name",
        "address",
        "token"
      ],
      "properties": {
        "address": {
          "description": "The network gateway IPv4 address.",
          "type": "string"
        },
        "description": {
          "description": "The network gateway description.",
          "type": "string"
        },
        "id": {
          "description": "The network gateway ID (auto-generated).",
          "type": "string"
        },
        "name": {
          "description": "The network gateway name.",
          "type": "string"
        },
        "port": {
          "description": "The network gateway service port (default to 8080).",
          "type": "integer",
          "default": 8080
        },
        "token": {
          "description": "The network gateway admin API token.",
          "type": "string"
        }
      }
    },
    "Project": {
      "type": "object",
      "properties": {
        "description": {
          "description": "The project description.",
          "type": "string"
        },
        "id": {
          "description": "The project ID (auto-generated).",
          "type": "string"
        },
        "name": {
          "description": "The project short name.",
          "type": "string"
        }
      }
    },
    "ProjectResources": {
      "description": "The global project quotas (0 for unlimited).",
      "type": "object",
      "properties": {
        "instances": {
          "description": "the maximum number of instances allowed to be spawned.",
          "type": "integer",
          "format": "uint16"
        },
        "memory": {
          "description": "the maximum total memory (in bytes) allowed to be consumed by sum of all instances.",
          "type": "integer",
          "format": "uint64"
        },
        "storage": {
          "description": "the maximum total disk capacity allowed to be consumed by sum of all instances.",
          "type": "integer",
          "format": "uint64"
        },
        "vcpus": {
          "description": "the maximum total number of vCPUs allowed to be consumed by sum of all instances.",
          "type": "integer",
          "format": "uint16"
        }
      }
    },
    "Region": {
      "type": "object",
      "properties": {
        "description": {
          "description": "The region description.",
          "type": "string"
        },
        "id": {
          "description": "The region ID (auto-generated).",
          "type": "string"
        },
        "name": {
          "description": "The region name.",
          "type": "string"
        }
      }
    },
    "StoragePool": {
      "type": "object",
      "required": [
        "name",
        "pool",
        "address"
      ],
      "properties": {
        "address": {
          "description": "The local Ceph Monitor(s) address or FQDN.",
          "type": "string"
        },
        "description": {
          "description": "The storage pool description.",
          "type": "string"
        },
        "id": {
          "description": "The storage pool ID (auto-generated).",
          "type": "string"
        },
        "name": {
          "description": "The storage pool name.",
          "type": "string"
        },
        "pool": {
          "description": "The local Ceph RBD pool name.",
          "type": "string"
        },
        "port": {
          "description": "The local Ceph Monitor(s) port (default 3300).",
          "type": "integer",
          "default": 3300
        },
        "secret_uuid": {
          "description": "The libvirt secret UUID for CephX authentication.",
          "type": "string"
        }
      }
    },
    "Subnet": {
      "type": "object",
      "required": [
        "cidr",
        "gateway"
      ],
      "properties": {
        "cidr": {
          "description": "The virtual network CIDR (e.g. 192.168.0.0/24).",
          "type": "string"
        },
        "dns": {
          "description": "The virtual network DNS server IP address (gateway value if unspecified).",
          "type": "string"
        },
        "gateway": {
          "description": "The virtual network router/gateway IP address (e.g. 192.168.0.254).",
          "type": "string"
        }
      }
    },
    "VNet": {
      "type": "object",
      "required": [
        "name",
        "vlan",
        "interface"
      ],
      "properties": {
        "description": {
          "description": "The virtual network description.",
          "type": "string"
        },
        "id": {
          "description": "The virtual network ID (auto-generated).",
          "type": "string"
        },
        "interface": {
          "description": "The libvirt's bridge network interface (brX).",
          "type": "string"
        },
        "name": {
          "description": "The virtual network name.",
          "type": "string"
        },
        "private": {
          "description": "Is the virtual network adapter connected to private (LAN) or public (WAN) physical network ?",
          "type": "boolean",
          "default": true
        },
        "subnets": {
          "description": "An array of associated subnets",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Subnet"
          }
        },
        "vlan": {
          "description": "The VLAN identifier.",
          "type": "integer"
        }
      }
    },
    "Zone": {
      "type": "object",
      "properties": {
        "description": {
          "description": "The zone description.",
          "type": "string"
        },
        "id": {
          "description": "The zone ID (auto-generated).",
          "type": "string"
        },
        "name": {
          "description": "The zone name.",
          "type": "string"
        }
      }
    },
    "principal": {
      "type": "string"
    }
  },
  "securityDefinitions": {
    "key": {
      "type": "apiKey",
      "name": "x-token",
      "in": "header"
    }
  },
  "security": [
    {
      "key": []
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Kvm Orchestrator With A BUNch of Goods Added",
    "title": "Kowabunga",
    "version": "0.2.2"
  },
  "basePath": "/api/v1",
  "paths": {
    "/healthz": {
      "get": {
        "produces": [
          "text/plain"
        ],
        "operationId": "Healthz",
        "responses": {
          "200": {
            "description": "OK message.",
            "schema": {
              "type": "string",
              "enum": [
                "OK"
              ]
            }
          }
        }
      }
    },
    "/host": {
      "get": {
        "description": "Returns the IDs of registered hosts.",
        "tags": [
          "host"
        ],
        "operationId": "GetAllHosts",
        "responses": {
          "200": {
            "description": "Returns the an array of host IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/host/{hostId}": {
      "get": {
        "description": "Returns a description of the host",
        "tags": [
          "host"
        ],
        "operationId": "GetHost",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the host to get.",
            "name": "hostId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the host object.",
            "schema": {
              "$ref": "#/definitions/Host"
            }
          },
          "404": {
            "description": "Invalid host ID was provided."
          }
        }
      },
      "put": {
        "description": "Updates a host configuration.",
        "tags": [
          "host"
        ],
        "operationId": "UpdateHost",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the host to update.",
            "name": "hostId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Host"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated host object.",
            "schema": {
              "$ref": "#/definitions/Host"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid host ID was provided."
          }
        }
      },
      "delete": {
        "description": "Deletes an existing host.",
        "tags": [
          "host"
        ],
        "operationId": "DeleteHost",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the host to delete.",
            "name": "hostId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The host has been successfully removed."
          },
          "404": {
            "description": "Invalid host ID was provided."
          },
          "409": {
            "description": "The host is not empty or still being referenced."
          },
          "500": {
            "description": "Unable to disconnect from host's libvirt."
          }
        }
      }
    },
    "/host/{hostId}/caps": {
      "get": {
        "description": "Returns the host capabilities.",
        "tags": [
          "host"
        ],
        "operationId": "GetHostCaps",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the host to query.",
            "name": "hostId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the host capabilities.",
            "schema": {
              "$ref": "#/definitions/HostCaps"
            }
          },
          "404": {
            "description": "Invalid host ID was provided."
          }
        }
      }
    },
    "/host/{hostId}/instances": {
      "get": {
        "description": "Returns the UUIDs of the virtual machines running on the host.",
        "tags": [
          "host",
          "instance"
        ],
        "operationId": "GetHostInstances",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the host to query.",
            "name": "hostId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the an array of virtual machine UUIDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Invalid host ID was provided."
          }
        }
      }
    },
    "/instance": {
      "get": {
        "description": "Returns the IDs of registered virtual machines.",
        "tags": [
          "instance"
        ],
        "operationId": "GetAllInstances",
        "responses": {
          "200": {
            "description": "Returns the an array of virtual machines UUIDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/instance/{instanceId}": {
      "get": {
        "description": "Returns the description of the virtual machine.",
        "tags": [
          "instance"
        ],
        "operationId": "GetInstance",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual machine to query.",
            "name": "instanceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the virtual machine object.",
            "schema": {
              "$ref": "#/definitions/Instance"
            }
          },
          "404": {
            "description": "Invalid instance ID was provided."
          }
        }
      }
    },
    "/instance/{instanceId}/reboot": {
      "post": {
        "description": "Perform a virtual machine software reboot.",
        "tags": [
          "instance"
        ],
        "operationId": "RebootInstance",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual machine to query.",
            "name": "instanceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The virtual machine has been rebooted successfully."
          },
          "404": {
            "description": "Invalid instance ID was provided."
          },
          "500": {
            "description": "An error occurred when trying to reboot the virtual machine."
          }
        }
      }
    },
    "/instance/{instanceId}/reset": {
      "post": {
        "description": "Perform a virtual machine hardware reset.",
        "tags": [
          "instance"
        ],
        "operationId": "ResetInstance",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual machine to query.",
            "name": "instanceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The virtual machine has been reseted successfully."
          },
          "404": {
            "description": "Invalid instance ID was provided."
          },
          "500": {
            "description": "An error occurred when trying to reset the virtual machine."
          }
        }
      }
    },
    "/instance/{instanceId}/resume": {
      "post": {
        "description": "Perform a virtual machine software PM resume.",
        "tags": [
          "instance"
        ],
        "operationId": "ResumeInstance",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual machine to query.",
            "name": "instanceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The virtual machine has been resumed successfully."
          },
          "404": {
            "description": "Invalid instance ID was provided."
          },
          "500": {
            "description": "An error occurred when trying to resume the virtual machine."
          }
        }
      }
    },
    "/instance/{instanceId}/shutdown": {
      "post": {
        "description": "Initiate a software shutdown of a virtual machine.",
        "tags": [
          "instance"
        ],
        "operationId": "ShutdownInstance",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual machine to query.",
            "name": "instanceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The virtual machine has been shut down successfully."
          },
          "404": {
            "description": "Invalid instance ID was provided."
          },
          "500": {
            "description": "An error occurred when trying to shut down the virtual machine."
          }
        }
      }
    },
    "/instance/{instanceId}/start": {
      "post": {
        "description": "Boot up a virtual machine.",
        "tags": [
          "instance"
        ],
        "operationId": "StartInstance",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual machine to query.",
            "name": "instanceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The virtual machine has been started successfully."
          },
          "404": {
            "description": "Invalid instance ID was provided."
          },
          "500": {
            "description": "An error occurred when trying to start the virtual machine."
          }
        }
      }
    },
    "/instance/{instanceId}/state": {
      "get": {
        "description": "Returns the state of the virtual machine.",
        "tags": [
          "instance"
        ],
        "operationId": "GetInstanceState",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual machine to query.",
            "name": "instanceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the virtual machine state object.",
            "schema": {
              "$ref": "#/definitions/InstanceState"
            }
          },
          "404": {
            "description": "Invalid instance ID was provided."
          }
        }
      }
    },
    "/instance/{instanceId}/stop": {
      "post": {
        "description": "Initiate a hardware stop of a virtual machine.",
        "tags": [
          "instance"
        ],
        "operationId": "StopInstance",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual machine to query.",
            "name": "instanceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The virtual machine has been stopped successfully."
          },
          "404": {
            "description": "Invalid instance ID was provided."
          },
          "500": {
            "description": "An error occurred when trying to stop the virtual machine."
          }
        }
      }
    },
    "/instance/{instanceId}/suspend": {
      "post": {
        "description": "Perform a virtual machine software PM suspend.",
        "tags": [
          "instance"
        ],
        "operationId": "SuspendInstance",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual machine to query.",
            "name": "instanceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The virtual machine has been suspended successfully."
          },
          "404": {
            "description": "Invalid instance ID was provided."
          },
          "500": {
            "description": "An error occurred when trying to suspend the virtual machine."
          }
        }
      }
    },
    "/netgw": {
      "get": {
        "description": "Returns the IDs of network gateways.",
        "tags": [
          "netgw"
        ],
        "operationId": "GetAllNetGWs",
        "responses": {
          "200": {
            "description": "Returns an array of network gateway IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/netgw/{netgwId}": {
      "get": {
        "description": "Returns a description of the network gateway",
        "tags": [
          "netgw"
        ],
        "operationId": "GetNetGW",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the network gateway to get.",
            "name": "netgwId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the network gateway object.",
            "schema": {
              "$ref": "#/definitions/NetGW"
            }
          },
          "404": {
            "description": "Invalid network gateway ID was provided."
          }
        }
      },
      "put": {
        "description": "Updates a network gateway configuration.",
        "tags": [
          "netgw"
        ],
        "operationId": "UpdateNetGW",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the network gateway to get.",
            "name": "netgwId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NetGW"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated network gateway object.",
            "schema": {
              "$ref": "#/definitions/NetGW"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid network gateway ID was provided."
          }
        }
      },
      "delete": {
        "description": "Deletes an existing network gateway.",
        "tags": [
          "netgw"
        ],
        "operationId": "DeleteNetGW",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the network gateway to get.",
            "name": "netgwId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The network gateway has been successfully removed."
          },
          "404": {
            "description": "Invalid network gateway ID was provided."
          },
          "409": {
            "description": "The network gateway is not empty or still being referenced."
          },
          "500": {
            "description": "Unable to delete network gateway."
          }
        }
      }
    },
    "/pool": {
      "get": {
        "description": "Returns the IDs of registered pools.",
        "tags": [
          "pool"
        ],
        "operationId": "GetAllPools",
        "responses": {
          "200": {
            "description": "Returns the an array of pool IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/pool/{poolId}": {
      "get": {
        "description": "Returns a description of the pool",
        "tags": [
          "pool"
        ],
        "operationId": "GetPool",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the pool to get.",
            "name": "poolId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the pool object.",
            "schema": {
              "$ref": "#/definitions/StoragePool"
            }
          },
          "404": {
            "description": "Invalid pool ID was provided."
          }
        }
      },
      "put": {
        "description": "Updates a pool configuration.",
        "tags": [
          "pool"
        ],
        "operationId": "UpdatePool",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the pool to get.",
            "name": "poolId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/StoragePool"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated pool object.",
            "schema": {
              "$ref": "#/definitions/StoragePool"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid pool ID was provided."
          }
        }
      },
      "delete": {
        "description": "Deletes an existing pool.",
        "tags": [
          "pool"
        ],
        "operationId": "DeletePool",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the pool to get.",
            "name": "poolId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The pool has been successfully removed."
          },
          "404": {
            "description": "Invalid pool ID was provided."
          },
          "409": {
            "description": "The pool is not empty or still being referenced."
          },
          "500": {
            "description": "Unable to delete pool."
          }
        }
      }
    },
    "/project": {
      "get": {
        "description": "Returns the IDs of registered projects.",
        "tags": [
          "project"
        ],
        "operationId": "GetAllProjects",
        "responses": {
          "200": {
            "description": "Returns the an array of project IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "post": {
        "description": "Creates a new project.",
        "tags": [
          "project"
        ],
        "operationId": "CreateProject",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created project object.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "409": {
            "description": "Project already exists."
          },
          "500": {
            "description": "Unable to create the requested project."
          }
        }
      }
    },
    "/project/{projectId}": {
      "get": {
        "description": "Returns a description of the project",
        "tags": [
          "project"
        ],
        "operationId": "GetProject",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the project to get.",
            "name": "projectId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the project object.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "404": {
            "description": "Invalid project ID was provided."
          }
        }
      },
      "put": {
        "description": "Updates a project configuration.",
        "tags": [
          "project"
        ],
        "operationId": "UpdateProject",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the project to update.",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated project object.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid project ID was provided."
          }
        }
      },
      "delete": {
        "description": "Deletes an existing project.",
        "tags": [
          "project"
        ],
        "operationId": "DeleteProject",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the project to delete.",
            "name": "projectId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The project has been successfully removed."
          },
          "404": {
            "description": "Invalid project ID was provided."
          },
          "409": {
            "description": "The project is not empty or still being referenced."
          },
          "500": {
            "description": "Unable to delete project."
          }
        }
      }
    },
    "/project/{projectId}/quotas": {
      "get": {
        "description": "Returns the quotas set for the project.",
        "tags": [
          "project"
        ],
        "operationId": "GetProjectQuotas",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the project to query.",
            "name": "projectId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the project resources object.",
            "schema": {
              "$ref": "#/definitions/ProjectResources"
            }
          },
          "404": {
            "description": "Invalid project ID was provided."
          }
        }
      },
      "put": {
        "description": "Updates a project's quotas.",
        "tags": [
          "project"
        ],
        "operationId": "UpdateProjectQuotas",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the project to update.",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectResources"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated project resources object.",
            "schema": {
              "$ref": "#/definitions/ProjectResources"
            }
          },
          "404": {
            "description": "Invalid project ID was provided."
          }
        }
      },
      "delete": {
        "description": "Reset project's quotas to default value.",
        "tags": [
          "project"
        ],
        "operationId": "ResetProjectQuotas",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the project to query.",
            "name": "projectId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The project quotas have been successfully reset."
          },
          "404": {
            "description": "Invalid project ID was provided."
          }
        }
      }
    },
    "/project/{projectId}/usage": {
      "get": {
        "description": "Returns the current resources usage for the project.",
        "tags": [
          "project"
        ],
        "operationId": "GetProjectUsage",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the project to query.",
            "name": "projectId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the project resources object.",
            "schema": {
              "$ref": "#/definitions/ProjectResources"
            }
          },
          "404": {
            "description": "Invalid project ID was provided."
          }
        }
      }
    },
    "/region": {
      "get": {
        "description": "Returns the IDs of registered regions.",
        "tags": [
          "region"
        ],
        "operationId": "GetAllRegions",
        "responses": {
          "200": {
            "description": "Returns the an array of region IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "post": {
        "description": "Creates a new region.",
        "tags": [
          "region"
        ],
        "operationId": "CreateRegion",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Region"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created region object.",
            "schema": {
              "$ref": "#/definitions/Region"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "409": {
            "description": "Region already exists."
          },
          "500": {
            "description": "Unable to create the region."
          }
        }
      }
    },
    "/region/{regionId}": {
      "get": {
        "description": "Returns a description of the region",
        "tags": [
          "region"
        ],
        "operationId": "GetRegion",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the region to get.",
            "name": "regionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the region object.",
            "schema": {
              "$ref": "#/definitions/Region"
            }
          },
          "404": {
            "description": "Invalid region ID was provided."
          }
        }
      },
      "put": {
        "description": "Updates a region configuration.",
        "tags": [
          "region"
        ],
        "operationId": "UpdateRegion",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the region to get.",
            "name": "regionId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Region"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated region object.",
            "schema": {
              "$ref": "#/definitions/Region"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid region ID was provided."
          }
        }
      },
      "delete": {
        "description": "Deletes an existing region.",
        "tags": [
          "region"
        ],
        "operationId": "DeleteRegion",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the region to get.",
            "name": "regionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The region has been successfully removed."
          },
          "404": {
            "description": "Invalid region ID was provided."
          },
          "409": {
            "description": "The region is not empty or still being referenced."
          },
          "500": {
            "description": "Unable to delete region."
          }
        }
      }
    },
    "/region/{regionId}/zone": {
      "post": {
        "description": "Creates a new zone.",
        "tags": [
          "region",
          "zone"
        ],
        "operationId": "CreateZone",
        "parameters": [
          {
            "type": "string",
            "description": "the ID of the associated region.",
            "name": "regionId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Zone"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created zone object.",
            "schema": {
              "$ref": "#/definitions/Zone"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid region ID was provided."
          },
          "409": {
            "description": "Zone already exists."
          },
          "500": {
            "description": "Unable to create zone."
          }
        }
      }
    },
    "/region/{regionId}/zones": {
      "get": {
        "description": "Returns the IDs of the availability zones existing in the region.",
        "tags": [
          "region",
          "zone"
        ],
        "operationId": "GetRegionZones",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the region to query.",
            "name": "regionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of availability zone IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Invalid region ID was provided."
          }
        }
      }
    },
    "/vnet": {
      "get": {
        "description": "Returns the IDs of virtual networks.",
        "tags": [
          "vnet"
        ],
        "operationId": "GetAllVNets",
        "responses": {
          "200": {
            "description": "Returns the an array of virtual network IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/vnet/{vnetId}": {
      "get": {
        "description": "Returns a description of the virtual network",
        "tags": [
          "vnet"
        ],
        "operationId": "GetVNet",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual network to get.",
            "name": "vnetId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the virtual network object.",
            "schema": {
              "$ref": "#/definitions/VNet"
            }
          },
          "404": {
            "description": "Invalid virtual network ID was provided."
          }
        }
      },
      "put": {
        "description": "Updates a virtual network configuration.",
        "tags": [
          "vnet"
        ],
        "operationId": "UpdateVNet",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual network to get.",
            "name": "vnetId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/VNet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated virtual network object.",
            "schema": {
              "$ref": "#/definitions/VNet"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid virtual network ID was provided."
          }
        }
      },
      "delete": {
        "description": "Deletes an existing virtual network.",
        "tags": [
          "vnet"
        ],
        "operationId": "DeleteVNet",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual network to get.",
            "name": "vnetId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The virtual network has been successfully removed."
          },
          "404": {
            "description": "Invalid virtual network ID was provided."
          },
          "409": {
            "description": "The virtual network is not empty or still being referenced."
          },
          "500": {
            "description": "Unable to delete virtual network."
          }
        }
      }
    },
    "/zone": {
      "get": {
        "description": "Returns the IDs of registered zones.",
        "tags": [
          "zone"
        ],
        "operationId": "GetAllZones",
        "responses": {
          "200": {
            "description": "Returns the an array of zone IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/zone/{zoneId}": {
      "get": {
        "description": "Returns a description of the zone",
        "tags": [
          "zone"
        ],
        "operationId": "GetZone",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the zone to get.",
            "name": "zoneId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the zone object.",
            "schema": {
              "$ref": "#/definitions/Zone"
            }
          },
          "404": {
            "description": "Invalid zone ID was provided."
          }
        }
      },
      "put": {
        "description": "Updates a zone configuration.",
        "tags": [
          "zone"
        ],
        "operationId": "UpdateZone",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the zone to get.",
            "name": "zoneId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Zone"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated zone object.",
            "schema": {
              "$ref": "#/definitions/Zone"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid zone ID was provided."
          }
        }
      },
      "delete": {
        "description": "Deletes an existing zone.",
        "tags": [
          "zone"
        ],
        "operationId": "DeleteZone",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the zone to get.",
            "name": "zoneId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The zone has been successfully removed."
          },
          "404": {
            "description": "Invalid zone ID was provided."
          },
          "409": {
            "description": "The zone is not empty or still being referenced."
          },
          "500": {
            "description": "Unable to delete zone."
          }
        }
      }
    },
    "/zone/{zoneId}/host": {
      "post": {
        "description": "Creates a new host.",
        "tags": [
          "zone",
          "host"
        ],
        "operationId": "CreateHost",
        "parameters": [
          {
            "type": "string",
            "description": "the ID of the associated zone.",
            "name": "zoneId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HostConfiguration"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created host object.",
            "schema": {
              "$ref": "#/definitions/Host"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid zone ID was provided."
          },
          "409": {
            "description": "Host already exists."
          },
          "500": {
            "description": "Unable to connect to host's libvirt."
          }
        }
      }
    },
    "/zone/{zoneId}/hosts": {
      "get": {
        "description": "Returns the IDs of the hosts existing in the zone.",
        "tags": [
          "zone",
          "host"
        ],
        "operationId": "GetZoneHosts",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the zone to query.",
            "name": "zoneId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of host IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Invalid zone ID was provided."
          }
        }
      }
    },
    "/zone/{zoneId}/netgw": {
      "post": {
        "description": "Creates a new network gateway.",
        "tags": [
          "zone",
          "netgw"
        ],
        "operationId": "CreateNetGW",
        "parameters": [
          {
            "type": "string",
            "description": "the ID of the associated zone.",
            "name": "zoneId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NetGW"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created network gateway object.",
            "schema": {
              "$ref": "#/definitions/NetGW"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid zone ID was provided."
          },
          "409": {
            "description": "Network gateway already exists."
          },
          "500": {
            "description": "Unable to connect to network gateway."
          }
        }
      }
    },
    "/zone/{zoneId}/netgws": {
      "get": {
        "description": "Returns the IDs of the hosts existing in the zone.",
        "tags": [
          "zone",
          "netgw"
        ],
        "operationId": "GetZoneNetGWs",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the zone to query.",
            "name": "zoneId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of network gateway IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Invalid zone ID was provided."
          }
        }
      }
    },
    "/zone/{zoneId}/pool": {
      "post": {
        "description": "Creates a new storage pool.",
        "tags": [
          "zone",
          "pool"
        ],
        "operationId": "CreatePool",
        "parameters": [
          {
            "type": "string",
            "description": "the ID of the associated zone.",
            "name": "zoneId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StoragePool"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created storage pool object.",
            "schema": {
              "$ref": "#/definitions/StoragePool"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid zone ID was provided."
          },
          "409": {
            "description": "Pool already exists."
          },
          "500": {
            "description": "Unable to create storage pool."
          }
        }
      }
    },
    "/zone/{zoneId}/pool/{poolId}/default": {
      "put": {
        "description": "Set a zone's default storage pool.",
        "tags": [
          "zone",
          "pool"
        ],
        "operationId": "UpdateZoneDefaultPool",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the zone to update.",
            "name": "zoneId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The ID of the storage pool to set as default.",
            "name": "poolId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated project resources object."
          },
          "404": {
            "description": "Invalid zone ID or storage pool ID was provided."
          },
          "500": {
            "description": "Unable to assign the requested storage pool as zone's default."
          }
        }
      }
    },
    "/zone/{zoneId}/pools": {
      "get": {
        "description": "Returns the IDs of the pools existing in the zone.",
        "tags": [
          "zone",
          "pool"
        ],
        "operationId": "GetZonePools",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the zone to query.",
            "name": "zoneId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of storage pool IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Invalid zone ID was provided."
          }
        }
      }
    },
    "/zone/{zoneId}/vnet": {
      "post": {
        "description": "Creates a new virtual network.",
        "tags": [
          "zone",
          "vnet"
        ],
        "operationId": "CreateVNet",
        "parameters": [
          {
            "type": "string",
            "description": "the ID of the associated zone.",
            "name": "zoneId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VNet"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created virtual network object.",
            "schema": {
              "$ref": "#/definitions/VNet"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid zone ID was provided."
          },
          "409": {
            "description": "Virtual network already exists."
          },
          "500": {
            "description": "Unable to create virtual network."
          }
        }
      }
    },
    "/zone/{zoneId}/vnet/{vnetId}/default": {
      "put": {
        "description": "Set a zone's default virtual network.",
        "tags": [
          "zone",
          "vnet"
        ],
        "operationId": "UpdateZoneDefaultVNet",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the zone to update.",
            "name": "zoneId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The ID of the virtual network to set as default.",
            "name": "vnetId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated project resources object."
          },
          "404": {
            "description": "Invalid zone ID or virtual network ID was provided."
          },
          "500": {
            "description": "Unable to assign the requested virtual network as zone's default."
          }
        }
      }
    },
    "/zone/{zoneId}/vnets": {
      "get": {
        "description": "Returns the IDs of the virtual networks existing in the zone.",
        "tags": [
          "zone",
          "vnet"
        ],
        "operationId": "GetZoneVNets",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the zone to query.",
            "name": "zoneId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of virtual network IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Invalid zone ID was provided."
          }
        }
      }
    }
  },
  "definitions": {
    "Disk": {
      "type": "object",
      "properties": {
        "device": {
          "description": "name of the disk block device",
          "type": "string"
        },
        "rbd": {
          "type": "object",
          "properties": {
            "host": {
              "description": "RBD pool server address",
              "type": "string"
            },
            "image": {
              "description": "disk image name on RBD pool",
              "type": "string"
            },
            "port": {
              "description": "RBD pool server port",
              "type": "integer"
            }
          }
        }
      }
    },
    "DiskRbd": {
      "type": "object",
      "properties": {
        "host": {
          "description": "RBD pool server address",
          "type": "string"
        },
        "image": {
          "description": "disk image name on RBD pool",
          "type": "string"
        },
        "port": {
          "description": "RBD pool server port",
          "type": "integer"
        }
      }
    },
    "Host": {
      "type": "object",
      "properties": {
        "description": {
          "description": "The host description.",
          "type": "string"
        },
        "id": {
          "description": "The host ID (auto-generated).",
          "type": "string"
        },
        "name": {
          "description": "The host name.",
          "type": "string"
        },
        "region": {
          "description": "The host region.",
          "type": "string"
        },
        "version": {
          "description": "The host libvirt version.",
          "type": "string"
        },
        "zone": {
          "description": "The host availability-zone.",
          "type": "string"
        }
      }
    },
    "HostCaps": {
      "type": "object",
      "properties": {
        "cpu": {
          "description": "the host CPU characteristics",
          "type": "object",
          "properties": {
            "arch": {
              "description": "the host CPU architecture",
              "type": "string"
            },
            "cores": {
              "description": "the host CPU number of cores",
              "type": "integer"
            },
            "model": {
              "description": "the host CPU model",
              "type": "string"
            },
            "sockets": {
              "description": "the host CPU number of sockets",
              "type": "integer"
            },
            "threads": {
              "description": "the host CPU number of threads",
              "type": "integer"
            },
            "vendor": {
              "description": "the host CPU vendor",
              "type": "string"
            }
          }
        },
        "memory": {
          "description": "the host memory size in bytes",
          "type": "integer"
        },
        "uuid": {
          "description": "the host UUID",
          "type": "string"
        }
      }
    },
    "HostCapsCPU": {
      "description": "the host CPU characteristics",
      "type": "object",
      "properties": {
        "arch": {
          "description": "the host CPU architecture",
          "type": "string"
        },
        "cores": {
          "description": "the host CPU number of cores",
          "type": "integer"
        },
        "model": {
          "description": "the host CPU model",
          "type": "string"
        },
        "sockets": {
          "description": "the host CPU number of sockets",
          "type": "integer"
        },
        "threads": {
          "description": "the host CPU number of threads",
          "type": "integer"
        },
        "vendor": {
          "description": "the host CPU vendor",
          "type": "string"
        }
      }
    },
    "HostConfiguration": {
      "type": "object",
      "required": [
        "name",
        "protocol",
        "address"
      ],
      "properties": {
        "address": {
          "description": "The host libvirt's IPv4 address.",
          "type": "string"
        },
        "description": {
          "description": "The host description.",
          "type": "string"
        },
        "name": {
          "description": "The host name.",
          "type": "string"
        },
        "port": {
          "description": "The host libvirt's port.",
          "type": "integer"
        },
        "protocol": {
          "description": "The protocol to use to issue libvirt connection.",
          "type": "string",
          "enum": [
            "tcp",
            "tls"
          ]
        },
        "tls": {
          "description": "The host libvirt's TLS configuration.",
          "type": "object",
          "$ref": "#/definitions/HostConfigurationTLS"
        }
      }
    },
    "HostConfigurationTLS": {
      "type": "object",
      "required": [
        "key",
        "cert",
        "ca"
      ],
      "properties": {
        "ca": {
          "description": "The TLS certificate of authority.",
          "type": "string"
        },
        "cert": {
          "description": "The TLS client public cert.",
          "type": "string"
        },
        "key": {
          "description": "The TLS client private key.",
          "type": "string"
        }
      }
    },
    "Instance": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The instance ID  (auto-generated).",
          "type": "string"
        },
        "name": {
          "description": "the name of the Virtual Machine",
          "type": "string"
        },
        "template": {
          "description": "is the VM a template ?",
          "type": "boolean"
        },
        "topology": {
          "$ref": "#/definitions/InstanceTopology"
        },
        "vm_id": {
          "description": "the ID of the Virtual Machine",
          "type": "string"
        },
        "vm_uuid": {
          "description": "the UUID of the Virtual Machine",
          "type": "string"
        }
      }
    },
    "InstanceState": {
      "type": "object",
      "properties": {
        "reason": {
          "description": "the reason of the state of the VM",
          "type": "string"
        },
        "state": {
          "description": "the state of the VM",
          "type": "string"
        }
      }
    },
    "InstanceTopology": {
      "type": "object",
      "properties": {
        "disks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Disk"
          }
        },
        "memory": {
          "description": "the memory size of the VM in bytes",
          "type": "integer"
        },
        "nics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NIC"
          }
        },
        "vcpus": {
          "description": "the memory size of the VM in bytes",
          "type": "integer"
        }
      }
    },
    "NIC": {
      "type": "object",
      "properties": {
        "bridge": {
          "description": "name of the host's network bridge interface the interface is currently mapped to",
          "type": "string"
        },
        "mac": {
          "description": "MAC address of the interface",
          "type": "string"
        }
      }
    },
    "NetGW": {
      "type": "object",
      "required": [
        "name",
        "address",
        "token"
      ],
      "properties": {
        "address": {
          "description": "The network gateway IPv4 address.",
          "type": "string"
        },
        "description": {
          "description": "The network gateway description.",
          "type": "string"
        },
        "id": {
          "description": "The network gateway ID (auto-generated).",
          "type": "string"
        },
        "name": {
          "description": "The network gateway name.",
          "type": "string"
        },
        "port": {
          "description": "The network gateway service port (default to 8080).",
          "type": "integer",
          "default": 8080
        },
        "token": {
          "description": "The network gateway admin API token.",
          "type": "string"
        }
      }
    },
    "Project": {
      "type": "object",
      "properties": {
        "description": {
          "description": "The project description.",
          "type": "string"
        },
        "id": {
          "description": "The project ID (auto-generated).",
          "type": "string"
        },
        "name": {
          "description": "The project short name.",
          "type": "string"
        }
      }
    },
    "ProjectResources": {
      "description": "The global project quotas (0 for unlimited).",
      "type": "object",
      "properties": {
        "instances": {
          "description": "the maximum number of instances allowed to be spawned.",
          "type": "integer",
          "format": "uint16"
        },
        "memory": {
          "description": "the maximum total memory (in bytes) allowed to be consumed by sum of all instances.",
          "type": "integer",
          "format": "uint64"
        },
        "storage": {
          "description": "the maximum total disk capacity allowed to be consumed by sum of all instances.",
          "type": "integer",
          "format": "uint64"
        },
        "vcpus": {
          "description": "the maximum total number of vCPUs allowed to be consumed by sum of all instances.",
          "type": "integer",
          "format": "uint16"
        }
      }
    },
    "Region": {
      "type": "object",
      "properties": {
        "description": {
          "description": "The region description.",
          "type": "string"
        },
        "id": {
          "description": "The region ID (auto-generated).",
          "type": "string"
        },
        "name": {
          "description": "The region name.",
          "type": "string"
        }
      }
    },
    "StoragePool": {
      "type": "object",
      "required": [
        "name",
        "pool",
        "address"
      ],
      "properties": {
        "address": {
          "description": "The local Ceph Monitor(s) address or FQDN.",
          "type": "string"
        },
        "description": {
          "description": "The storage pool description.",
          "type": "string"
        },
        "id": {
          "description": "The storage pool ID (auto-generated).",
          "type": "string"
        },
        "name": {
          "description": "The storage pool name.",
          "type": "string"
        },
        "pool": {
          "description": "The local Ceph RBD pool name.",
          "type": "string"
        },
        "port": {
          "description": "The local Ceph Monitor(s) port (default 3300).",
          "type": "integer",
          "default": 3300
        },
        "secret_uuid": {
          "description": "The libvirt secret UUID for CephX authentication.",
          "type": "string"
        }
      }
    },
    "Subnet": {
      "type": "object",
      "required": [
        "cidr",
        "gateway"
      ],
      "properties": {
        "cidr": {
          "description": "The virtual network CIDR (e.g. 192.168.0.0/24).",
          "type": "string"
        },
        "dns": {
          "description": "The virtual network DNS server IP address (gateway value if unspecified).",
          "type": "string"
        },
        "gateway": {
          "description": "The virtual network router/gateway IP address (e.g. 192.168.0.254).",
          "type": "string"
        }
      }
    },
    "VNet": {
      "type": "object",
      "required": [
        "name",
        "vlan",
        "interface"
      ],
      "properties": {
        "description": {
          "description": "The virtual network description.",
          "type": "string"
        },
        "id": {
          "description": "The virtual network ID (auto-generated).",
          "type": "string"
        },
        "interface": {
          "description": "The libvirt's bridge network interface (brX).",
          "type": "string"
        },
        "name": {
          "description": "The virtual network name.",
          "type": "string"
        },
        "private": {
          "description": "Is the virtual network adapter connected to private (LAN) or public (WAN) physical network ?",
          "type": "boolean",
          "default": true
        },
        "subnets": {
          "description": "An array of associated subnets",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Subnet"
          }
        },
        "vlan": {
          "description": "The VLAN identifier.",
          "type": "integer"
        }
      }
    },
    "Zone": {
      "type": "object",
      "properties": {
        "description": {
          "description": "The zone description.",
          "type": "string"
        },
        "id": {
          "description": "The zone ID (auto-generated).",
          "type": "string"
        },
        "name": {
          "description": "The zone name.",
          "type": "string"
        }
      }
    },
    "principal": {
      "type": "string"
    }
  },
  "securityDefinitions": {
    "key": {
      "type": "apiKey",
      "name": "x-token",
      "in": "header"
    }
  },
  "security": [
    {
      "key": []
    }
  ]
}`))
}
