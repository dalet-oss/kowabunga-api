// Code generated by go-swagger; DO NOT EDIT.

package server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Kvm Orchestrator With A BUNch of Goods Added",
    "title": "Kowabunga",
    "version": "0.7.7"
  },
  "basePath": "/api/v1",
  "paths": {
    "/adapter": {
      "get": {
        "description": "Returns the IDs of network adapters.",
        "tags": [
          "adapter"
        ],
        "operationId": "GetAllAdapters",
        "responses": {
          "200": {
            "description": "Returns the an array of network adapter IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/adapter/{adapterId}": {
      "get": {
        "description": "Returns a description of the network adapter.",
        "tags": [
          "adapter"
        ],
        "operationId": "GetAdapter",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the network adapter to get.",
            "name": "adapterId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the network adapter object.",
            "schema": {
              "$ref": "#/definitions/Adapter"
            }
          },
          "404": {
            "description": "Invalid network adapter ID was provided."
          }
        }
      },
      "put": {
        "description": "Updates a network adapter configuration.",
        "tags": [
          "adapter"
        ],
        "operationId": "UpdateAdapter",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the network adapter to update.",
            "name": "adapterId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Adapter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated network adapter object.",
            "schema": {
              "$ref": "#/definitions/Adapter"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid network adapter ID was provided."
          }
        }
      },
      "delete": {
        "description": "Deletes an existing network adapter.",
        "tags": [
          "adapter"
        ],
        "operationId": "DeleteAdapter",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the network adapter to delete.",
            "name": "adapterId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The network adapter has been successfully removed."
          },
          "404": {
            "description": "Invalid network adapter ID was provided."
          },
          "409": {
            "description": "The network adapter is not empty or still being referenced."
          },
          "500": {
            "description": "Unable to delete network adapter."
          }
        }
      }
    },
    "/host": {
      "get": {
        "description": "Returns the IDs of registered hosts.",
        "tags": [
          "host"
        ],
        "operationId": "GetAllHosts",
        "responses": {
          "200": {
            "description": "Returns the an array of host IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/host/{hostId}": {
      "get": {
        "description": "Returns a description of the host",
        "tags": [
          "host"
        ],
        "operationId": "GetHost",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the host to get.",
            "name": "hostId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the host object.",
            "schema": {
              "$ref": "#/definitions/Host"
            }
          },
          "404": {
            "description": "Invalid host ID was provided."
          }
        }
      },
      "put": {
        "description": "Updates a host configuration.",
        "tags": [
          "host"
        ],
        "operationId": "UpdateHost",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the host to update.",
            "name": "hostId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Host"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated host object.",
            "schema": {
              "$ref": "#/definitions/Host"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid host ID was provided."
          }
        }
      },
      "delete": {
        "description": "Deletes an existing host.",
        "tags": [
          "host"
        ],
        "operationId": "DeleteHost",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the host to delete.",
            "name": "hostId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The host has been successfully removed."
          },
          "404": {
            "description": "Invalid host ID was provided."
          },
          "409": {
            "description": "The host is not empty or still being referenced."
          },
          "500": {
            "description": "Unable to disconnect from host's libvirt."
          }
        }
      }
    },
    "/host/{hostId}/caps": {
      "get": {
        "description": "Returns the host capabilities.",
        "tags": [
          "host"
        ],
        "operationId": "GetHostCaps",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the host to query.",
            "name": "hostId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the host capabilities.",
            "schema": {
              "$ref": "#/definitions/HostCaps"
            }
          },
          "404": {
            "description": "Invalid host ID was provided."
          }
        }
      }
    },
    "/host/{hostId}/instances": {
      "get": {
        "description": "Returns the UUIDs of the virtual machines running on the host.",
        "tags": [
          "host",
          "instance"
        ],
        "operationId": "GetHostInstances",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the host to query.",
            "name": "hostId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the an array of virtual machine UUIDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Invalid host ID was provided."
          }
        }
      }
    },
    "/instance": {
      "get": {
        "description": "Returns the IDs of registered virtual machines.",
        "tags": [
          "instance"
        ],
        "operationId": "GetAllInstances",
        "responses": {
          "200": {
            "description": "Returns the an array of virtual machines IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/instance/{instanceId}": {
      "get": {
        "description": "Returns the description of the virtual machine.",
        "tags": [
          "instance"
        ],
        "operationId": "GetInstance",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual machine to query.",
            "name": "instanceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the virtual machine object.",
            "schema": {
              "$ref": "#/definitions/Instance"
            }
          },
          "404": {
            "description": "Invalid instance ID was provided."
          }
        }
      },
      "put": {
        "description": "Updates a virtual machine configuration.",
        "tags": [
          "instance"
        ],
        "operationId": "UpdateInstance",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual machine instance.",
            "name": "instanceId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Instance"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated virtual machine instance object.",
            "schema": {
              "$ref": "#/definitions/Instance"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid virtual machine instance ID was provided."
          },
          "500": {
            "description": "Unable to update the virtual machine instance."
          },
          "507": {
            "description": "Requested instance characteristics are beyond associated project's quota in place."
          }
        }
      },
      "delete": {
        "description": "Deletes an existing virtual machine instance.",
        "tags": [
          "instance"
        ],
        "operationId": "DeleteInstance",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual machine instance to delete.",
            "name": "instanceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The instance has been successfully removed."
          },
          "404": {
            "description": "Invalid instance ID was provided."
          },
          "409": {
            "description": "The instance is not empty or still being referenced."
          },
          "500": {
            "description": "Unable to delete instance."
          }
        }
      }
    },
    "/instance/{instanceId}/reboot": {
      "post": {
        "description": "Perform a virtual machine software reboot.",
        "tags": [
          "instance"
        ],
        "operationId": "RebootInstance",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual machine to query.",
            "name": "instanceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The virtual machine has been rebooted successfully."
          },
          "404": {
            "description": "Invalid instance ID was provided."
          },
          "500": {
            "description": "An error occurred when trying to reboot the virtual machine."
          }
        }
      }
    },
    "/instance/{instanceId}/reset": {
      "post": {
        "description": "Perform a virtual machine hardware reset.",
        "tags": [
          "instance"
        ],
        "operationId": "ResetInstance",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual machine to query.",
            "name": "instanceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The virtual machine has been reseted successfully."
          },
          "404": {
            "description": "Invalid instance ID was provided."
          },
          "500": {
            "description": "An error occurred when trying to reset the virtual machine."
          }
        }
      }
    },
    "/instance/{instanceId}/resume": {
      "post": {
        "description": "Perform a virtual machine software PM resume.",
        "tags": [
          "instance"
        ],
        "operationId": "ResumeInstance",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual machine to query.",
            "name": "instanceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The virtual machine has been resumed successfully."
          },
          "404": {
            "description": "Invalid instance ID was provided."
          },
          "500": {
            "description": "An error occurred when trying to resume the virtual machine."
          }
        }
      }
    },
    "/instance/{instanceId}/shutdown": {
      "post": {
        "description": "Initiate a software shutdown of a virtual machine.",
        "tags": [
          "instance"
        ],
        "operationId": "ShutdownInstance",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual machine to query.",
            "name": "instanceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The virtual machine has been shut down successfully."
          },
          "404": {
            "description": "Invalid instance ID was provided."
          },
          "500": {
            "description": "An error occurred when trying to shut down the virtual machine."
          }
        }
      }
    },
    "/instance/{instanceId}/start": {
      "post": {
        "description": "Boot up a virtual machine.",
        "tags": [
          "instance"
        ],
        "operationId": "StartInstance",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual machine to query.",
            "name": "instanceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The virtual machine has been started successfully."
          },
          "404": {
            "description": "Invalid instance ID was provided."
          },
          "500": {
            "description": "An error occurred when trying to start the virtual machine."
          }
        }
      }
    },
    "/instance/{instanceId}/state": {
      "get": {
        "description": "Returns the state of the virtual machine.",
        "tags": [
          "instance"
        ],
        "operationId": "GetInstanceState",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual machine to query.",
            "name": "instanceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the virtual machine state object.",
            "schema": {
              "$ref": "#/definitions/InstanceState"
            }
          },
          "404": {
            "description": "Invalid instance ID was provided."
          }
        }
      }
    },
    "/instance/{instanceId}/stop": {
      "post": {
        "description": "Initiate a hardware stop of a virtual machine.",
        "tags": [
          "instance"
        ],
        "operationId": "StopInstance",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual machine to query.",
            "name": "instanceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The virtual machine has been stopped successfully."
          },
          "404": {
            "description": "Invalid instance ID was provided."
          },
          "500": {
            "description": "An error occurred when trying to stop the virtual machine."
          }
        }
      }
    },
    "/instance/{instanceId}/suspend": {
      "post": {
        "description": "Perform a virtual machine software PM suspend.",
        "tags": [
          "instance"
        ],
        "operationId": "SuspendInstance",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual machine to query.",
            "name": "instanceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The virtual machine has been suspended successfully."
          },
          "404": {
            "description": "Invalid instance ID was provided."
          },
          "500": {
            "description": "An error occurred when trying to suspend the virtual machine."
          }
        }
      }
    },
    "/kce": {
      "get": {
        "description": "Returns the IDs of registered KCE virtual machines.",
        "tags": [
          "kce"
        ],
        "operationId": "GetAllKCEs",
        "responses": {
          "200": {
            "description": "Returns the an array of KCE virtual machines IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/kce/{kceId}": {
      "get": {
        "description": "Returns the description of the KCE virtual machine.",
        "tags": [
          "kce"
        ],
        "operationId": "GetKCE",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the KCE virtual machine to query.",
            "name": "kceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the KCE virtual machine object.",
            "schema": {
              "$ref": "#/definitions/KCE"
            }
          },
          "404": {
            "description": "Invalid KCE ID was provided."
          }
        }
      },
      "put": {
        "description": "Updates a KCE virtual machine configuration.",
        "tags": [
          "kce"
        ],
        "operationId": "UpdateKCE",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the KCE virtual machine object.",
            "name": "kceId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/KCE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated KCE virtual machine object.",
            "schema": {
              "$ref": "#/definitions/KCE"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid KCE virtual machine ID was provided."
          },
          "500": {
            "description": "Unable to update the KCE virtual machine."
          },
          "507": {
            "description": "Requested KCE characteristics are beyond associated project's quota in place."
          }
        }
      },
      "delete": {
        "description": "Deletes an existing KCE virtual machine.",
        "tags": [
          "kce"
        ],
        "operationId": "DeleteKCE",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the KCE virtual machine to delete.",
            "name": "kceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The KCE virtual machine has been successfully removed."
          },
          "404": {
            "description": "Invalid KCE ID was provided."
          },
          "409": {
            "description": "The KCE virtual machine is not empty or still being referenced."
          },
          "500": {
            "description": "Unable to delete KCE virtual machine."
          }
        }
      }
    },
    "/kce/{kceId}/reboot": {
      "post": {
        "description": "Perform a KCE virtual machine software reboot.",
        "tags": [
          "kce"
        ],
        "operationId": "RebootKCE",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the KCE virtual machine to query.",
            "name": "kceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The KCE virtual machine has been rebooted successfully."
          },
          "404": {
            "description": "Invalid KCE ID was provided."
          },
          "500": {
            "description": "An error occurred when trying to reboot the KCE virtual machine."
          }
        }
      }
    },
    "/kce/{kceId}/reset": {
      "post": {
        "description": "Perform a KCE virtual machine hardware reset.",
        "tags": [
          "kce"
        ],
        "operationId": "ResetKCE",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the KCE virtual machine to query.",
            "name": "kceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The KCE virtual machine has been reseted successfully."
          },
          "404": {
            "description": "Invalid KCE ID was provided."
          },
          "500": {
            "description": "An error occurred when trying to reset the KCE virtual machine."
          }
        }
      }
    },
    "/kce/{kceId}/resume": {
      "post": {
        "description": "Perform a KCE virtual machine software PM resume.",
        "tags": [
          "kce"
        ],
        "operationId": "ResumeKCE",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the KCE virtual machine to query.",
            "name": "kceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The KCE virtual machine has been resumed successfully."
          },
          "404": {
            "description": "Invalid KCE ID was provided."
          },
          "500": {
            "description": "An error occurred when trying to resume the KCE virtual machine."
          }
        }
      }
    },
    "/kce/{kceId}/shutdown": {
      "post": {
        "description": "Initiate a software shutdown of a KCE virtual machine.",
        "tags": [
          "kce"
        ],
        "operationId": "ShutdownKCE",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the KCE virtual machine to query.",
            "name": "kceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The KCE virtual machine has been shut down successfully."
          },
          "404": {
            "description": "Invalid KCE ID was provided."
          },
          "500": {
            "description": "An error occurred when trying to shut down the KCE virtual machine."
          }
        }
      }
    },
    "/kce/{kceId}/start": {
      "post": {
        "description": "Boot up a KCE virtual machine.",
        "tags": [
          "kce"
        ],
        "operationId": "StartKCE",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the KCE virtual machine to query.",
            "name": "kceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The KCE virtual machine has been started successfully."
          },
          "404": {
            "description": "Invalid KCE ID was provided."
          },
          "500": {
            "description": "An error occurred when trying to start the KCE virtual machine."
          }
        }
      }
    },
    "/kce/{kceId}/state": {
      "get": {
        "description": "Returns the state of the KCE virtual machine.",
        "tags": [
          "kce"
        ],
        "operationId": "GetKCEState",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual machine to query.",
            "name": "kceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the KCE virtual machine state object.",
            "schema": {
              "$ref": "#/definitions/InstanceState"
            }
          },
          "404": {
            "description": "Invalid KCE ID was provided."
          }
        }
      }
    },
    "/kce/{kceId}/stop": {
      "post": {
        "description": "Initiate a hardware stop of a KCE virtual machine.",
        "tags": [
          "kce"
        ],
        "operationId": "StopKCE",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the KCE virtual machine to query.",
            "name": "kceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The KCE virtual machine has been stopped successfully."
          },
          "404": {
            "description": "Invalid KCE ID was provided."
          },
          "500": {
            "description": "An error occurred when trying to stop the KCE virtual machine."
          }
        }
      }
    },
    "/kce/{kceId}/suspend": {
      "post": {
        "description": "Perform a KCE virtual machine software PM suspend.",
        "tags": [
          "kce"
        ],
        "operationId": "SuspendKCE",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual machine to query.",
            "name": "kceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The KCE virtual machine has been suspended successfully."
          },
          "404": {
            "description": "Invalid KCE ID was provided."
          },
          "500": {
            "description": "An error occurred when trying to suspend the KCE virtual machine."
          }
        }
      }
    },
    "/netgw": {
      "get": {
        "description": "Returns the IDs of network gateways.",
        "tags": [
          "netgw"
        ],
        "operationId": "GetAllNetGWs",
        "responses": {
          "200": {
            "description": "Returns an array of network gateway IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/netgw/{netgwId}": {
      "get": {
        "description": "Returns a description of the network gateway",
        "tags": [
          "netgw"
        ],
        "operationId": "GetNetGW",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the network gateway to get.",
            "name": "netgwId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the network gateway object.",
            "schema": {
              "$ref": "#/definitions/NetGW"
            }
          },
          "404": {
            "description": "Invalid network gateway ID was provided."
          }
        }
      },
      "put": {
        "description": "Updates a network gateway configuration.",
        "tags": [
          "netgw"
        ],
        "operationId": "UpdateNetGW",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the network gateway to get.",
            "name": "netgwId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NetGW"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated network gateway object.",
            "schema": {
              "$ref": "#/definitions/NetGW"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid network gateway ID was provided."
          }
        }
      },
      "delete": {
        "description": "Deletes an existing network gateway.",
        "tags": [
          "netgw"
        ],
        "operationId": "DeleteNetGW",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the network gateway to get.",
            "name": "netgwId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The network gateway has been successfully removed."
          },
          "404": {
            "description": "Invalid network gateway ID was provided."
          },
          "409": {
            "description": "The network gateway is not empty or still being referenced."
          },
          "500": {
            "description": "Unable to delete network gateway."
          }
        }
      }
    },
    "/pool": {
      "get": {
        "description": "Returns the IDs of registered pools.",
        "tags": [
          "pool"
        ],
        "operationId": "GetAllPools",
        "responses": {
          "200": {
            "description": "Returns the an array of pool IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/pool/{poolId}": {
      "get": {
        "description": "Returns a description of the pool",
        "tags": [
          "pool"
        ],
        "operationId": "GetPool",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the pool to get.",
            "name": "poolId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the pool object.",
            "schema": {
              "$ref": "#/definitions/StoragePool"
            }
          },
          "404": {
            "description": "Invalid pool ID was provided."
          }
        }
      },
      "put": {
        "description": "Updates a pool configuration.",
        "tags": [
          "pool"
        ],
        "operationId": "UpdatePool",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the pool to get.",
            "name": "poolId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/StoragePool"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated pool object.",
            "schema": {
              "$ref": "#/definitions/StoragePool"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid pool ID was provided."
          }
        }
      },
      "delete": {
        "description": "Deletes an existing pool.",
        "tags": [
          "pool"
        ],
        "operationId": "DeletePool",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the pool to get.",
            "name": "poolId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The pool has been successfully removed."
          },
          "404": {
            "description": "Invalid pool ID was provided."
          },
          "409": {
            "description": "The pool is not empty or still being referenced."
          },
          "500": {
            "description": "Unable to delete pool."
          }
        }
      }
    },
    "/pool/{poolId}/template": {
      "post": {
        "description": "Creates a new volume template.",
        "tags": [
          "pool",
          "template"
        ],
        "operationId": "CreateTemplate",
        "parameters": [
          {
            "type": "string",
            "description": "the ID of the associated storage pool.",
            "name": "poolId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Template"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created volume template.",
            "schema": {
              "$ref": "#/definitions/Template"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid storage pool ID was provided."
          },
          "409": {
            "description": "Template already exists."
          },
          "500": {
            "description": "Unable to create template."
          }
        }
      }
    },
    "/pool/{poolId}/template/{templateId}/default": {
      "put": {
        "description": "Set a storage pool default volume template.",
        "tags": [
          "pool",
          "template"
        ],
        "operationId": "UpdatePoolDefaultTemplate",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the storage pool to update.",
            "name": "poolId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The ID of the volume template to set as default.",
            "name": "templateId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns success."
          },
          "404": {
            "description": "Invalid storage pool ID or volume template ID was provided."
          },
          "500": {
            "description": "Unable to assign the requested volume template as storage pool default."
          }
        }
      }
    },
    "/pool/{poolId}/templates": {
      "get": {
        "description": "Returns the IDs of the volume templates existing in the storage pool.",
        "tags": [
          "pool",
          "templates"
        ],
        "operationId": "GetPoolTemplates",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the storage pool to query.",
            "name": "poolId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of volume template IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Invalid storage pool ID was provided."
          }
        }
      }
    },
    "/pool/{poolId}/volumes": {
      "get": {
        "description": "Returns the IDs of the storage volumes existing in the pool.",
        "tags": [
          "pool",
          "volume"
        ],
        "operationId": "GetPoolVolumes",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the pool to query.",
            "name": "poolId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of storage volume IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Invalid pool ID was provided."
          }
        }
      }
    },
    "/project": {
      "get": {
        "description": "Returns the IDs of registered projects.",
        "tags": [
          "project"
        ],
        "operationId": "GetAllProjects",
        "responses": {
          "200": {
            "description": "Returns the an array of project IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "post": {
        "description": "Creates a new project.",
        "tags": [
          "project"
        ],
        "operationId": "CreateProject",
        "parameters": [
          {
            "type": "integer",
            "default": 26,
            "description": "The minimum VPC subnet size to be affected to the project. WARNING, this cannot be changed later.",
            "name": "subnetSize",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Whether or not to send a notification email at resource creation.",
            "name": "notify",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created project object.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "409": {
            "description": "Project already exists."
          },
          "500": {
            "description": "Unable to create the requested project."
          },
          "507": {
            "description": "The expected VPC subnet size cannot be assigned."
          }
        }
      }
    },
    "/project/{projectId}": {
      "get": {
        "description": "Returns a description of the project",
        "tags": [
          "project"
        ],
        "operationId": "GetProject",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the project to get.",
            "name": "projectId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the project object.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "404": {
            "description": "Invalid project ID was provided."
          }
        }
      },
      "put": {
        "description": "Updates a project configuration.",
        "tags": [
          "project"
        ],
        "operationId": "UpdateProject",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the project to update.",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated project object.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid project ID was provided."
          }
        }
      },
      "delete": {
        "description": "Deletes an existing project.",
        "tags": [
          "project"
        ],
        "operationId": "DeleteProject",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the project to delete.",
            "name": "projectId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The project has been successfully removed."
          },
          "404": {
            "description": "Invalid project ID was provided."
          },
          "409": {
            "description": "The project is not empty or still being referenced."
          },
          "500": {
            "description": "Unable to delete project."
          }
        }
      }
    },
    "/project/{projectId}/record": {
      "post": {
        "description": "Creates a new DNS record in specified project.",
        "tags": [
          "project",
          "record"
        ],
        "operationId": "CreateProjectDnsRecord",
        "parameters": [
          {
            "type": "string",
            "description": "the ID of the associated project.",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DnsRecord"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created DNS record object.",
            "schema": {
              "$ref": "#/definitions/DnsRecord"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid project ID was provided."
          },
          "409": {
            "description": "DNS record already exists."
          },
          "500": {
            "description": "Unable to create the DNS record."
          }
        }
      }
    },
    "/project/{projectId}/records": {
      "get": {
        "description": "Returns the IDs of the DNS records existing in the project.",
        "tags": [
          "project",
          "record"
        ],
        "operationId": "GetProjectDnsRecords",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the project to query.",
            "name": "projectId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of DNS record IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Invalid project ID was provided."
          }
        }
      }
    },
    "/project/{projectId}/usage": {
      "get": {
        "description": "Returns the current resources usage for the project.",
        "tags": [
          "project"
        ],
        "operationId": "GetProjectUsage",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the project to query.",
            "name": "projectId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the project resources object.",
            "schema": {
              "$ref": "#/definitions/ProjectResources"
            }
          },
          "404": {
            "description": "Invalid project ID was provided."
          }
        }
      }
    },
    "/project/{projectId}/zone/{zoneId}/instance": {
      "post": {
        "description": "Creates a new virtual machine instance in specified zone.",
        "tags": [
          "project",
          "zone",
          "instance"
        ],
        "operationId": "CreateProjectZoneInstance",
        "parameters": [
          {
            "type": "string",
            "description": "the ID of the associated project.",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the ID of the associated zone.",
            "name": "zoneId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Instance"
            }
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Whether or not to send a notification email at resource creation.",
            "name": "notify",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created virtual machine instance object.",
            "schema": {
              "$ref": "#/definitions/Instance"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid project or zone ID was provided."
          },
          "409": {
            "description": "Virtual machine instance already exists."
          },
          "500": {
            "description": "Unable to create the virtual machine instance."
          },
          "507": {
            "description": "Requested volume characteristics are beyond project's quota in place."
          }
        }
      }
    },
    "/project/{projectId}/zone/{zoneId}/instances": {
      "get": {
        "description": "Returns the IDs of the virtual machine instances existing in the project in the specified zone.",
        "tags": [
          "project",
          "zone",
          "instance"
        ],
        "operationId": "GetProjectZoneInstances",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the project to query.",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The ID of the zone to query.",
            "name": "zoneId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of virtual machine instance IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Invalid project or zone ID was provided."
          }
        }
      }
    },
    "/project/{projectId}/zone/{zoneId}/kce": {
      "post": {
        "description": "Creates a new KCE virtual machine in specified zone.",
        "tags": [
          "project",
          "zone",
          "kce"
        ],
        "operationId": "CreateProjectZoneKce",
        "parameters": [
          {
            "type": "string",
            "description": "the ID of the associated project.",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the ID of the associated zone.",
            "name": "zoneId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the ID of the associated storage pool (optional, zone's default if unspecified).",
            "name": "poolId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "the ID of the template to clone the OS storage volume from (optional, zone's default if unspecified)",
            "name": "templateId",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Should KCE be exposed over public Internet ? (a public IPv4 address will then be auto-assigned, default to false).",
            "name": "public",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Whether or not to send a notification email at resource creation.",
            "name": "notify",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KCE"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created KCE virtual machine object.",
            "schema": {
              "$ref": "#/definitions/KCE"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid project or zone ID was provided."
          },
          "409": {
            "description": "KCE Virtual machine already exists."
          },
          "500": {
            "description": "Unable to create the KCE virtual machine."
          },
          "507": {
            "description": "Requested characteristics are beyond project's quota in place."
          }
        }
      }
    },
    "/project/{projectId}/zone/{zoneId}/kces": {
      "get": {
        "description": "Returns the IDs of the KCE virtual machines existing in the project in the specified zone.",
        "tags": [
          "project",
          "zone",
          "kce"
        ],
        "operationId": "GetProjectZoneKCEs",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the project to query.",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The ID of the zone to query.",
            "name": "zoneId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of KCE virtual machine IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Invalid project or zone ID was provided."
          }
        }
      }
    },
    "/project/{projectId}/zone/{zoneId}/volume": {
      "post": {
        "description": "Creates a new storage volume in specified zone.",
        "tags": [
          "project",
          "zone",
          "volume"
        ],
        "operationId": "CreateProjectZoneVolume",
        "parameters": [
          {
            "type": "string",
            "description": "the ID of the associated project.",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the ID of the associated zone.",
            "name": "zoneId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the ID of the associated storage pool (optional, zone's default if unspecified).",
            "name": "poolId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "the ID of the template to clone the storage volume from (optional, zone's default if unspecified)",
            "name": "templateId",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Volume"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created storage volume object.",
            "schema": {
              "$ref": "#/definitions/Volume"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid project or zone ID was provided."
          },
          "409": {
            "description": "Storage volume already exists."
          },
          "500": {
            "description": "Unable to create the storage volume."
          },
          "507": {
            "description": "Requested volume characteristics are beyond project's quota in place."
          }
        }
      }
    },
    "/project/{projectId}/zone/{zoneId}/volumes": {
      "get": {
        "description": "Returns the IDs of the storage volumes existing in the project in the specified zone.",
        "tags": [
          "project",
          "zone",
          "volume"
        ],
        "operationId": "GetProjectZoneVolumes",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the project to query.",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The ID of the zone to query.",
            "name": "zoneId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of storage volume IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Invalid project or zone ID was provided."
          }
        }
      }
    },
    "/record/{recordId}": {
      "get": {
        "description": "Returns a DNS record object",
        "tags": [
          "record"
        ],
        "operationId": "GetDnsRecord",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the DNS record to get.",
            "name": "recordId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the DNS record object.",
            "schema": {
              "$ref": "#/definitions/DnsRecord"
            }
          },
          "404": {
            "description": "Invalid DNS record ID was provided."
          }
        }
      },
      "put": {
        "description": "Updates a DNS record configuration.",
        "tags": [
          "record"
        ],
        "operationId": "UpdateDnsRecord",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the DNS record to update.",
            "name": "recordId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/DnsRecord"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated DNS record object.",
            "schema": {
              "$ref": "#/definitions/DnsRecord"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid DNS record ID was provided."
          }
        }
      },
      "delete": {
        "description": "Deletes an existing DNS record.",
        "tags": [
          "record"
        ],
        "operationId": "DeleteDnsRecord",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the DNS record to delete.",
            "name": "recordId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The DNS record has been successfully removed."
          },
          "404": {
            "description": "Invalid DNS record ID was provided."
          },
          "500": {
            "description": "Unable to delete DNS record."
          }
        }
      }
    },
    "/region": {
      "get": {
        "description": "Returns the IDs of registered regions.",
        "tags": [
          "region"
        ],
        "operationId": "GetAllRegions",
        "responses": {
          "200": {
            "description": "Returns the an array of region IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "post": {
        "description": "Creates a new region.",
        "tags": [
          "region"
        ],
        "operationId": "CreateRegion",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Region"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created region object.",
            "schema": {
              "$ref": "#/definitions/Region"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "409": {
            "description": "Region already exists."
          },
          "500": {
            "description": "Unable to create the region."
          }
        }
      }
    },
    "/region/{regionId}": {
      "get": {
        "description": "Returns a description of the region",
        "tags": [
          "region"
        ],
        "operationId": "GetRegion",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the region to get.",
            "name": "regionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the region object.",
            "schema": {
              "$ref": "#/definitions/Region"
            }
          },
          "404": {
            "description": "Invalid region ID was provided."
          }
        }
      },
      "put": {
        "description": "Updates a region configuration.",
        "tags": [
          "region"
        ],
        "operationId": "UpdateRegion",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the region to get.",
            "name": "regionId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Region"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated region object.",
            "schema": {
              "$ref": "#/definitions/Region"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid region ID was provided."
          }
        }
      },
      "delete": {
        "description": "Deletes an existing region.",
        "tags": [
          "region"
        ],
        "operationId": "DeleteRegion",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the region to get.",
            "name": "regionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The region has been successfully removed."
          },
          "404": {
            "description": "Invalid region ID was provided."
          },
          "409": {
            "description": "The region is not empty or still being referenced."
          },
          "500": {
            "description": "Unable to delete region."
          }
        }
      }
    },
    "/region/{regionId}/zone": {
      "post": {
        "description": "Creates a new zone.",
        "tags": [
          "region",
          "zone"
        ],
        "operationId": "CreateZone",
        "parameters": [
          {
            "type": "string",
            "description": "the ID of the associated region.",
            "name": "regionId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Zone"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created zone object.",
            "schema": {
              "$ref": "#/definitions/Zone"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid region ID was provided."
          },
          "409": {
            "description": "Zone already exists."
          },
          "500": {
            "description": "Unable to create zone."
          }
        }
      }
    },
    "/region/{regionId}/zones": {
      "get": {
        "description": "Returns the IDs of the availability zones existing in the region.",
        "tags": [
          "region",
          "zone"
        ],
        "operationId": "GetRegionZones",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the region to query.",
            "name": "regionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of availability zone IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Invalid region ID was provided."
          }
        }
      }
    },
    "/subnet": {
      "get": {
        "description": "Returns the IDs of subnets.",
        "tags": [
          "subnet"
        ],
        "operationId": "GetAllSubnets",
        "responses": {
          "200": {
            "description": "Returns the an array of subnet IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/subnet/{subnetId}": {
      "get": {
        "description": "Returns a description of the subnet.",
        "tags": [
          "subnet"
        ],
        "operationId": "GetSubnet",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the subnet to get.",
            "name": "subnetId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the subnet object.",
            "schema": {
              "$ref": "#/definitions/Subnet"
            }
          },
          "404": {
            "description": "Invalid subnet ID was provided."
          }
        }
      },
      "put": {
        "description": "Updates a subnet configuration.",
        "tags": [
          "subnet"
        ],
        "operationId": "UpdateSubnet",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the subnet to update.",
            "name": "subnetId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Subnet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated subnet object.",
            "schema": {
              "$ref": "#/definitions/Subnet"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid subnet ID was provided."
          }
        }
      },
      "delete": {
        "description": "Deletes an existing subnet.",
        "tags": [
          "subnet"
        ],
        "operationId": "DeleteSubnet",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the subnet to delete.",
            "name": "subnetId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The subnet has been successfully removed."
          },
          "404": {
            "description": "Invalid subnet ID was provided."
          },
          "409": {
            "description": "The subnet is not empty or still being referenced."
          },
          "500": {
            "description": "Unable to delete subnet."
          }
        }
      }
    },
    "/subnet/{subnetId}/adapter": {
      "post": {
        "description": "Creates a new network adapter.",
        "tags": [
          "subnet",
          "adapter"
        ],
        "operationId": "CreateAdapter",
        "parameters": [
          {
            "type": "string",
            "description": "the ID of the associated subnet.",
            "name": "subnetId",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "whether Kowabunga should pick and assign an IP address to this adapter.",
            "name": "assignIP",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Adapter"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created network adapter object.",
            "schema": {
              "$ref": "#/definitions/Adapter"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid subnet ID was provided."
          },
          "409": {
            "description": "Network adapter already exists."
          },
          "500": {
            "description": "Unable to create the network adapter."
          }
        }
      }
    },
    "/subnet/{subnetId}/adapters": {
      "get": {
        "description": "Returns the IDs of the network adapters existing in the subnet.",
        "tags": [
          "subnet",
          "adapter"
        ],
        "operationId": "GetSubnetAdapters",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the subnet to query.",
            "name": "subnetId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of network adapter IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Invalid subnet ID was provided."
          }
        }
      }
    },
    "/template": {
      "get": {
        "description": "Returns the IDs of volume templates.",
        "tags": [
          "template"
        ],
        "operationId": "GetAllTemplates",
        "responses": {
          "200": {
            "description": "Returns the an array of volume template IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/template/{templateId}": {
      "get": {
        "description": "Returns a description of the volume template.",
        "tags": [
          "template"
        ],
        "operationId": "GetTemplate",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the volume template to get.",
            "name": "templateId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the volume template object.",
            "schema": {
              "$ref": "#/definitions/Template"
            }
          },
          "404": {
            "description": "Invalid volume template ID was provided."
          }
        }
      },
      "put": {
        "description": "Updates a volume template configuration.",
        "tags": [
          "template"
        ],
        "operationId": "UpdateTemplate",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the volume template to update.",
            "name": "templateId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Template"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated volume template object.",
            "schema": {
              "$ref": "#/definitions/Template"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid volume template ID was provided."
          }
        }
      },
      "delete": {
        "description": "Deletes an existing volume template.",
        "tags": [
          "template"
        ],
        "operationId": "DeleteTemplate",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the volume template to delete.",
            "name": "templateId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The volume template has been successfully removed."
          },
          "404": {
            "description": "Invalid volume template ID was provided."
          },
          "409": {
            "description": "The volume template is not empty or still being referenced."
          },
          "500": {
            "description": "Unable to delete volume template."
          }
        }
      }
    },
    "/vnet": {
      "get": {
        "description": "Returns the IDs of virtual networks.",
        "tags": [
          "vnet"
        ],
        "operationId": "GetAllVNets",
        "responses": {
          "200": {
            "description": "Returns the an array of virtual network IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/vnet/{vnetId}": {
      "get": {
        "description": "Returns a description of the virtual network",
        "tags": [
          "vnet"
        ],
        "operationId": "GetVNet",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual network to get.",
            "name": "vnetId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the virtual network object.",
            "schema": {
              "$ref": "#/definitions/VNet"
            }
          },
          "404": {
            "description": "Invalid virtual network ID was provided."
          }
        }
      },
      "put": {
        "description": "Updates a virtual network configuration.",
        "tags": [
          "vnet"
        ],
        "operationId": "UpdateVNet",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual network to update.",
            "name": "vnetId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/VNet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated virtual network object.",
            "schema": {
              "$ref": "#/definitions/VNet"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid virtual network ID was provided."
          }
        }
      },
      "delete": {
        "description": "Deletes an existing virtual network.",
        "tags": [
          "vnet"
        ],
        "operationId": "DeleteVNet",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual network to delete.",
            "name": "vnetId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The virtual network has been successfully removed."
          },
          "404": {
            "description": "Invalid virtual network ID was provided."
          },
          "409": {
            "description": "The virtual network is not empty or still being referenced."
          },
          "500": {
            "description": "Unable to delete virtual network."
          }
        }
      }
    },
    "/vnet/{vnetId}/subnet": {
      "post": {
        "description": "Creates a new subnet.",
        "tags": [
          "vnet",
          "subnet"
        ],
        "operationId": "CreateSubnet",
        "parameters": [
          {
            "type": "string",
            "description": "the ID of the associated virtual network.",
            "name": "vnetId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Subnet"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created subnet object.",
            "schema": {
              "$ref": "#/definitions/Subnet"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid virtual network ID was provided."
          },
          "409": {
            "description": "Subnet already exists."
          },
          "500": {
            "description": "Unable to create subnet."
          }
        }
      }
    },
    "/vnet/{vnetId}/subnet/{subnetId}/default": {
      "put": {
        "description": "Set a virtual network default subnet.",
        "tags": [
          "vnet",
          "subnet"
        ],
        "operationId": "UpdateVNetDefaultSubnet",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual network to update.",
            "name": "vnetId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The ID of the subnet to set as default.",
            "name": "subnetId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated subnet object."
          },
          "404": {
            "description": "Invalid virtual network ID or subnet ID was provided."
          },
          "500": {
            "description": "Unable to assign the requested subnet as virtual network default."
          }
        }
      }
    },
    "/vnet/{vnetId}/subnets": {
      "get": {
        "description": "Returns the IDs of the subnets existing in the virtual network.",
        "tags": [
          "vnet",
          "subnet"
        ],
        "operationId": "GetVNetSubnets",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual network to query.",
            "name": "vnetId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of subnet IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Invalid virtual network ID was provided."
          }
        }
      }
    },
    "/volume": {
      "get": {
        "description": "Returns the IDs of storage volumes.",
        "tags": [
          "volume"
        ],
        "operationId": "GetAllVolumes",
        "responses": {
          "200": {
            "description": "Returns the an array of storage volume IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/volume/{volumeId}": {
      "get": {
        "description": "Returns a description of the storage volume.",
        "tags": [
          "volume"
        ],
        "operationId": "GetVolume",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the storage volume to get.",
            "name": "volumeId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the storage volume object.",
            "schema": {
              "$ref": "#/definitions/Volume"
            }
          },
          "404": {
            "description": "Invalid storage volume ID was provided."
          }
        }
      },
      "put": {
        "description": "Updates/resizes a storage volume configuration.",
        "tags": [
          "volume"
        ],
        "operationId": "UpdateVolume",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the storage volume to update.",
            "name": "volumeId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Volume"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated storage volume object.",
            "schema": {
              "$ref": "#/definitions/Volume"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid storage volume ID was provided."
          },
          "500": {
            "description": "Unable to update the storage volume."
          },
          "507": {
            "description": "Requested volume size is beyond associated project's quota in place."
          }
        }
      },
      "delete": {
        "description": "Deletes an existing storage volume.",
        "tags": [
          "volume"
        ],
        "operationId": "DeleteVolume",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the storage volume to delete.",
            "name": "volumeId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The storage volume has been successfully removed."
          },
          "404": {
            "description": "Invalid storage volume ID was provided."
          },
          "409": {
            "description": "The storage volume is not empty or still being referenced."
          },
          "500": {
            "description": "Unable to delete storage volume."
          }
        }
      }
    },
    "/zone": {
      "get": {
        "description": "Returns the IDs of registered zones.",
        "tags": [
          "zone"
        ],
        "operationId": "GetAllZones",
        "responses": {
          "200": {
            "description": "Returns the an array of zone IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/zone/{zoneId}": {
      "get": {
        "description": "Returns a description of the zone",
        "tags": [
          "zone"
        ],
        "operationId": "GetZone",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the zone to get.",
            "name": "zoneId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the zone object.",
            "schema": {
              "$ref": "#/definitions/Zone"
            }
          },
          "404": {
            "description": "Invalid zone ID was provided."
          }
        }
      },
      "put": {
        "description": "Updates a zone configuration.",
        "tags": [
          "zone"
        ],
        "operationId": "UpdateZone",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the zone to get.",
            "name": "zoneId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Zone"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated zone object.",
            "schema": {
              "$ref": "#/definitions/Zone"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid zone ID was provided."
          }
        }
      },
      "delete": {
        "description": "Deletes an existing zone.",
        "tags": [
          "zone"
        ],
        "operationId": "DeleteZone",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the zone to get.",
            "name": "zoneId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The zone has been successfully removed."
          },
          "404": {
            "description": "Invalid zone ID was provided."
          },
          "409": {
            "description": "The zone is not empty or still being referenced."
          },
          "500": {
            "description": "Unable to delete zone."
          }
        }
      }
    },
    "/zone/{zoneId}/host": {
      "post": {
        "description": "Creates a new host.",
        "tags": [
          "zone",
          "host"
        ],
        "operationId": "CreateHost",
        "parameters": [
          {
            "type": "string",
            "description": "the ID of the associated zone.",
            "name": "zoneId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Host"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created host object.",
            "schema": {
              "$ref": "#/definitions/Host"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid zone ID was provided."
          },
          "409": {
            "description": "Host already exists."
          },
          "500": {
            "description": "Unable to connect to host's libvirt."
          }
        }
      }
    },
    "/zone/{zoneId}/hosts": {
      "get": {
        "description": "Returns the IDs of the hosts existing in the zone.",
        "tags": [
          "zone",
          "host"
        ],
        "operationId": "GetZoneHosts",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the zone to query.",
            "name": "zoneId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of host IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Invalid zone ID was provided."
          }
        }
      }
    },
    "/zone/{zoneId}/netgw": {
      "post": {
        "description": "Creates a new network gateway.",
        "tags": [
          "zone",
          "netgw"
        ],
        "operationId": "CreateNetGW",
        "parameters": [
          {
            "type": "string",
            "description": "the ID of the associated zone.",
            "name": "zoneId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NetGW"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created network gateway object.",
            "schema": {
              "$ref": "#/definitions/NetGW"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid zone ID was provided."
          },
          "409": {
            "description": "Network gateway already exists."
          },
          "500": {
            "description": "Unable to connect to network gateway."
          }
        }
      }
    },
    "/zone/{zoneId}/netgws": {
      "get": {
        "description": "Returns the IDs of the hosts existing in the zone.",
        "tags": [
          "zone",
          "netgw"
        ],
        "operationId": "GetZoneNetGWs",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the zone to query.",
            "name": "zoneId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of network gateway IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Invalid zone ID was provided."
          }
        }
      }
    },
    "/zone/{zoneId}/pool": {
      "post": {
        "description": "Creates a new storage pool.",
        "tags": [
          "zone",
          "pool"
        ],
        "operationId": "CreatePool",
        "parameters": [
          {
            "type": "string",
            "description": "the ID of the associated zone.",
            "name": "zoneId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the ID of the associated host (useless for RBD pools, mandatory for local ones).",
            "name": "hostId",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StoragePool"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created storage pool object.",
            "schema": {
              "$ref": "#/definitions/StoragePool"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid zone ID was provided."
          },
          "409": {
            "description": "Pool already exists."
          },
          "500": {
            "description": "Unable to create storage pool."
          }
        }
      }
    },
    "/zone/{zoneId}/pool/{poolId}/default": {
      "put": {
        "description": "Set a zone's default storage pool.",
        "tags": [
          "zone",
          "pool"
        ],
        "operationId": "UpdateZoneDefaultPool",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the zone to update.",
            "name": "zoneId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The ID of the storage pool to set as default.",
            "name": "poolId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated project resources object."
          },
          "404": {
            "description": "Invalid zone ID or storage pool ID was provided."
          },
          "500": {
            "description": "Unable to assign the requested storage pool as zone's default."
          }
        }
      }
    },
    "/zone/{zoneId}/pools": {
      "get": {
        "description": "Returns the IDs of the pools existing in the zone.",
        "tags": [
          "zone",
          "pool"
        ],
        "operationId": "GetZonePools",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the zone to query.",
            "name": "zoneId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of storage pool IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Invalid zone ID was provided."
          }
        }
      }
    },
    "/zone/{zoneId}/vnet": {
      "post": {
        "description": "Creates a new virtual network.",
        "tags": [
          "zone",
          "vnet"
        ],
        "operationId": "CreateVNet",
        "parameters": [
          {
            "type": "string",
            "description": "the ID of the associated zone.",
            "name": "zoneId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VNet"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created virtual network object.",
            "schema": {
              "$ref": "#/definitions/VNet"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid zone ID was provided."
          },
          "409": {
            "description": "Virtual network already exists."
          },
          "500": {
            "description": "Unable to create virtual network."
          }
        }
      }
    },
    "/zone/{zoneId}/vnets": {
      "get": {
        "description": "Returns the IDs of the virtual networks existing in the zone.",
        "tags": [
          "zone",
          "vnet"
        ],
        "operationId": "GetZoneVNets",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the zone to query.",
            "name": "zoneId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of virtual network IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Invalid zone ID was provided."
          }
        }
      }
    }
  },
  "definitions": {
    "Adapter": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "addresses": {
          "description": "The network adapter list of associated IPv4 addresses.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "description": "The network adapter description.",
          "type": "string"
        },
        "id": {
          "description": "The network adapter ID (auto-generated).",
          "type": "string"
        },
        "mac": {
          "description": "The network adapter hardware address (e.g. 00:11:22:33:44:55). Auto-generated if unspecified.",
          "type": "string"
        },
        "name": {
          "description": "The network adapter name.",
          "type": "string"
        },
        "reserved": {
          "description": "The network adapter is a reserved adapter (e.g. router), where the same hardware address can be reused over several subnets.",
          "type": "boolean",
          "default": false
        }
      }
    },
    "Cost": {
      "description": "A key/value metadata.",
      "type": "object",
      "required": [
        "price",
        "currency"
      ],
      "properties": {
        "currency": {
          "description": "The associated currency.",
          "type": "string"
        },
        "price": {
          "description": "The unit price information.",
          "type": "integer",
          "format": "float"
        }
      }
    },
    "DnsRecord": {
      "type": "object",
      "required": [
        "name",
        "addresses"
      ],
      "properties": {
        "addresses": {
          "description": "A list of IPv4 addresses to be associated to the record.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "description": "The DNS record description.",
          "type": "string"
        },
        "domain": {
          "description": "The DNS record associated domain (inherited from associated project).",
          "type": "string"
        },
        "id": {
          "description": "The DNS record ID (auto-generated).",
          "type": "string"
        },
        "name": {
          "description": "The DNS record name (zone's entry).",
          "type": "string"
        }
      }
    },
    "Host": {
      "type": "object",
      "required": [
        "name",
        "protocol",
        "address"
      ],
      "properties": {
        "address": {
          "description": "The host libvirt's IPv4 address.",
          "type": "string"
        },
        "cost": {
          "description": "Cost associated to the host.",
          "type": "object",
          "$ref": "#/definitions/Cost"
        },
        "description": {
          "description": "The host description.",
          "type": "string"
        },
        "id": {
          "description": "The host ID (auto-generated).",
          "type": "string"
        },
        "name": {
          "description": "The host name.",
          "type": "string"
        },
        "port": {
          "description": "The host libvirt's port.",
          "type": "integer"
        },
        "protocol": {
          "description": "The protocol to use to issue libvirt connection.",
          "type": "string",
          "enum": [
            "tcp",
            "tls"
          ]
        },
        "tls": {
          "description": "The host libvirt's TLS configuration.",
          "type": "object",
          "required": [
            "key",
            "cert",
            "ca"
          ],
          "properties": {
            "ca": {
              "description": "The TLS certificate of authority.",
              "type": "string"
            },
            "cert": {
              "description": "The TLS client public cert.",
              "type": "string"
            },
            "key": {
              "description": "The TLS client private key.",
              "type": "string"
            }
          }
        }
      }
    },
    "HostCaps": {
      "type": "object",
      "required": [
        "version",
        "uuid",
        "cpu",
        "memory"
      ],
      "properties": {
        "cpu": {
          "description": "the host CPU characteristics",
          "type": "object",
          "required": [
            "arch",
            "model",
            "vendor",
            "sockets",
            "cores",
            "threads"
          ],
          "properties": {
            "arch": {
              "description": "the host CPU architecture",
              "type": "string"
            },
            "cores": {
              "description": "the host CPU number of cores",
              "type": "integer"
            },
            "model": {
              "description": "the host CPU model",
              "type": "string"
            },
            "sockets": {
              "description": "the host CPU number of sockets",
              "type": "integer"
            },
            "threads": {
              "description": "the host CPU number of threads",
              "type": "integer"
            },
            "vendor": {
              "description": "the host CPU vendor",
              "type": "string"
            }
          }
        },
        "memory": {
          "description": "the host memory size in bytes",
          "type": "integer"
        },
        "uuid": {
          "description": "the host UUID",
          "type": "string"
        },
        "version": {
          "description": "The host libvirt version.",
          "type": "string"
        }
      }
    },
    "Instance": {
      "type": "object",
      "required": [
        "name",
        "memory",
        "vcpus"
      ],
      "properties": {
        "adapters": {
          "description": "a list of existing network adapters to be connected to the instance.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "description": "The virtual machine description.",
          "type": "string"
        },
        "id": {
          "description": "The virtual machine instance ID  (auto-generated).",
          "type": "string"
        },
        "memory": {
          "description": "the virtual machine's memory size (in bytes).",
          "type": "integer"
        },
        "name": {
          "description": "The virtual machine name",
          "type": "string"
        },
        "vcpus": {
          "description": "the virtual machine's number of vCPUs.",
          "type": "integer"
        },
        "volumes": {
          "description": "a list of existing storage volumes (i.e. disks) to be connected to the instance.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "InstanceState": {
      "type": "object",
      "required": [
        "state",
        "reason"
      ],
      "properties": {
        "reason": {
          "description": "the reason of the state of the VM",
          "type": "string"
        },
        "state": {
          "description": "the state of the VM",
          "type": "string"
        }
      }
    },
    "IpRange": {
      "description": "A reserved IPv4 pool range, non-addressable by Kowabunga.",
      "type": "object",
      "required": [
        "first",
        "last"
      ],
      "properties": {
        "first": {
          "description": "The range's first IP address.",
          "type": "string"
        },
        "last": {
          "description": "The range's last IP address.",
          "type": "string"
        }
      }
    },
    "KCE": {
      "description": "Kowabunga Compute Engine (KCE) is a wrapper object for bare virtual machines. It consists of an instance, one to several attached volumes and 2 network adapters (a private one, a public one). This is the prefered way for creating virtual machines. IP addresses will be automatically assigned.",
      "type": "object",
      "required": [
        "name",
        "memory",
        "vcpus",
        "disk"
      ],
      "properties": {
        "data_disk": {
          "description": "The KCE virtual machine's extra data disk size (in bytes). If unspecified, no extra data disk will be assigned.",
          "type": "integer",
          "default": 0
        },
        "description": {
          "description": "The KCE virtual machine description.",
          "type": "string"
        },
        "disk": {
          "description": "The KCE virtual machine's OS disk size (in bytes).",
          "type": "integer"
        },
        "id": {
          "description": "The KCE ID  (auto-generated).",
          "type": "string"
        },
        "ip": {
          "description": "The KCE virtual machine's assigned private IPv4 address (read-only).",
          "type": "string"
        },
        "memory": {
          "description": "The KCE virtual machine's memory size (in bytes).",
          "type": "integer"
        },
        "name": {
          "description": "The KCE virtual machine name",
          "type": "string"
        },
        "vcpus": {
          "description": "The KCE virtual machine's number of vCPUs.",
          "type": "integer"
        }
      }
    },
    "Metadata": {
      "description": "A key/value metadata.",
      "type": "object",
      "properties": {
        "key": {
          "description": "The metadata key.",
          "type": "string"
        },
        "value": {
          "description": "The metadata value.",
          "type": "string"
        }
      }
    },
    "NetGW": {
      "type": "object",
      "required": [
        "name",
        "address",
        "token"
      ],
      "properties": {
        "address": {
          "description": "The network gateway IPv4 address.",
          "type": "string"
        },
        "description": {
          "description": "The network gateway description.",
          "type": "string"
        },
        "id": {
          "description": "The network gateway ID (auto-generated).",
          "type": "string"
        },
        "name": {
          "description": "The network gateway name.",
          "type": "string"
        },
        "port": {
          "description": "The network gateway service port (default to 8080).",
          "type": "integer",
          "default": 8080
        },
        "token": {
          "description": "The network gateway admin API token.",
          "type": "string"
        }
      }
    },
    "Project": {
      "type": "object",
      "required": [
        "name",
        "owner",
        "email"
      ],
      "properties": {
        "bootstrap_pubkey": {
          "description": "The project default public SSH key, to be associated to bootstrap user. Will use Kowabunga's default configuration one if unspecified.",
          "type": "string"
        },
        "bootstrap_user": {
          "description": "The project default service user name, created at cloud-init instance bootstrap phase. Will use Kowabunga's default configuration one if unspecified.",
          "type": "string"
        },
        "description": {
          "description": "The project description.",
          "type": "string"
        },
        "domain": {
          "description": "The project associated internal domain name (e.g. myproject.acme.com).",
          "type": "string"
        },
        "email": {
          "description": "The project associated email address, used to receive notifications.",
          "type": "string"
        },
        "id": {
          "description": "The project ID (auto-generated).",
          "type": "string"
        },
        "metadatas": {
          "description": "A list of metadata to be associated to the project",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Metadata"
          }
        },
        "name": {
          "description": "The project name.",
          "type": "string"
        },
        "owner": {
          "description": "The project's owner name.",
          "type": "string"
        },
        "private_subnets": {
          "description": "The assigned project VPC private subnets IDs (read-only).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ZoneSubnet"
          }
        },
        "quotas": {
          "description": "The global project resource quotas (0 for unlimited)",
          "type": "object",
          "$ref": "#/definitions/ProjectResources"
        },
        "root_password": {
          "description": "The project default root password, set at cloud-init instance bootstrap phase. Will be randomly auto-generated at each instance creation if unspecified.",
          "type": "string"
        },
        "tags": {
          "description": "A list of tags to be associated to the project.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ProjectResources": {
      "description": "The global project resource quotas/usage (0 for unlimited).",
      "type": "object",
      "properties": {
        "instances": {
          "description": "the maximum number of instances allowed to be spawned.",
          "type": "integer",
          "format": "uint16"
        },
        "memory": {
          "description": "the maximum total memory (in bytes) allowed to be consumed by sum of all instances.",
          "type": "integer",
          "format": "uint64"
        },
        "storage": {
          "description": "the maximum total disk capacity allowed to be consumed by sum of all instances.",
          "type": "integer",
          "format": "uint64"
        },
        "vcpus": {
          "description": "the maximum total number of vCPUs allowed to be consumed by sum of all instances.",
          "type": "integer",
          "format": "uint16"
        }
      }
    },
    "Region": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "description": {
          "description": "The region description.",
          "type": "string"
        },
        "id": {
          "description": "The region ID (auto-generated).",
          "type": "string"
        },
        "name": {
          "description": "The region name.",
          "type": "string"
        }
      }
    },
    "StoragePool": {
      "type": "object",
      "required": [
        "name",
        "pool"
      ],
      "properties": {
        "ceph_address": {
          "description": "The local Ceph Monitor(s) address or FQDN, empty for local pool type.",
          "type": "string",
          "default": "localhost"
        },
        "ceph_port": {
          "description": "The local Ceph Monitor(s) port (default 3300), empty for local pool type.",
          "type": "integer",
          "default": 3300
        },
        "ceph_secret_uuid": {
          "description": "The libvirt secret UUID for CephX authentication, empty for local pool type.",
          "type": "string"
        },
        "cost": {
          "description": "Cost associated to the storage pool.",
          "type": "object",
          "$ref": "#/definitions/Cost"
        },
        "description": {
          "description": "The storage pool description.",
          "type": "string"
        },
        "id": {
          "description": "The storage pool ID (auto-generated).",
          "type": "string"
        },
        "name": {
          "description": "The storage pool name.",
          "type": "string"
        },
        "pool": {
          "description": "The libvirt pool name.",
          "type": "string"
        },
        "type": {
          "description": "The storage pool type.",
          "type": "string",
          "default": "rbd",
          "enum": [
            "local",
            "rbd"
          ]
        }
      }
    },
    "Subnet": {
      "type": "object",
      "required": [
        "name",
        "cidr",
        "gateway"
      ],
      "properties": {
        "cidr": {
          "description": "The subnet CIDR (e.g. 192.168.0.0/24).",
          "type": "string"
        },
        "description": {
          "description": "The subnet description.",
          "type": "string"
        },
        "dns": {
          "description": "The subnet DNS server IP address (gateway value if unspecified).",
          "type": "string"
        },
        "extra_routes": {
          "description": "The list of extra routes to be access through designated gateway (format is 10.0.0.0/8).",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "gateway": {
          "description": "The subnet router/gateway IP address (e.g. 192.168.0.254).",
          "type": "string"
        },
        "id": {
          "description": "The subnet ID (auto-generated).",
          "type": "string"
        },
        "name": {
          "description": "The subnet name.",
          "type": "string"
        },
        "reserved": {
          "description": "The subnet list of reserved IPv4 ranges (i.e. no IP address can be assigned from there).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IpRange"
          }
        }
      }
    },
    "Template": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "description": {
          "description": "The volume template description.",
          "type": "string"
        },
        "id": {
          "description": "The volume template ID (auto-generated).",
          "type": "string"
        },
        "name": {
          "description": "The volume template name.",
          "type": "string"
        },
        "os": {
          "description": "Type of operating system if OS kind (useful to determine cloud-init parameters for instance)",
          "type": "string",
          "default": "linux",
          "enum": [
            "linux",
            "windows"
          ]
        },
        "type": {
          "description": "The type of volume template.",
          "type": "string",
          "default": "os",
          "enum": [
            "os",
            "raw"
          ]
        }
      }
    },
    "VNet": {
      "type": "object",
      "required": [
        "name",
        "vlan",
        "interface"
      ],
      "properties": {
        "description": {
          "description": "The virtual network description.",
          "type": "string"
        },
        "id": {
          "description": "The virtual network ID (auto-generated).",
          "type": "string"
        },
        "interface": {
          "description": "The libvirt's bridge network interface (brX).",
          "type": "string"
        },
        "name": {
          "description": "The virtual network name.",
          "type": "string"
        },
        "private": {
          "description": "Is the virtual network adapter connected to private (LAN) or public (WAN) physical network ?",
          "type": "boolean",
          "default": true
        },
        "vlan": {
          "description": "The VLAN identifier.",
          "type": "integer"
        }
      }
    },
    "Volume": {
      "type": "object",
      "required": [
        "name",
        "type",
        "size"
      ],
      "properties": {
        "description": {
          "description": "The storage volume description.",
          "type": "string"
        },
        "id": {
          "description": "The storage volume ID (auto-generated).",
          "type": "string"
        },
        "name": {
          "description": "The storage volume name.",
          "type": "string"
        },
        "resizable": {
          "description": "Is the storage volume allowed to grow (filesystem dependant) ?",
          "type": "boolean",
          "default": false
        },
        "size": {
          "description": "The storage volume size in bytes.",
          "type": "integer"
        },
        "type": {
          "description": "The type of storage volume.",
          "type": "string",
          "enum": [
            "os",
            "iso",
            "raw"
          ]
        }
      }
    },
    "Zone": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "description": {
          "description": "The zone description.",
          "type": "string"
        },
        "id": {
          "description": "The zone ID (auto-generated).",
          "type": "string"
        },
        "name": {
          "description": "The zone name.",
          "type": "string"
        }
      }
    },
    "ZoneSubnet": {
      "description": "A zone/subnet map.",
      "type": "object",
      "properties": {
        "key": {
          "description": "The zone key.",
          "type": "string"
        },
        "value": {
          "description": "The subnet ID.",
          "type": "string"
        }
      }
    },
    "principal": {
      "type": "string"
    }
  },
  "securityDefinitions": {
    "key": {
      "type": "apiKey",
      "name": "x-token",
      "in": "header"
    }
  },
  "security": [
    {
      "key": []
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Kvm Orchestrator With A BUNch of Goods Added",
    "title": "Kowabunga",
    "version": "0.7.7"
  },
  "basePath": "/api/v1",
  "paths": {
    "/adapter": {
      "get": {
        "description": "Returns the IDs of network adapters.",
        "tags": [
          "adapter"
        ],
        "operationId": "GetAllAdapters",
        "responses": {
          "200": {
            "description": "Returns the an array of network adapter IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/adapter/{adapterId}": {
      "get": {
        "description": "Returns a description of the network adapter.",
        "tags": [
          "adapter"
        ],
        "operationId": "GetAdapter",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the network adapter to get.",
            "name": "adapterId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the network adapter object.",
            "schema": {
              "$ref": "#/definitions/Adapter"
            }
          },
          "404": {
            "description": "Invalid network adapter ID was provided."
          }
        }
      },
      "put": {
        "description": "Updates a network adapter configuration.",
        "tags": [
          "adapter"
        ],
        "operationId": "UpdateAdapter",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the network adapter to update.",
            "name": "adapterId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Adapter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated network adapter object.",
            "schema": {
              "$ref": "#/definitions/Adapter"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid network adapter ID was provided."
          }
        }
      },
      "delete": {
        "description": "Deletes an existing network adapter.",
        "tags": [
          "adapter"
        ],
        "operationId": "DeleteAdapter",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the network adapter to delete.",
            "name": "adapterId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The network adapter has been successfully removed."
          },
          "404": {
            "description": "Invalid network adapter ID was provided."
          },
          "409": {
            "description": "The network adapter is not empty or still being referenced."
          },
          "500": {
            "description": "Unable to delete network adapter."
          }
        }
      }
    },
    "/host": {
      "get": {
        "description": "Returns the IDs of registered hosts.",
        "tags": [
          "host"
        ],
        "operationId": "GetAllHosts",
        "responses": {
          "200": {
            "description": "Returns the an array of host IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/host/{hostId}": {
      "get": {
        "description": "Returns a description of the host",
        "tags": [
          "host"
        ],
        "operationId": "GetHost",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the host to get.",
            "name": "hostId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the host object.",
            "schema": {
              "$ref": "#/definitions/Host"
            }
          },
          "404": {
            "description": "Invalid host ID was provided."
          }
        }
      },
      "put": {
        "description": "Updates a host configuration.",
        "tags": [
          "host"
        ],
        "operationId": "UpdateHost",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the host to update.",
            "name": "hostId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Host"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated host object.",
            "schema": {
              "$ref": "#/definitions/Host"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid host ID was provided."
          }
        }
      },
      "delete": {
        "description": "Deletes an existing host.",
        "tags": [
          "host"
        ],
        "operationId": "DeleteHost",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the host to delete.",
            "name": "hostId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The host has been successfully removed."
          },
          "404": {
            "description": "Invalid host ID was provided."
          },
          "409": {
            "description": "The host is not empty or still being referenced."
          },
          "500": {
            "description": "Unable to disconnect from host's libvirt."
          }
        }
      }
    },
    "/host/{hostId}/caps": {
      "get": {
        "description": "Returns the host capabilities.",
        "tags": [
          "host"
        ],
        "operationId": "GetHostCaps",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the host to query.",
            "name": "hostId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the host capabilities.",
            "schema": {
              "$ref": "#/definitions/HostCaps"
            }
          },
          "404": {
            "description": "Invalid host ID was provided."
          }
        }
      }
    },
    "/host/{hostId}/instances": {
      "get": {
        "description": "Returns the UUIDs of the virtual machines running on the host.",
        "tags": [
          "host",
          "instance"
        ],
        "operationId": "GetHostInstances",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the host to query.",
            "name": "hostId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the an array of virtual machine UUIDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Invalid host ID was provided."
          }
        }
      }
    },
    "/instance": {
      "get": {
        "description": "Returns the IDs of registered virtual machines.",
        "tags": [
          "instance"
        ],
        "operationId": "GetAllInstances",
        "responses": {
          "200": {
            "description": "Returns the an array of virtual machines IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/instance/{instanceId}": {
      "get": {
        "description": "Returns the description of the virtual machine.",
        "tags": [
          "instance"
        ],
        "operationId": "GetInstance",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual machine to query.",
            "name": "instanceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the virtual machine object.",
            "schema": {
              "$ref": "#/definitions/Instance"
            }
          },
          "404": {
            "description": "Invalid instance ID was provided."
          }
        }
      },
      "put": {
        "description": "Updates a virtual machine configuration.",
        "tags": [
          "instance"
        ],
        "operationId": "UpdateInstance",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual machine instance.",
            "name": "instanceId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Instance"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated virtual machine instance object.",
            "schema": {
              "$ref": "#/definitions/Instance"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid virtual machine instance ID was provided."
          },
          "500": {
            "description": "Unable to update the virtual machine instance."
          },
          "507": {
            "description": "Requested instance characteristics are beyond associated project's quota in place."
          }
        }
      },
      "delete": {
        "description": "Deletes an existing virtual machine instance.",
        "tags": [
          "instance"
        ],
        "operationId": "DeleteInstance",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual machine instance to delete.",
            "name": "instanceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The instance has been successfully removed."
          },
          "404": {
            "description": "Invalid instance ID was provided."
          },
          "409": {
            "description": "The instance is not empty or still being referenced."
          },
          "500": {
            "description": "Unable to delete instance."
          }
        }
      }
    },
    "/instance/{instanceId}/reboot": {
      "post": {
        "description": "Perform a virtual machine software reboot.",
        "tags": [
          "instance"
        ],
        "operationId": "RebootInstance",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual machine to query.",
            "name": "instanceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The virtual machine has been rebooted successfully."
          },
          "404": {
            "description": "Invalid instance ID was provided."
          },
          "500": {
            "description": "An error occurred when trying to reboot the virtual machine."
          }
        }
      }
    },
    "/instance/{instanceId}/reset": {
      "post": {
        "description": "Perform a virtual machine hardware reset.",
        "tags": [
          "instance"
        ],
        "operationId": "ResetInstance",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual machine to query.",
            "name": "instanceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The virtual machine has been reseted successfully."
          },
          "404": {
            "description": "Invalid instance ID was provided."
          },
          "500": {
            "description": "An error occurred when trying to reset the virtual machine."
          }
        }
      }
    },
    "/instance/{instanceId}/resume": {
      "post": {
        "description": "Perform a virtual machine software PM resume.",
        "tags": [
          "instance"
        ],
        "operationId": "ResumeInstance",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual machine to query.",
            "name": "instanceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The virtual machine has been resumed successfully."
          },
          "404": {
            "description": "Invalid instance ID was provided."
          },
          "500": {
            "description": "An error occurred when trying to resume the virtual machine."
          }
        }
      }
    },
    "/instance/{instanceId}/shutdown": {
      "post": {
        "description": "Initiate a software shutdown of a virtual machine.",
        "tags": [
          "instance"
        ],
        "operationId": "ShutdownInstance",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual machine to query.",
            "name": "instanceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The virtual machine has been shut down successfully."
          },
          "404": {
            "description": "Invalid instance ID was provided."
          },
          "500": {
            "description": "An error occurred when trying to shut down the virtual machine."
          }
        }
      }
    },
    "/instance/{instanceId}/start": {
      "post": {
        "description": "Boot up a virtual machine.",
        "tags": [
          "instance"
        ],
        "operationId": "StartInstance",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual machine to query.",
            "name": "instanceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The virtual machine has been started successfully."
          },
          "404": {
            "description": "Invalid instance ID was provided."
          },
          "500": {
            "description": "An error occurred when trying to start the virtual machine."
          }
        }
      }
    },
    "/instance/{instanceId}/state": {
      "get": {
        "description": "Returns the state of the virtual machine.",
        "tags": [
          "instance"
        ],
        "operationId": "GetInstanceState",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual machine to query.",
            "name": "instanceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the virtual machine state object.",
            "schema": {
              "$ref": "#/definitions/InstanceState"
            }
          },
          "404": {
            "description": "Invalid instance ID was provided."
          }
        }
      }
    },
    "/instance/{instanceId}/stop": {
      "post": {
        "description": "Initiate a hardware stop of a virtual machine.",
        "tags": [
          "instance"
        ],
        "operationId": "StopInstance",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual machine to query.",
            "name": "instanceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The virtual machine has been stopped successfully."
          },
          "404": {
            "description": "Invalid instance ID was provided."
          },
          "500": {
            "description": "An error occurred when trying to stop the virtual machine."
          }
        }
      }
    },
    "/instance/{instanceId}/suspend": {
      "post": {
        "description": "Perform a virtual machine software PM suspend.",
        "tags": [
          "instance"
        ],
        "operationId": "SuspendInstance",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual machine to query.",
            "name": "instanceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The virtual machine has been suspended successfully."
          },
          "404": {
            "description": "Invalid instance ID was provided."
          },
          "500": {
            "description": "An error occurred when trying to suspend the virtual machine."
          }
        }
      }
    },
    "/kce": {
      "get": {
        "description": "Returns the IDs of registered KCE virtual machines.",
        "tags": [
          "kce"
        ],
        "operationId": "GetAllKCEs",
        "responses": {
          "200": {
            "description": "Returns the an array of KCE virtual machines IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/kce/{kceId}": {
      "get": {
        "description": "Returns the description of the KCE virtual machine.",
        "tags": [
          "kce"
        ],
        "operationId": "GetKCE",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the KCE virtual machine to query.",
            "name": "kceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the KCE virtual machine object.",
            "schema": {
              "$ref": "#/definitions/KCE"
            }
          },
          "404": {
            "description": "Invalid KCE ID was provided."
          }
        }
      },
      "put": {
        "description": "Updates a KCE virtual machine configuration.",
        "tags": [
          "kce"
        ],
        "operationId": "UpdateKCE",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the KCE virtual machine object.",
            "name": "kceId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/KCE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated KCE virtual machine object.",
            "schema": {
              "$ref": "#/definitions/KCE"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid KCE virtual machine ID was provided."
          },
          "500": {
            "description": "Unable to update the KCE virtual machine."
          },
          "507": {
            "description": "Requested KCE characteristics are beyond associated project's quota in place."
          }
        }
      },
      "delete": {
        "description": "Deletes an existing KCE virtual machine.",
        "tags": [
          "kce"
        ],
        "operationId": "DeleteKCE",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the KCE virtual machine to delete.",
            "name": "kceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The KCE virtual machine has been successfully removed."
          },
          "404": {
            "description": "Invalid KCE ID was provided."
          },
          "409": {
            "description": "The KCE virtual machine is not empty or still being referenced."
          },
          "500": {
            "description": "Unable to delete KCE virtual machine."
          }
        }
      }
    },
    "/kce/{kceId}/reboot": {
      "post": {
        "description": "Perform a KCE virtual machine software reboot.",
        "tags": [
          "kce"
        ],
        "operationId": "RebootKCE",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the KCE virtual machine to query.",
            "name": "kceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The KCE virtual machine has been rebooted successfully."
          },
          "404": {
            "description": "Invalid KCE ID was provided."
          },
          "500": {
            "description": "An error occurred when trying to reboot the KCE virtual machine."
          }
        }
      }
    },
    "/kce/{kceId}/reset": {
      "post": {
        "description": "Perform a KCE virtual machine hardware reset.",
        "tags": [
          "kce"
        ],
        "operationId": "ResetKCE",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the KCE virtual machine to query.",
            "name": "kceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The KCE virtual machine has been reseted successfully."
          },
          "404": {
            "description": "Invalid KCE ID was provided."
          },
          "500": {
            "description": "An error occurred when trying to reset the KCE virtual machine."
          }
        }
      }
    },
    "/kce/{kceId}/resume": {
      "post": {
        "description": "Perform a KCE virtual machine software PM resume.",
        "tags": [
          "kce"
        ],
        "operationId": "ResumeKCE",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the KCE virtual machine to query.",
            "name": "kceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The KCE virtual machine has been resumed successfully."
          },
          "404": {
            "description": "Invalid KCE ID was provided."
          },
          "500": {
            "description": "An error occurred when trying to resume the KCE virtual machine."
          }
        }
      }
    },
    "/kce/{kceId}/shutdown": {
      "post": {
        "description": "Initiate a software shutdown of a KCE virtual machine.",
        "tags": [
          "kce"
        ],
        "operationId": "ShutdownKCE",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the KCE virtual machine to query.",
            "name": "kceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The KCE virtual machine has been shut down successfully."
          },
          "404": {
            "description": "Invalid KCE ID was provided."
          },
          "500": {
            "description": "An error occurred when trying to shut down the KCE virtual machine."
          }
        }
      }
    },
    "/kce/{kceId}/start": {
      "post": {
        "description": "Boot up a KCE virtual machine.",
        "tags": [
          "kce"
        ],
        "operationId": "StartKCE",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the KCE virtual machine to query.",
            "name": "kceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The KCE virtual machine has been started successfully."
          },
          "404": {
            "description": "Invalid KCE ID was provided."
          },
          "500": {
            "description": "An error occurred when trying to start the KCE virtual machine."
          }
        }
      }
    },
    "/kce/{kceId}/state": {
      "get": {
        "description": "Returns the state of the KCE virtual machine.",
        "tags": [
          "kce"
        ],
        "operationId": "GetKCEState",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual machine to query.",
            "name": "kceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the KCE virtual machine state object.",
            "schema": {
              "$ref": "#/definitions/InstanceState"
            }
          },
          "404": {
            "description": "Invalid KCE ID was provided."
          }
        }
      }
    },
    "/kce/{kceId}/stop": {
      "post": {
        "description": "Initiate a hardware stop of a KCE virtual machine.",
        "tags": [
          "kce"
        ],
        "operationId": "StopKCE",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the KCE virtual machine to query.",
            "name": "kceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The KCE virtual machine has been stopped successfully."
          },
          "404": {
            "description": "Invalid KCE ID was provided."
          },
          "500": {
            "description": "An error occurred when trying to stop the KCE virtual machine."
          }
        }
      }
    },
    "/kce/{kceId}/suspend": {
      "post": {
        "description": "Perform a KCE virtual machine software PM suspend.",
        "tags": [
          "kce"
        ],
        "operationId": "SuspendKCE",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual machine to query.",
            "name": "kceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The KCE virtual machine has been suspended successfully."
          },
          "404": {
            "description": "Invalid KCE ID was provided."
          },
          "500": {
            "description": "An error occurred when trying to suspend the KCE virtual machine."
          }
        }
      }
    },
    "/netgw": {
      "get": {
        "description": "Returns the IDs of network gateways.",
        "tags": [
          "netgw"
        ],
        "operationId": "GetAllNetGWs",
        "responses": {
          "200": {
            "description": "Returns an array of network gateway IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/netgw/{netgwId}": {
      "get": {
        "description": "Returns a description of the network gateway",
        "tags": [
          "netgw"
        ],
        "operationId": "GetNetGW",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the network gateway to get.",
            "name": "netgwId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the network gateway object.",
            "schema": {
              "$ref": "#/definitions/NetGW"
            }
          },
          "404": {
            "description": "Invalid network gateway ID was provided."
          }
        }
      },
      "put": {
        "description": "Updates a network gateway configuration.",
        "tags": [
          "netgw"
        ],
        "operationId": "UpdateNetGW",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the network gateway to get.",
            "name": "netgwId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NetGW"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated network gateway object.",
            "schema": {
              "$ref": "#/definitions/NetGW"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid network gateway ID was provided."
          }
        }
      },
      "delete": {
        "description": "Deletes an existing network gateway.",
        "tags": [
          "netgw"
        ],
        "operationId": "DeleteNetGW",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the network gateway to get.",
            "name": "netgwId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The network gateway has been successfully removed."
          },
          "404": {
            "description": "Invalid network gateway ID was provided."
          },
          "409": {
            "description": "The network gateway is not empty or still being referenced."
          },
          "500": {
            "description": "Unable to delete network gateway."
          }
        }
      }
    },
    "/pool": {
      "get": {
        "description": "Returns the IDs of registered pools.",
        "tags": [
          "pool"
        ],
        "operationId": "GetAllPools",
        "responses": {
          "200": {
            "description": "Returns the an array of pool IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/pool/{poolId}": {
      "get": {
        "description": "Returns a description of the pool",
        "tags": [
          "pool"
        ],
        "operationId": "GetPool",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the pool to get.",
            "name": "poolId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the pool object.",
            "schema": {
              "$ref": "#/definitions/StoragePool"
            }
          },
          "404": {
            "description": "Invalid pool ID was provided."
          }
        }
      },
      "put": {
        "description": "Updates a pool configuration.",
        "tags": [
          "pool"
        ],
        "operationId": "UpdatePool",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the pool to get.",
            "name": "poolId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/StoragePool"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated pool object.",
            "schema": {
              "$ref": "#/definitions/StoragePool"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid pool ID was provided."
          }
        }
      },
      "delete": {
        "description": "Deletes an existing pool.",
        "tags": [
          "pool"
        ],
        "operationId": "DeletePool",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the pool to get.",
            "name": "poolId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The pool has been successfully removed."
          },
          "404": {
            "description": "Invalid pool ID was provided."
          },
          "409": {
            "description": "The pool is not empty or still being referenced."
          },
          "500": {
            "description": "Unable to delete pool."
          }
        }
      }
    },
    "/pool/{poolId}/template": {
      "post": {
        "description": "Creates a new volume template.",
        "tags": [
          "pool",
          "template"
        ],
        "operationId": "CreateTemplate",
        "parameters": [
          {
            "type": "string",
            "description": "the ID of the associated storage pool.",
            "name": "poolId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Template"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created volume template.",
            "schema": {
              "$ref": "#/definitions/Template"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid storage pool ID was provided."
          },
          "409": {
            "description": "Template already exists."
          },
          "500": {
            "description": "Unable to create template."
          }
        }
      }
    },
    "/pool/{poolId}/template/{templateId}/default": {
      "put": {
        "description": "Set a storage pool default volume template.",
        "tags": [
          "pool",
          "template"
        ],
        "operationId": "UpdatePoolDefaultTemplate",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the storage pool to update.",
            "name": "poolId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The ID of the volume template to set as default.",
            "name": "templateId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns success."
          },
          "404": {
            "description": "Invalid storage pool ID or volume template ID was provided."
          },
          "500": {
            "description": "Unable to assign the requested volume template as storage pool default."
          }
        }
      }
    },
    "/pool/{poolId}/templates": {
      "get": {
        "description": "Returns the IDs of the volume templates existing in the storage pool.",
        "tags": [
          "pool",
          "templates"
        ],
        "operationId": "GetPoolTemplates",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the storage pool to query.",
            "name": "poolId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of volume template IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Invalid storage pool ID was provided."
          }
        }
      }
    },
    "/pool/{poolId}/volumes": {
      "get": {
        "description": "Returns the IDs of the storage volumes existing in the pool.",
        "tags": [
          "pool",
          "volume"
        ],
        "operationId": "GetPoolVolumes",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the pool to query.",
            "name": "poolId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of storage volume IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Invalid pool ID was provided."
          }
        }
      }
    },
    "/project": {
      "get": {
        "description": "Returns the IDs of registered projects.",
        "tags": [
          "project"
        ],
        "operationId": "GetAllProjects",
        "responses": {
          "200": {
            "description": "Returns the an array of project IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "post": {
        "description": "Creates a new project.",
        "tags": [
          "project"
        ],
        "operationId": "CreateProject",
        "parameters": [
          {
            "type": "integer",
            "default": 26,
            "description": "The minimum VPC subnet size to be affected to the project. WARNING, this cannot be changed later.",
            "name": "subnetSize",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Whether or not to send a notification email at resource creation.",
            "name": "notify",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created project object.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "409": {
            "description": "Project already exists."
          },
          "500": {
            "description": "Unable to create the requested project."
          },
          "507": {
            "description": "The expected VPC subnet size cannot be assigned."
          }
        }
      }
    },
    "/project/{projectId}": {
      "get": {
        "description": "Returns a description of the project",
        "tags": [
          "project"
        ],
        "operationId": "GetProject",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the project to get.",
            "name": "projectId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the project object.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "404": {
            "description": "Invalid project ID was provided."
          }
        }
      },
      "put": {
        "description": "Updates a project configuration.",
        "tags": [
          "project"
        ],
        "operationId": "UpdateProject",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the project to update.",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated project object.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid project ID was provided."
          }
        }
      },
      "delete": {
        "description": "Deletes an existing project.",
        "tags": [
          "project"
        ],
        "operationId": "DeleteProject",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the project to delete.",
            "name": "projectId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The project has been successfully removed."
          },
          "404": {
            "description": "Invalid project ID was provided."
          },
          "409": {
            "description": "The project is not empty or still being referenced."
          },
          "500": {
            "description": "Unable to delete project."
          }
        }
      }
    },
    "/project/{projectId}/record": {
      "post": {
        "description": "Creates a new DNS record in specified project.",
        "tags": [
          "project",
          "record"
        ],
        "operationId": "CreateProjectDnsRecord",
        "parameters": [
          {
            "type": "string",
            "description": "the ID of the associated project.",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DnsRecord"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created DNS record object.",
            "schema": {
              "$ref": "#/definitions/DnsRecord"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid project ID was provided."
          },
          "409": {
            "description": "DNS record already exists."
          },
          "500": {
            "description": "Unable to create the DNS record."
          }
        }
      }
    },
    "/project/{projectId}/records": {
      "get": {
        "description": "Returns the IDs of the DNS records existing in the project.",
        "tags": [
          "project",
          "record"
        ],
        "operationId": "GetProjectDnsRecords",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the project to query.",
            "name": "projectId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of DNS record IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Invalid project ID was provided."
          }
        }
      }
    },
    "/project/{projectId}/usage": {
      "get": {
        "description": "Returns the current resources usage for the project.",
        "tags": [
          "project"
        ],
        "operationId": "GetProjectUsage",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the project to query.",
            "name": "projectId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the project resources object.",
            "schema": {
              "$ref": "#/definitions/ProjectResources"
            }
          },
          "404": {
            "description": "Invalid project ID was provided."
          }
        }
      }
    },
    "/project/{projectId}/zone/{zoneId}/instance": {
      "post": {
        "description": "Creates a new virtual machine instance in specified zone.",
        "tags": [
          "project",
          "zone",
          "instance"
        ],
        "operationId": "CreateProjectZoneInstance",
        "parameters": [
          {
            "type": "string",
            "description": "the ID of the associated project.",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the ID of the associated zone.",
            "name": "zoneId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Instance"
            }
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Whether or not to send a notification email at resource creation.",
            "name": "notify",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created virtual machine instance object.",
            "schema": {
              "$ref": "#/definitions/Instance"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid project or zone ID was provided."
          },
          "409": {
            "description": "Virtual machine instance already exists."
          },
          "500": {
            "description": "Unable to create the virtual machine instance."
          },
          "507": {
            "description": "Requested volume characteristics are beyond project's quota in place."
          }
        }
      }
    },
    "/project/{projectId}/zone/{zoneId}/instances": {
      "get": {
        "description": "Returns the IDs of the virtual machine instances existing in the project in the specified zone.",
        "tags": [
          "project",
          "zone",
          "instance"
        ],
        "operationId": "GetProjectZoneInstances",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the project to query.",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The ID of the zone to query.",
            "name": "zoneId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of virtual machine instance IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Invalid project or zone ID was provided."
          }
        }
      }
    },
    "/project/{projectId}/zone/{zoneId}/kce": {
      "post": {
        "description": "Creates a new KCE virtual machine in specified zone.",
        "tags": [
          "project",
          "zone",
          "kce"
        ],
        "operationId": "CreateProjectZoneKce",
        "parameters": [
          {
            "type": "string",
            "description": "the ID of the associated project.",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the ID of the associated zone.",
            "name": "zoneId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the ID of the associated storage pool (optional, zone's default if unspecified).",
            "name": "poolId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "the ID of the template to clone the OS storage volume from (optional, zone's default if unspecified)",
            "name": "templateId",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Should KCE be exposed over public Internet ? (a public IPv4 address will then be auto-assigned, default to false).",
            "name": "public",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Whether or not to send a notification email at resource creation.",
            "name": "notify",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KCE"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created KCE virtual machine object.",
            "schema": {
              "$ref": "#/definitions/KCE"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid project or zone ID was provided."
          },
          "409": {
            "description": "KCE Virtual machine already exists."
          },
          "500": {
            "description": "Unable to create the KCE virtual machine."
          },
          "507": {
            "description": "Requested characteristics are beyond project's quota in place."
          }
        }
      }
    },
    "/project/{projectId}/zone/{zoneId}/kces": {
      "get": {
        "description": "Returns the IDs of the KCE virtual machines existing in the project in the specified zone.",
        "tags": [
          "project",
          "zone",
          "kce"
        ],
        "operationId": "GetProjectZoneKCEs",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the project to query.",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The ID of the zone to query.",
            "name": "zoneId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of KCE virtual machine IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Invalid project or zone ID was provided."
          }
        }
      }
    },
    "/project/{projectId}/zone/{zoneId}/volume": {
      "post": {
        "description": "Creates a new storage volume in specified zone.",
        "tags": [
          "project",
          "zone",
          "volume"
        ],
        "operationId": "CreateProjectZoneVolume",
        "parameters": [
          {
            "type": "string",
            "description": "the ID of the associated project.",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the ID of the associated zone.",
            "name": "zoneId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the ID of the associated storage pool (optional, zone's default if unspecified).",
            "name": "poolId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "the ID of the template to clone the storage volume from (optional, zone's default if unspecified)",
            "name": "templateId",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Volume"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created storage volume object.",
            "schema": {
              "$ref": "#/definitions/Volume"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid project or zone ID was provided."
          },
          "409": {
            "description": "Storage volume already exists."
          },
          "500": {
            "description": "Unable to create the storage volume."
          },
          "507": {
            "description": "Requested volume characteristics are beyond project's quota in place."
          }
        }
      }
    },
    "/project/{projectId}/zone/{zoneId}/volumes": {
      "get": {
        "description": "Returns the IDs of the storage volumes existing in the project in the specified zone.",
        "tags": [
          "project",
          "zone",
          "volume"
        ],
        "operationId": "GetProjectZoneVolumes",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the project to query.",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The ID of the zone to query.",
            "name": "zoneId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of storage volume IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Invalid project or zone ID was provided."
          }
        }
      }
    },
    "/record/{recordId}": {
      "get": {
        "description": "Returns a DNS record object",
        "tags": [
          "record"
        ],
        "operationId": "GetDnsRecord",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the DNS record to get.",
            "name": "recordId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the DNS record object.",
            "schema": {
              "$ref": "#/definitions/DnsRecord"
            }
          },
          "404": {
            "description": "Invalid DNS record ID was provided."
          }
        }
      },
      "put": {
        "description": "Updates a DNS record configuration.",
        "tags": [
          "record"
        ],
        "operationId": "UpdateDnsRecord",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the DNS record to update.",
            "name": "recordId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/DnsRecord"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated DNS record object.",
            "schema": {
              "$ref": "#/definitions/DnsRecord"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid DNS record ID was provided."
          }
        }
      },
      "delete": {
        "description": "Deletes an existing DNS record.",
        "tags": [
          "record"
        ],
        "operationId": "DeleteDnsRecord",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the DNS record to delete.",
            "name": "recordId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The DNS record has been successfully removed."
          },
          "404": {
            "description": "Invalid DNS record ID was provided."
          },
          "500": {
            "description": "Unable to delete DNS record."
          }
        }
      }
    },
    "/region": {
      "get": {
        "description": "Returns the IDs of registered regions.",
        "tags": [
          "region"
        ],
        "operationId": "GetAllRegions",
        "responses": {
          "200": {
            "description": "Returns the an array of region IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "post": {
        "description": "Creates a new region.",
        "tags": [
          "region"
        ],
        "operationId": "CreateRegion",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Region"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created region object.",
            "schema": {
              "$ref": "#/definitions/Region"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "409": {
            "description": "Region already exists."
          },
          "500": {
            "description": "Unable to create the region."
          }
        }
      }
    },
    "/region/{regionId}": {
      "get": {
        "description": "Returns a description of the region",
        "tags": [
          "region"
        ],
        "operationId": "GetRegion",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the region to get.",
            "name": "regionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the region object.",
            "schema": {
              "$ref": "#/definitions/Region"
            }
          },
          "404": {
            "description": "Invalid region ID was provided."
          }
        }
      },
      "put": {
        "description": "Updates a region configuration.",
        "tags": [
          "region"
        ],
        "operationId": "UpdateRegion",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the region to get.",
            "name": "regionId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Region"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated region object.",
            "schema": {
              "$ref": "#/definitions/Region"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid region ID was provided."
          }
        }
      },
      "delete": {
        "description": "Deletes an existing region.",
        "tags": [
          "region"
        ],
        "operationId": "DeleteRegion",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the region to get.",
            "name": "regionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The region has been successfully removed."
          },
          "404": {
            "description": "Invalid region ID was provided."
          },
          "409": {
            "description": "The region is not empty or still being referenced."
          },
          "500": {
            "description": "Unable to delete region."
          }
        }
      }
    },
    "/region/{regionId}/zone": {
      "post": {
        "description": "Creates a new zone.",
        "tags": [
          "region",
          "zone"
        ],
        "operationId": "CreateZone",
        "parameters": [
          {
            "type": "string",
            "description": "the ID of the associated region.",
            "name": "regionId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Zone"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created zone object.",
            "schema": {
              "$ref": "#/definitions/Zone"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid region ID was provided."
          },
          "409": {
            "description": "Zone already exists."
          },
          "500": {
            "description": "Unable to create zone."
          }
        }
      }
    },
    "/region/{regionId}/zones": {
      "get": {
        "description": "Returns the IDs of the availability zones existing in the region.",
        "tags": [
          "region",
          "zone"
        ],
        "operationId": "GetRegionZones",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the region to query.",
            "name": "regionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of availability zone IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Invalid region ID was provided."
          }
        }
      }
    },
    "/subnet": {
      "get": {
        "description": "Returns the IDs of subnets.",
        "tags": [
          "subnet"
        ],
        "operationId": "GetAllSubnets",
        "responses": {
          "200": {
            "description": "Returns the an array of subnet IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/subnet/{subnetId}": {
      "get": {
        "description": "Returns a description of the subnet.",
        "tags": [
          "subnet"
        ],
        "operationId": "GetSubnet",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the subnet to get.",
            "name": "subnetId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the subnet object.",
            "schema": {
              "$ref": "#/definitions/Subnet"
            }
          },
          "404": {
            "description": "Invalid subnet ID was provided."
          }
        }
      },
      "put": {
        "description": "Updates a subnet configuration.",
        "tags": [
          "subnet"
        ],
        "operationId": "UpdateSubnet",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the subnet to update.",
            "name": "subnetId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Subnet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated subnet object.",
            "schema": {
              "$ref": "#/definitions/Subnet"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid subnet ID was provided."
          }
        }
      },
      "delete": {
        "description": "Deletes an existing subnet.",
        "tags": [
          "subnet"
        ],
        "operationId": "DeleteSubnet",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the subnet to delete.",
            "name": "subnetId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The subnet has been successfully removed."
          },
          "404": {
            "description": "Invalid subnet ID was provided."
          },
          "409": {
            "description": "The subnet is not empty or still being referenced."
          },
          "500": {
            "description": "Unable to delete subnet."
          }
        }
      }
    },
    "/subnet/{subnetId}/adapter": {
      "post": {
        "description": "Creates a new network adapter.",
        "tags": [
          "subnet",
          "adapter"
        ],
        "operationId": "CreateAdapter",
        "parameters": [
          {
            "type": "string",
            "description": "the ID of the associated subnet.",
            "name": "subnetId",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "whether Kowabunga should pick and assign an IP address to this adapter.",
            "name": "assignIP",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Adapter"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created network adapter object.",
            "schema": {
              "$ref": "#/definitions/Adapter"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid subnet ID was provided."
          },
          "409": {
            "description": "Network adapter already exists."
          },
          "500": {
            "description": "Unable to create the network adapter."
          }
        }
      }
    },
    "/subnet/{subnetId}/adapters": {
      "get": {
        "description": "Returns the IDs of the network adapters existing in the subnet.",
        "tags": [
          "subnet",
          "adapter"
        ],
        "operationId": "GetSubnetAdapters",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the subnet to query.",
            "name": "subnetId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of network adapter IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Invalid subnet ID was provided."
          }
        }
      }
    },
    "/template": {
      "get": {
        "description": "Returns the IDs of volume templates.",
        "tags": [
          "template"
        ],
        "operationId": "GetAllTemplates",
        "responses": {
          "200": {
            "description": "Returns the an array of volume template IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/template/{templateId}": {
      "get": {
        "description": "Returns a description of the volume template.",
        "tags": [
          "template"
        ],
        "operationId": "GetTemplate",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the volume template to get.",
            "name": "templateId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the volume template object.",
            "schema": {
              "$ref": "#/definitions/Template"
            }
          },
          "404": {
            "description": "Invalid volume template ID was provided."
          }
        }
      },
      "put": {
        "description": "Updates a volume template configuration.",
        "tags": [
          "template"
        ],
        "operationId": "UpdateTemplate",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the volume template to update.",
            "name": "templateId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Template"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated volume template object.",
            "schema": {
              "$ref": "#/definitions/Template"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid volume template ID was provided."
          }
        }
      },
      "delete": {
        "description": "Deletes an existing volume template.",
        "tags": [
          "template"
        ],
        "operationId": "DeleteTemplate",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the volume template to delete.",
            "name": "templateId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The volume template has been successfully removed."
          },
          "404": {
            "description": "Invalid volume template ID was provided."
          },
          "409": {
            "description": "The volume template is not empty or still being referenced."
          },
          "500": {
            "description": "Unable to delete volume template."
          }
        }
      }
    },
    "/vnet": {
      "get": {
        "description": "Returns the IDs of virtual networks.",
        "tags": [
          "vnet"
        ],
        "operationId": "GetAllVNets",
        "responses": {
          "200": {
            "description": "Returns the an array of virtual network IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/vnet/{vnetId}": {
      "get": {
        "description": "Returns a description of the virtual network",
        "tags": [
          "vnet"
        ],
        "operationId": "GetVNet",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual network to get.",
            "name": "vnetId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the virtual network object.",
            "schema": {
              "$ref": "#/definitions/VNet"
            }
          },
          "404": {
            "description": "Invalid virtual network ID was provided."
          }
        }
      },
      "put": {
        "description": "Updates a virtual network configuration.",
        "tags": [
          "vnet"
        ],
        "operationId": "UpdateVNet",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual network to update.",
            "name": "vnetId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/VNet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated virtual network object.",
            "schema": {
              "$ref": "#/definitions/VNet"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid virtual network ID was provided."
          }
        }
      },
      "delete": {
        "description": "Deletes an existing virtual network.",
        "tags": [
          "vnet"
        ],
        "operationId": "DeleteVNet",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual network to delete.",
            "name": "vnetId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The virtual network has been successfully removed."
          },
          "404": {
            "description": "Invalid virtual network ID was provided."
          },
          "409": {
            "description": "The virtual network is not empty or still being referenced."
          },
          "500": {
            "description": "Unable to delete virtual network."
          }
        }
      }
    },
    "/vnet/{vnetId}/subnet": {
      "post": {
        "description": "Creates a new subnet.",
        "tags": [
          "vnet",
          "subnet"
        ],
        "operationId": "CreateSubnet",
        "parameters": [
          {
            "type": "string",
            "description": "the ID of the associated virtual network.",
            "name": "vnetId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Subnet"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created subnet object.",
            "schema": {
              "$ref": "#/definitions/Subnet"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid virtual network ID was provided."
          },
          "409": {
            "description": "Subnet already exists."
          },
          "500": {
            "description": "Unable to create subnet."
          }
        }
      }
    },
    "/vnet/{vnetId}/subnet/{subnetId}/default": {
      "put": {
        "description": "Set a virtual network default subnet.",
        "tags": [
          "vnet",
          "subnet"
        ],
        "operationId": "UpdateVNetDefaultSubnet",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual network to update.",
            "name": "vnetId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The ID of the subnet to set as default.",
            "name": "subnetId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated subnet object."
          },
          "404": {
            "description": "Invalid virtual network ID or subnet ID was provided."
          },
          "500": {
            "description": "Unable to assign the requested subnet as virtual network default."
          }
        }
      }
    },
    "/vnet/{vnetId}/subnets": {
      "get": {
        "description": "Returns the IDs of the subnets existing in the virtual network.",
        "tags": [
          "vnet",
          "subnet"
        ],
        "operationId": "GetVNetSubnets",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the virtual network to query.",
            "name": "vnetId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of subnet IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Invalid virtual network ID was provided."
          }
        }
      }
    },
    "/volume": {
      "get": {
        "description": "Returns the IDs of storage volumes.",
        "tags": [
          "volume"
        ],
        "operationId": "GetAllVolumes",
        "responses": {
          "200": {
            "description": "Returns the an array of storage volume IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/volume/{volumeId}": {
      "get": {
        "description": "Returns a description of the storage volume.",
        "tags": [
          "volume"
        ],
        "operationId": "GetVolume",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the storage volume to get.",
            "name": "volumeId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the storage volume object.",
            "schema": {
              "$ref": "#/definitions/Volume"
            }
          },
          "404": {
            "description": "Invalid storage volume ID was provided."
          }
        }
      },
      "put": {
        "description": "Updates/resizes a storage volume configuration.",
        "tags": [
          "volume"
        ],
        "operationId": "UpdateVolume",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the storage volume to update.",
            "name": "volumeId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Volume"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated storage volume object.",
            "schema": {
              "$ref": "#/definitions/Volume"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid storage volume ID was provided."
          },
          "500": {
            "description": "Unable to update the storage volume."
          },
          "507": {
            "description": "Requested volume size is beyond associated project's quota in place."
          }
        }
      },
      "delete": {
        "description": "Deletes an existing storage volume.",
        "tags": [
          "volume"
        ],
        "operationId": "DeleteVolume",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the storage volume to delete.",
            "name": "volumeId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The storage volume has been successfully removed."
          },
          "404": {
            "description": "Invalid storage volume ID was provided."
          },
          "409": {
            "description": "The storage volume is not empty or still being referenced."
          },
          "500": {
            "description": "Unable to delete storage volume."
          }
        }
      }
    },
    "/zone": {
      "get": {
        "description": "Returns the IDs of registered zones.",
        "tags": [
          "zone"
        ],
        "operationId": "GetAllZones",
        "responses": {
          "200": {
            "description": "Returns the an array of zone IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/zone/{zoneId}": {
      "get": {
        "description": "Returns a description of the zone",
        "tags": [
          "zone"
        ],
        "operationId": "GetZone",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the zone to get.",
            "name": "zoneId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the zone object.",
            "schema": {
              "$ref": "#/definitions/Zone"
            }
          },
          "404": {
            "description": "Invalid zone ID was provided."
          }
        }
      },
      "put": {
        "description": "Updates a zone configuration.",
        "tags": [
          "zone"
        ],
        "operationId": "UpdateZone",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the zone to get.",
            "name": "zoneId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Zone"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated zone object.",
            "schema": {
              "$ref": "#/definitions/Zone"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid zone ID was provided."
          }
        }
      },
      "delete": {
        "description": "Deletes an existing zone.",
        "tags": [
          "zone"
        ],
        "operationId": "DeleteZone",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the zone to get.",
            "name": "zoneId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The zone has been successfully removed."
          },
          "404": {
            "description": "Invalid zone ID was provided."
          },
          "409": {
            "description": "The zone is not empty or still being referenced."
          },
          "500": {
            "description": "Unable to delete zone."
          }
        }
      }
    },
    "/zone/{zoneId}/host": {
      "post": {
        "description": "Creates a new host.",
        "tags": [
          "zone",
          "host"
        ],
        "operationId": "CreateHost",
        "parameters": [
          {
            "type": "string",
            "description": "the ID of the associated zone.",
            "name": "zoneId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Host"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created host object.",
            "schema": {
              "$ref": "#/definitions/Host"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid zone ID was provided."
          },
          "409": {
            "description": "Host already exists."
          },
          "500": {
            "description": "Unable to connect to host's libvirt."
          }
        }
      }
    },
    "/zone/{zoneId}/hosts": {
      "get": {
        "description": "Returns the IDs of the hosts existing in the zone.",
        "tags": [
          "zone",
          "host"
        ],
        "operationId": "GetZoneHosts",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the zone to query.",
            "name": "zoneId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of host IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Invalid zone ID was provided."
          }
        }
      }
    },
    "/zone/{zoneId}/netgw": {
      "post": {
        "description": "Creates a new network gateway.",
        "tags": [
          "zone",
          "netgw"
        ],
        "operationId": "CreateNetGW",
        "parameters": [
          {
            "type": "string",
            "description": "the ID of the associated zone.",
            "name": "zoneId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NetGW"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created network gateway object.",
            "schema": {
              "$ref": "#/definitions/NetGW"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid zone ID was provided."
          },
          "409": {
            "description": "Network gateway already exists."
          },
          "500": {
            "description": "Unable to connect to network gateway."
          }
        }
      }
    },
    "/zone/{zoneId}/netgws": {
      "get": {
        "description": "Returns the IDs of the hosts existing in the zone.",
        "tags": [
          "zone",
          "netgw"
        ],
        "operationId": "GetZoneNetGWs",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the zone to query.",
            "name": "zoneId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of network gateway IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Invalid zone ID was provided."
          }
        }
      }
    },
    "/zone/{zoneId}/pool": {
      "post": {
        "description": "Creates a new storage pool.",
        "tags": [
          "zone",
          "pool"
        ],
        "operationId": "CreatePool",
        "parameters": [
          {
            "type": "string",
            "description": "the ID of the associated zone.",
            "name": "zoneId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the ID of the associated host (useless for RBD pools, mandatory for local ones).",
            "name": "hostId",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StoragePool"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created storage pool object.",
            "schema": {
              "$ref": "#/definitions/StoragePool"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid zone ID was provided."
          },
          "409": {
            "description": "Pool already exists."
          },
          "500": {
            "description": "Unable to create storage pool."
          }
        }
      }
    },
    "/zone/{zoneId}/pool/{poolId}/default": {
      "put": {
        "description": "Set a zone's default storage pool.",
        "tags": [
          "zone",
          "pool"
        ],
        "operationId": "UpdateZoneDefaultPool",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the zone to update.",
            "name": "zoneId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The ID of the storage pool to set as default.",
            "name": "poolId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated project resources object."
          },
          "404": {
            "description": "Invalid zone ID or storage pool ID was provided."
          },
          "500": {
            "description": "Unable to assign the requested storage pool as zone's default."
          }
        }
      }
    },
    "/zone/{zoneId}/pools": {
      "get": {
        "description": "Returns the IDs of the pools existing in the zone.",
        "tags": [
          "zone",
          "pool"
        ],
        "operationId": "GetZonePools",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the zone to query.",
            "name": "zoneId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of storage pool IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Invalid zone ID was provided."
          }
        }
      }
    },
    "/zone/{zoneId}/vnet": {
      "post": {
        "description": "Creates a new virtual network.",
        "tags": [
          "zone",
          "vnet"
        ],
        "operationId": "CreateVNet",
        "parameters": [
          {
            "type": "string",
            "description": "the ID of the associated zone.",
            "name": "zoneId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VNet"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created virtual network object.",
            "schema": {
              "$ref": "#/definitions/VNet"
            }
          },
          "400": {
            "description": "Bad parameters were provided."
          },
          "404": {
            "description": "Invalid zone ID was provided."
          },
          "409": {
            "description": "Virtual network already exists."
          },
          "500": {
            "description": "Unable to create virtual network."
          }
        }
      }
    },
    "/zone/{zoneId}/vnets": {
      "get": {
        "description": "Returns the IDs of the virtual networks existing in the zone.",
        "tags": [
          "zone",
          "vnet"
        ],
        "operationId": "GetZoneVNets",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the zone to query.",
            "name": "zoneId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of virtual network IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Invalid zone ID was provided."
          }
        }
      }
    }
  },
  "definitions": {
    "Adapter": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "addresses": {
          "description": "The network adapter list of associated IPv4 addresses.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "description": "The network adapter description.",
          "type": "string"
        },
        "id": {
          "description": "The network adapter ID (auto-generated).",
          "type": "string"
        },
        "mac": {
          "description": "The network adapter hardware address (e.g. 00:11:22:33:44:55). Auto-generated if unspecified.",
          "type": "string"
        },
        "name": {
          "description": "The network adapter name.",
          "type": "string"
        },
        "reserved": {
          "description": "The network adapter is a reserved adapter (e.g. router), where the same hardware address can be reused over several subnets.",
          "type": "boolean",
          "default": false
        }
      }
    },
    "Cost": {
      "description": "A key/value metadata.",
      "type": "object",
      "required": [
        "price",
        "currency"
      ],
      "properties": {
        "currency": {
          "description": "The associated currency.",
          "type": "string"
        },
        "price": {
          "description": "The unit price information.",
          "type": "integer",
          "format": "float"
        }
      }
    },
    "DnsRecord": {
      "type": "object",
      "required": [
        "name",
        "addresses"
      ],
      "properties": {
        "addresses": {
          "description": "A list of IPv4 addresses to be associated to the record.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "description": "The DNS record description.",
          "type": "string"
        },
        "domain": {
          "description": "The DNS record associated domain (inherited from associated project).",
          "type": "string"
        },
        "id": {
          "description": "The DNS record ID (auto-generated).",
          "type": "string"
        },
        "name": {
          "description": "The DNS record name (zone's entry).",
          "type": "string"
        }
      }
    },
    "Host": {
      "type": "object",
      "required": [
        "name",
        "protocol",
        "address"
      ],
      "properties": {
        "address": {
          "description": "The host libvirt's IPv4 address.",
          "type": "string"
        },
        "cost": {
          "description": "Cost associated to the host.",
          "type": "object",
          "$ref": "#/definitions/Cost"
        },
        "description": {
          "description": "The host description.",
          "type": "string"
        },
        "id": {
          "description": "The host ID (auto-generated).",
          "type": "string"
        },
        "name": {
          "description": "The host name.",
          "type": "string"
        },
        "port": {
          "description": "The host libvirt's port.",
          "type": "integer"
        },
        "protocol": {
          "description": "The protocol to use to issue libvirt connection.",
          "type": "string",
          "enum": [
            "tcp",
            "tls"
          ]
        },
        "tls": {
          "description": "The host libvirt's TLS configuration.",
          "type": "object",
          "required": [
            "key",
            "cert",
            "ca"
          ],
          "properties": {
            "ca": {
              "description": "The TLS certificate of authority.",
              "type": "string"
            },
            "cert": {
              "description": "The TLS client public cert.",
              "type": "string"
            },
            "key": {
              "description": "The TLS client private key.",
              "type": "string"
            }
          }
        }
      }
    },
    "HostCaps": {
      "type": "object",
      "required": [
        "version",
        "uuid",
        "cpu",
        "memory"
      ],
      "properties": {
        "cpu": {
          "description": "the host CPU characteristics",
          "type": "object",
          "required": [
            "arch",
            "model",
            "vendor",
            "sockets",
            "cores",
            "threads"
          ],
          "properties": {
            "arch": {
              "description": "the host CPU architecture",
              "type": "string"
            },
            "cores": {
              "description": "the host CPU number of cores",
              "type": "integer"
            },
            "model": {
              "description": "the host CPU model",
              "type": "string"
            },
            "sockets": {
              "description": "the host CPU number of sockets",
              "type": "integer"
            },
            "threads": {
              "description": "the host CPU number of threads",
              "type": "integer"
            },
            "vendor": {
              "description": "the host CPU vendor",
              "type": "string"
            }
          }
        },
        "memory": {
          "description": "the host memory size in bytes",
          "type": "integer"
        },
        "uuid": {
          "description": "the host UUID",
          "type": "string"
        },
        "version": {
          "description": "The host libvirt version.",
          "type": "string"
        }
      }
    },
    "HostCapsCPU": {
      "description": "the host CPU characteristics",
      "type": "object",
      "required": [
        "arch",
        "model",
        "vendor",
        "sockets",
        "cores",
        "threads"
      ],
      "properties": {
        "arch": {
          "description": "the host CPU architecture",
          "type": "string"
        },
        "cores": {
          "description": "the host CPU number of cores",
          "type": "integer"
        },
        "model": {
          "description": "the host CPU model",
          "type": "string"
        },
        "sockets": {
          "description": "the host CPU number of sockets",
          "type": "integer"
        },
        "threads": {
          "description": "the host CPU number of threads",
          "type": "integer"
        },
        "vendor": {
          "description": "the host CPU vendor",
          "type": "string"
        }
      }
    },
    "HostTLS": {
      "description": "The host libvirt's TLS configuration.",
      "type": "object",
      "required": [
        "key",
        "cert",
        "ca"
      ],
      "properties": {
        "ca": {
          "description": "The TLS certificate of authority.",
          "type": "string"
        },
        "cert": {
          "description": "The TLS client public cert.",
          "type": "string"
        },
        "key": {
          "description": "The TLS client private key.",
          "type": "string"
        }
      }
    },
    "Instance": {
      "type": "object",
      "required": [
        "name",
        "memory",
        "vcpus"
      ],
      "properties": {
        "adapters": {
          "description": "a list of existing network adapters to be connected to the instance.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "description": "The virtual machine description.",
          "type": "string"
        },
        "id": {
          "description": "The virtual machine instance ID  (auto-generated).",
          "type": "string"
        },
        "memory": {
          "description": "the virtual machine's memory size (in bytes).",
          "type": "integer"
        },
        "name": {
          "description": "The virtual machine name",
          "type": "string"
        },
        "vcpus": {
          "description": "the virtual machine's number of vCPUs.",
          "type": "integer"
        },
        "volumes": {
          "description": "a list of existing storage volumes (i.e. disks) to be connected to the instance.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "InstanceState": {
      "type": "object",
      "required": [
        "state",
        "reason"
      ],
      "properties": {
        "reason": {
          "description": "the reason of the state of the VM",
          "type": "string"
        },
        "state": {
          "description": "the state of the VM",
          "type": "string"
        }
      }
    },
    "IpRange": {
      "description": "A reserved IPv4 pool range, non-addressable by Kowabunga.",
      "type": "object",
      "required": [
        "first",
        "last"
      ],
      "properties": {
        "first": {
          "description": "The range's first IP address.",
          "type": "string"
        },
        "last": {
          "description": "The range's last IP address.",
          "type": "string"
        }
      }
    },
    "KCE": {
      "description": "Kowabunga Compute Engine (KCE) is a wrapper object for bare virtual machines. It consists of an instance, one to several attached volumes and 2 network adapters (a private one, a public one). This is the prefered way for creating virtual machines. IP addresses will be automatically assigned.",
      "type": "object",
      "required": [
        "name",
        "memory",
        "vcpus",
        "disk"
      ],
      "properties": {
        "data_disk": {
          "description": "The KCE virtual machine's extra data disk size (in bytes). If unspecified, no extra data disk will be assigned.",
          "type": "integer",
          "default": 0
        },
        "description": {
          "description": "The KCE virtual machine description.",
          "type": "string"
        },
        "disk": {
          "description": "The KCE virtual machine's OS disk size (in bytes).",
          "type": "integer"
        },
        "id": {
          "description": "The KCE ID  (auto-generated).",
          "type": "string"
        },
        "ip": {
          "description": "The KCE virtual machine's assigned private IPv4 address (read-only).",
          "type": "string"
        },
        "memory": {
          "description": "The KCE virtual machine's memory size (in bytes).",
          "type": "integer"
        },
        "name": {
          "description": "The KCE virtual machine name",
          "type": "string"
        },
        "vcpus": {
          "description": "The KCE virtual machine's number of vCPUs.",
          "type": "integer"
        }
      }
    },
    "Metadata": {
      "description": "A key/value metadata.",
      "type": "object",
      "properties": {
        "key": {
          "description": "The metadata key.",
          "type": "string"
        },
        "value": {
          "description": "The metadata value.",
          "type": "string"
        }
      }
    },
    "NetGW": {
      "type": "object",
      "required": [
        "name",
        "address",
        "token"
      ],
      "properties": {
        "address": {
          "description": "The network gateway IPv4 address.",
          "type": "string"
        },
        "description": {
          "description": "The network gateway description.",
          "type": "string"
        },
        "id": {
          "description": "The network gateway ID (auto-generated).",
          "type": "string"
        },
        "name": {
          "description": "The network gateway name.",
          "type": "string"
        },
        "port": {
          "description": "The network gateway service port (default to 8080).",
          "type": "integer",
          "default": 8080
        },
        "token": {
          "description": "The network gateway admin API token.",
          "type": "string"
        }
      }
    },
    "Project": {
      "type": "object",
      "required": [
        "name",
        "owner",
        "email"
      ],
      "properties": {
        "bootstrap_pubkey": {
          "description": "The project default public SSH key, to be associated to bootstrap user. Will use Kowabunga's default configuration one if unspecified.",
          "type": "string"
        },
        "bootstrap_user": {
          "description": "The project default service user name, created at cloud-init instance bootstrap phase. Will use Kowabunga's default configuration one if unspecified.",
          "type": "string"
        },
        "description": {
          "description": "The project description.",
          "type": "string"
        },
        "domain": {
          "description": "The project associated internal domain name (e.g. myproject.acme.com).",
          "type": "string"
        },
        "email": {
          "description": "The project associated email address, used to receive notifications.",
          "type": "string"
        },
        "id": {
          "description": "The project ID (auto-generated).",
          "type": "string"
        },
        "metadatas": {
          "description": "A list of metadata to be associated to the project",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Metadata"
          }
        },
        "name": {
          "description": "The project name.",
          "type": "string"
        },
        "owner": {
          "description": "The project's owner name.",
          "type": "string"
        },
        "private_subnets": {
          "description": "The assigned project VPC private subnets IDs (read-only).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ZoneSubnet"
          }
        },
        "quotas": {
          "description": "The global project resource quotas (0 for unlimited)",
          "type": "object",
          "$ref": "#/definitions/ProjectResources"
        },
        "root_password": {
          "description": "The project default root password, set at cloud-init instance bootstrap phase. Will be randomly auto-generated at each instance creation if unspecified.",
          "type": "string"
        },
        "tags": {
          "description": "A list of tags to be associated to the project.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ProjectResources": {
      "description": "The global project resource quotas/usage (0 for unlimited).",
      "type": "object",
      "properties": {
        "instances": {
          "description": "the maximum number of instances allowed to be spawned.",
          "type": "integer",
          "format": "uint16"
        },
        "memory": {
          "description": "the maximum total memory (in bytes) allowed to be consumed by sum of all instances.",
          "type": "integer",
          "format": "uint64"
        },
        "storage": {
          "description": "the maximum total disk capacity allowed to be consumed by sum of all instances.",
          "type": "integer",
          "format": "uint64"
        },
        "vcpus": {
          "description": "the maximum total number of vCPUs allowed to be consumed by sum of all instances.",
          "type": "integer",
          "format": "uint16"
        }
      }
    },
    "Region": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "description": {
          "description": "The region description.",
          "type": "string"
        },
        "id": {
          "description": "The region ID (auto-generated).",
          "type": "string"
        },
        "name": {
          "description": "The region name.",
          "type": "string"
        }
      }
    },
    "StoragePool": {
      "type": "object",
      "required": [
        "name",
        "pool"
      ],
      "properties": {
        "ceph_address": {
          "description": "The local Ceph Monitor(s) address or FQDN, empty for local pool type.",
          "type": "string",
          "default": "localhost"
        },
        "ceph_port": {
          "description": "The local Ceph Monitor(s) port (default 3300), empty for local pool type.",
          "type": "integer",
          "default": 3300
        },
        "ceph_secret_uuid": {
          "description": "The libvirt secret UUID for CephX authentication, empty for local pool type.",
          "type": "string"
        },
        "cost": {
          "description": "Cost associated to the storage pool.",
          "type": "object",
          "$ref": "#/definitions/Cost"
        },
        "description": {
          "description": "The storage pool description.",
          "type": "string"
        },
        "id": {
          "description": "The storage pool ID (auto-generated).",
          "type": "string"
        },
        "name": {
          "description": "The storage pool name.",
          "type": "string"
        },
        "pool": {
          "description": "The libvirt pool name.",
          "type": "string"
        },
        "type": {
          "description": "The storage pool type.",
          "type": "string",
          "default": "rbd",
          "enum": [
            "local",
            "rbd"
          ]
        }
      }
    },
    "Subnet": {
      "type": "object",
      "required": [
        "name",
        "cidr",
        "gateway"
      ],
      "properties": {
        "cidr": {
          "description": "The subnet CIDR (e.g. 192.168.0.0/24).",
          "type": "string"
        },
        "description": {
          "description": "The subnet description.",
          "type": "string"
        },
        "dns": {
          "description": "The subnet DNS server IP address (gateway value if unspecified).",
          "type": "string"
        },
        "extra_routes": {
          "description": "The list of extra routes to be access through designated gateway (format is 10.0.0.0/8).",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "gateway": {
          "description": "The subnet router/gateway IP address (e.g. 192.168.0.254).",
          "type": "string"
        },
        "id": {
          "description": "The subnet ID (auto-generated).",
          "type": "string"
        },
        "name": {
          "description": "The subnet name.",
          "type": "string"
        },
        "reserved": {
          "description": "The subnet list of reserved IPv4 ranges (i.e. no IP address can be assigned from there).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IpRange"
          }
        }
      }
    },
    "Template": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "description": {
          "description": "The volume template description.",
          "type": "string"
        },
        "id": {
          "description": "The volume template ID (auto-generated).",
          "type": "string"
        },
        "name": {
          "description": "The volume template name.",
          "type": "string"
        },
        "os": {
          "description": "Type of operating system if OS kind (useful to determine cloud-init parameters for instance)",
          "type": "string",
          "default": "linux",
          "enum": [
            "linux",
            "windows"
          ]
        },
        "type": {
          "description": "The type of volume template.",
          "type": "string",
          "default": "os",
          "enum": [
            "os",
            "raw"
          ]
        }
      }
    },
    "VNet": {
      "type": "object",
      "required": [
        "name",
        "vlan",
        "interface"
      ],
      "properties": {
        "description": {
          "description": "The virtual network description.",
          "type": "string"
        },
        "id": {
          "description": "The virtual network ID (auto-generated).",
          "type": "string"
        },
        "interface": {
          "description": "The libvirt's bridge network interface (brX).",
          "type": "string"
        },
        "name": {
          "description": "The virtual network name.",
          "type": "string"
        },
        "private": {
          "description": "Is the virtual network adapter connected to private (LAN) or public (WAN) physical network ?",
          "type": "boolean",
          "default": true
        },
        "vlan": {
          "description": "The VLAN identifier.",
          "type": "integer"
        }
      }
    },
    "Volume": {
      "type": "object",
      "required": [
        "name",
        "type",
        "size"
      ],
      "properties": {
        "description": {
          "description": "The storage volume description.",
          "type": "string"
        },
        "id": {
          "description": "The storage volume ID (auto-generated).",
          "type": "string"
        },
        "name": {
          "description": "The storage volume name.",
          "type": "string"
        },
        "resizable": {
          "description": "Is the storage volume allowed to grow (filesystem dependant) ?",
          "type": "boolean",
          "default": false
        },
        "size": {
          "description": "The storage volume size in bytes.",
          "type": "integer"
        },
        "type": {
          "description": "The type of storage volume.",
          "type": "string",
          "enum": [
            "os",
            "iso",
            "raw"
          ]
        }
      }
    },
    "Zone": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "description": {
          "description": "The zone description.",
          "type": "string"
        },
        "id": {
          "description": "The zone ID (auto-generated).",
          "type": "string"
        },
        "name": {
          "description": "The zone name.",
          "type": "string"
        }
      }
    },
    "ZoneSubnet": {
      "description": "A zone/subnet map.",
      "type": "object",
      "properties": {
        "key": {
          "description": "The zone key.",
          "type": "string"
        },
        "value": {
          "description": "The subnet ID.",
          "type": "string"
        }
      }
    },
    "principal": {
      "type": "string"
    }
  },
  "securityDefinitions": {
    "key": {
      "type": "apiKey",
      "name": "x-token",
      "in": "header"
    }
  },
  "security": [
    {
      "key": []
    }
  ]
}`))
}
