// Code generated by go-swagger; DO NOT EDIT.

package kce

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetKCEHandlerFunc turns a function with the right signature into a get k c e handler
type GetKCEHandlerFunc func(GetKCEParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetKCEHandlerFunc) Handle(params GetKCEParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetKCEHandler interface for that can handle valid get k c e params
type GetKCEHandler interface {
	Handle(GetKCEParams, interface{}) middleware.Responder
}

// NewGetKCE creates a new http.Handler for the get k c e operation
func NewGetKCE(ctx *middleware.Context, handler GetKCEHandler) *GetKCE {
	return &GetKCE{Context: ctx, Handler: handler}
}

/*
	GetKCE swagger:route GET /kce/{kceId} kce getKCE

Returns the description of the KCE virtual machine.
*/
type GetKCE struct {
	Context *middleware.Context
	Handler GetKCEHandler
}

func (o *GetKCE) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetKCEParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
