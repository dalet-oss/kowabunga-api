// Code generated by go-swagger; DO NOT EDIT.

package zone

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateHostHandlerFunc turns a function with the right signature into a create host handler
type CreateHostHandlerFunc func(CreateHostParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateHostHandlerFunc) Handle(params CreateHostParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// CreateHostHandler interface for that can handle valid create host params
type CreateHostHandler interface {
	Handle(CreateHostParams, interface{}) middleware.Responder
}

// NewCreateHost creates a new http.Handler for the create host operation
func NewCreateHost(ctx *middleware.Context, handler CreateHostHandler) *CreateHost {
	return &CreateHost{Context: ctx, Handler: handler}
}

/*
	CreateHost swagger:route POST /zone/{zoneId}/host zone host createHost

Creates a new host.
*/
type CreateHost struct {
	Context *middleware.Context
	Handler CreateHostHandler
}

func (o *CreateHost) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateHostParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
