// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateZoneInstanceHandlerFunc turns a function with the right signature into a create zone instance handler
type CreateZoneInstanceHandlerFunc func(CreateZoneInstanceParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateZoneInstanceHandlerFunc) Handle(params CreateZoneInstanceParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// CreateZoneInstanceHandler interface for that can handle valid create zone instance params
type CreateZoneInstanceHandler interface {
	Handle(CreateZoneInstanceParams, interface{}) middleware.Responder
}

// NewCreateZoneInstance creates a new http.Handler for the create zone instance operation
func NewCreateZoneInstance(ctx *middleware.Context, handler CreateZoneInstanceHandler) *CreateZoneInstance {
	return &CreateZoneInstance{Context: ctx, Handler: handler}
}

/*
	CreateZoneInstance swagger:route POST /project/{projectId}/zone/{zoneId}/instance project zone instance createZoneInstance

Creates a new virtual machine instance in specified zone.
*/
type CreateZoneInstance struct {
	Context *middleware.Context
	Handler CreateZoneInstanceHandler
}

func (o *CreateZoneInstance) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateZoneInstanceParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
