// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/dalet-oss/kowabunga-api/models"
)

// NewCreateProjectParams creates a new CreateProjectParams object
// with the default values initialized.
func NewCreateProjectParams() CreateProjectParams {

	var (
		// initialize parameters with default values

		notifyDefault     = bool(true)
		subnetSizeDefault = int64(26)
	)

	return CreateProjectParams{
		Notify: &notifyDefault,

		SubnetSize: &subnetSizeDefault,
	}
}

// CreateProjectParams contains all the bound params for the create project operation
// typically these are obtained from a http.Request
//
// swagger:parameters CreateProject
type CreateProjectParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: body
	*/
	Body *models.Project
	/*Whether or not to send a notification email at resource creation.
	  In: query
	  Default: true
	*/
	Notify *bool
	/*The minimum VPC subnet size to be affected to the project. WARNING, this cannot be changed later.
	  In: query
	  Default: 26
	*/
	SubnetSize *int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewCreateProjectParams() beforehand.
func (o *CreateProjectParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body models.Project
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			if err == io.EOF {
				res = append(res, errors.Required("body", "body", ""))
			} else {
				res = append(res, errors.NewParseError("body", "body", "", err))
			}
		} else {
			// validate body object
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			ctx := validate.WithOperationRequest(r.Context())
			if err := body.ContextValidate(ctx, route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.Body = &body
			}
		}
	} else {
		res = append(res, errors.Required("body", "body", ""))
	}

	qNotify, qhkNotify, _ := qs.GetOK("notify")
	if err := o.bindNotify(qNotify, qhkNotify, route.Formats); err != nil {
		res = append(res, err)
	}

	qSubnetSize, qhkSubnetSize, _ := qs.GetOK("subnetSize")
	if err := o.bindSubnetSize(qSubnetSize, qhkSubnetSize, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindNotify binds and validates parameter Notify from query.
func (o *CreateProjectParams) bindNotify(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewCreateProjectParams()
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("notify", "query", "bool", raw)
	}
	o.Notify = &value

	return nil
}

// bindSubnetSize binds and validates parameter SubnetSize from query.
func (o *CreateProjectParams) bindSubnetSize(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewCreateProjectParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("subnetSize", "query", "int64", raw)
	}
	o.SubnetSize = &value

	return nil
}
