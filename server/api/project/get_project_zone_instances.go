// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetProjectZoneInstancesHandlerFunc turns a function with the right signature into a get project zone instances handler
type GetProjectZoneInstancesHandlerFunc func(GetProjectZoneInstancesParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetProjectZoneInstancesHandlerFunc) Handle(params GetProjectZoneInstancesParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetProjectZoneInstancesHandler interface for that can handle valid get project zone instances params
type GetProjectZoneInstancesHandler interface {
	Handle(GetProjectZoneInstancesParams, interface{}) middleware.Responder
}

// NewGetProjectZoneInstances creates a new http.Handler for the get project zone instances operation
func NewGetProjectZoneInstances(ctx *middleware.Context, handler GetProjectZoneInstancesHandler) *GetProjectZoneInstances {
	return &GetProjectZoneInstances{Context: ctx, Handler: handler}
}

/*
	GetProjectZoneInstances swagger:route GET /project/{projectId}/zone/{zoneId}/instances project zone instance getProjectZoneInstances

Returns the IDs of the virtual machine instances existing in the project in the specified zone.
*/
type GetProjectZoneInstances struct {
	Context *middleware.Context
	Handler GetProjectZoneInstancesHandler
}

func (o *GetProjectZoneInstances) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetProjectZoneInstancesParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
