// Code generated by go-swagger; DO NOT EDIT.

package subnet

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetSubnetHandlerFunc turns a function with the right signature into a get subnet handler
type GetSubnetHandlerFunc func(GetSubnetParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetSubnetHandlerFunc) Handle(params GetSubnetParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetSubnetHandler interface for that can handle valid get subnet params
type GetSubnetHandler interface {
	Handle(GetSubnetParams, interface{}) middleware.Responder
}

// NewGetSubnet creates a new http.Handler for the get subnet operation
func NewGetSubnet(ctx *middleware.Context, handler GetSubnetHandler) *GetSubnet {
	return &GetSubnet{Context: ctx, Handler: handler}
}

/*
	GetSubnet swagger:route GET /subnet/{subnetId} subnet getSubnet

Returns a description of the subnet.
*/
type GetSubnet struct {
	Context *middleware.Context
	Handler GetSubnetHandler
}

func (o *GetSubnet) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetSubnetParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
