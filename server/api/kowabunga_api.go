// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/dalet-oss/kowabunga-api/server/api/adapter"
	"github.com/dalet-oss/kowabunga-api/server/api/host"
	"github.com/dalet-oss/kowabunga-api/server/api/instance"
	"github.com/dalet-oss/kowabunga-api/server/api/netgw"
	"github.com/dalet-oss/kowabunga-api/server/api/pool"
	"github.com/dalet-oss/kowabunga-api/server/api/project"
	"github.com/dalet-oss/kowabunga-api/server/api/region"
	"github.com/dalet-oss/kowabunga-api/server/api/subnet"
	"github.com/dalet-oss/kowabunga-api/server/api/template"
	"github.com/dalet-oss/kowabunga-api/server/api/vnet"
	"github.com/dalet-oss/kowabunga-api/server/api/volume"
	"github.com/dalet-oss/kowabunga-api/server/api/zone"
)

// NewKowabungaAPI creates a new Kowabunga instance
func NewKowabungaAPI(spec *loads.Document) *KowabungaAPI {
	return &KowabungaAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer: runtime.JSONConsumer(),

		JSONProducer: runtime.JSONProducer(),
		TxtProducer:  runtime.TextProducer(),

		SubnetCreateAdapterHandler: subnet.CreateAdapterHandlerFunc(func(params subnet.CreateAdapterParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation subnet.CreateAdapter has not yet been implemented")
		}),
		ZoneCreateHostHandler: zone.CreateHostHandlerFunc(func(params zone.CreateHostParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation zone.CreateHost has not yet been implemented")
		}),
		ZoneCreateNetGWHandler: zone.CreateNetGWHandlerFunc(func(params zone.CreateNetGWParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation zone.CreateNetGW has not yet been implemented")
		}),
		ZoneCreatePoolHandler: zone.CreatePoolHandlerFunc(func(params zone.CreatePoolParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation zone.CreatePool has not yet been implemented")
		}),
		ProjectCreateProjectHandler: project.CreateProjectHandlerFunc(func(params project.CreateProjectParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation project.CreateProject has not yet been implemented")
		}),
		RegionCreateRegionHandler: region.CreateRegionHandlerFunc(func(params region.CreateRegionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation region.CreateRegion has not yet been implemented")
		}),
		VnetCreateSubnetHandler: vnet.CreateSubnetHandlerFunc(func(params vnet.CreateSubnetParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation vnet.CreateSubnet has not yet been implemented")
		}),
		PoolCreateTemplateHandler: pool.CreateTemplateHandlerFunc(func(params pool.CreateTemplateParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation pool.CreateTemplate has not yet been implemented")
		}),
		ZoneCreateVNetHandler: zone.CreateVNetHandlerFunc(func(params zone.CreateVNetParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation zone.CreateVNet has not yet been implemented")
		}),
		ProjectCreateVolumeHandler: project.CreateVolumeHandlerFunc(func(params project.CreateVolumeParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation project.CreateVolume has not yet been implemented")
		}),
		RegionCreateZoneHandler: region.CreateZoneHandlerFunc(func(params region.CreateZoneParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation region.CreateZone has not yet been implemented")
		}),
		ProjectCreateZoneVolumeHandler: project.CreateZoneVolumeHandlerFunc(func(params project.CreateZoneVolumeParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation project.CreateZoneVolume has not yet been implemented")
		}),
		AdapterDeleteAdapterHandler: adapter.DeleteAdapterHandlerFunc(func(params adapter.DeleteAdapterParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation adapter.DeleteAdapter has not yet been implemented")
		}),
		HostDeleteHostHandler: host.DeleteHostHandlerFunc(func(params host.DeleteHostParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation host.DeleteHost has not yet been implemented")
		}),
		NetgwDeleteNetGWHandler: netgw.DeleteNetGWHandlerFunc(func(params netgw.DeleteNetGWParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation netgw.DeleteNetGW has not yet been implemented")
		}),
		PoolDeletePoolHandler: pool.DeletePoolHandlerFunc(func(params pool.DeletePoolParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation pool.DeletePool has not yet been implemented")
		}),
		ProjectDeleteProjectHandler: project.DeleteProjectHandlerFunc(func(params project.DeleteProjectParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation project.DeleteProject has not yet been implemented")
		}),
		RegionDeleteRegionHandler: region.DeleteRegionHandlerFunc(func(params region.DeleteRegionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation region.DeleteRegion has not yet been implemented")
		}),
		SubnetDeleteSubnetHandler: subnet.DeleteSubnetHandlerFunc(func(params subnet.DeleteSubnetParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation subnet.DeleteSubnet has not yet been implemented")
		}),
		TemplateDeleteTemplateHandler: template.DeleteTemplateHandlerFunc(func(params template.DeleteTemplateParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation template.DeleteTemplate has not yet been implemented")
		}),
		VnetDeleteVNetHandler: vnet.DeleteVNetHandlerFunc(func(params vnet.DeleteVNetParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation vnet.DeleteVNet has not yet been implemented")
		}),
		VolumeDeleteVolumeHandler: volume.DeleteVolumeHandlerFunc(func(params volume.DeleteVolumeParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation volume.DeleteVolume has not yet been implemented")
		}),
		ZoneDeleteZoneHandler: zone.DeleteZoneHandlerFunc(func(params zone.DeleteZoneParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation zone.DeleteZone has not yet been implemented")
		}),
		AdapterGetAdapterHandler: adapter.GetAdapterHandlerFunc(func(params adapter.GetAdapterParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation adapter.GetAdapter has not yet been implemented")
		}),
		AdapterGetAllAdaptersHandler: adapter.GetAllAdaptersHandlerFunc(func(params adapter.GetAllAdaptersParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation adapter.GetAllAdapters has not yet been implemented")
		}),
		HostGetAllHostsHandler: host.GetAllHostsHandlerFunc(func(params host.GetAllHostsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation host.GetAllHosts has not yet been implemented")
		}),
		InstanceGetAllInstancesHandler: instance.GetAllInstancesHandlerFunc(func(params instance.GetAllInstancesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation instance.GetAllInstances has not yet been implemented")
		}),
		NetgwGetAllNetGWsHandler: netgw.GetAllNetGWsHandlerFunc(func(params netgw.GetAllNetGWsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation netgw.GetAllNetGWs has not yet been implemented")
		}),
		PoolGetAllPoolsHandler: pool.GetAllPoolsHandlerFunc(func(params pool.GetAllPoolsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation pool.GetAllPools has not yet been implemented")
		}),
		ProjectGetAllProjectsHandler: project.GetAllProjectsHandlerFunc(func(params project.GetAllProjectsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation project.GetAllProjects has not yet been implemented")
		}),
		RegionGetAllRegionsHandler: region.GetAllRegionsHandlerFunc(func(params region.GetAllRegionsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation region.GetAllRegions has not yet been implemented")
		}),
		SubnetGetAllSubnetsHandler: subnet.GetAllSubnetsHandlerFunc(func(params subnet.GetAllSubnetsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation subnet.GetAllSubnets has not yet been implemented")
		}),
		TemplateGetAllTemplatesHandler: template.GetAllTemplatesHandlerFunc(func(params template.GetAllTemplatesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation template.GetAllTemplates has not yet been implemented")
		}),
		VnetGetAllVNetsHandler: vnet.GetAllVNetsHandlerFunc(func(params vnet.GetAllVNetsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation vnet.GetAllVNets has not yet been implemented")
		}),
		VolumeGetAllVolumesHandler: volume.GetAllVolumesHandlerFunc(func(params volume.GetAllVolumesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation volume.GetAllVolumes has not yet been implemented")
		}),
		ZoneGetAllZonesHandler: zone.GetAllZonesHandlerFunc(func(params zone.GetAllZonesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation zone.GetAllZones has not yet been implemented")
		}),
		HostGetHostHandler: host.GetHostHandlerFunc(func(params host.GetHostParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation host.GetHost has not yet been implemented")
		}),
		HostGetHostCapsHandler: host.GetHostCapsHandlerFunc(func(params host.GetHostCapsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation host.GetHostCaps has not yet been implemented")
		}),
		HostGetHostInstancesHandler: host.GetHostInstancesHandlerFunc(func(params host.GetHostInstancesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation host.GetHostInstances has not yet been implemented")
		}),
		InstanceGetInstanceHandler: instance.GetInstanceHandlerFunc(func(params instance.GetInstanceParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation instance.GetInstance has not yet been implemented")
		}),
		InstanceGetInstanceStateHandler: instance.GetInstanceStateHandlerFunc(func(params instance.GetInstanceStateParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation instance.GetInstanceState has not yet been implemented")
		}),
		NetgwGetNetGWHandler: netgw.GetNetGWHandlerFunc(func(params netgw.GetNetGWParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation netgw.GetNetGW has not yet been implemented")
		}),
		PoolGetPoolHandler: pool.GetPoolHandlerFunc(func(params pool.GetPoolParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation pool.GetPool has not yet been implemented")
		}),
		PoolGetPoolTemplatesHandler: pool.GetPoolTemplatesHandlerFunc(func(params pool.GetPoolTemplatesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation pool.GetPoolTemplates has not yet been implemented")
		}),
		PoolGetPoolVolumesHandler: pool.GetPoolVolumesHandlerFunc(func(params pool.GetPoolVolumesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation pool.GetPoolVolumes has not yet been implemented")
		}),
		ProjectGetProjectHandler: project.GetProjectHandlerFunc(func(params project.GetProjectParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation project.GetProject has not yet been implemented")
		}),
		ProjectGetProjectQuotasHandler: project.GetProjectQuotasHandlerFunc(func(params project.GetProjectQuotasParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation project.GetProjectQuotas has not yet been implemented")
		}),
		ProjectGetProjectUsageHandler: project.GetProjectUsageHandlerFunc(func(params project.GetProjectUsageParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation project.GetProjectUsage has not yet been implemented")
		}),
		ProjectGetProjectVolumesHandler: project.GetProjectVolumesHandlerFunc(func(params project.GetProjectVolumesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation project.GetProjectVolumes has not yet been implemented")
		}),
		ProjectGetProjectZoneVolumesHandler: project.GetProjectZoneVolumesHandlerFunc(func(params project.GetProjectZoneVolumesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation project.GetProjectZoneVolumes has not yet been implemented")
		}),
		RegionGetRegionHandler: region.GetRegionHandlerFunc(func(params region.GetRegionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation region.GetRegion has not yet been implemented")
		}),
		RegionGetRegionZonesHandler: region.GetRegionZonesHandlerFunc(func(params region.GetRegionZonesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation region.GetRegionZones has not yet been implemented")
		}),
		SubnetGetSubnetHandler: subnet.GetSubnetHandlerFunc(func(params subnet.GetSubnetParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation subnet.GetSubnet has not yet been implemented")
		}),
		SubnetGetSubnetAdaptersHandler: subnet.GetSubnetAdaptersHandlerFunc(func(params subnet.GetSubnetAdaptersParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation subnet.GetSubnetAdapters has not yet been implemented")
		}),
		TemplateGetTemplateVolumeHandler: template.GetTemplateVolumeHandlerFunc(func(params template.GetTemplateVolumeParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation template.GetTemplateVolume has not yet been implemented")
		}),
		VnetGetVNetHandler: vnet.GetVNetHandlerFunc(func(params vnet.GetVNetParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation vnet.GetVNet has not yet been implemented")
		}),
		VnetGetVNetSubnetsHandler: vnet.GetVNetSubnetsHandlerFunc(func(params vnet.GetVNetSubnetsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation vnet.GetVNetSubnets has not yet been implemented")
		}),
		VolumeGetVolumeHandler: volume.GetVolumeHandlerFunc(func(params volume.GetVolumeParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation volume.GetVolume has not yet been implemented")
		}),
		ZoneGetZoneHandler: zone.GetZoneHandlerFunc(func(params zone.GetZoneParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation zone.GetZone has not yet been implemented")
		}),
		ZoneGetZoneHostsHandler: zone.GetZoneHostsHandlerFunc(func(params zone.GetZoneHostsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation zone.GetZoneHosts has not yet been implemented")
		}),
		ZoneGetZoneNetGWsHandler: zone.GetZoneNetGWsHandlerFunc(func(params zone.GetZoneNetGWsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation zone.GetZoneNetGWs has not yet been implemented")
		}),
		ZoneGetZonePoolsHandler: zone.GetZonePoolsHandlerFunc(func(params zone.GetZonePoolsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation zone.GetZonePools has not yet been implemented")
		}),
		ZoneGetZoneVNetsHandler: zone.GetZoneVNetsHandlerFunc(func(params zone.GetZoneVNetsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation zone.GetZoneVNets has not yet been implemented")
		}),
		HealthzHandler: HealthzHandlerFunc(func(params HealthzParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation Healthz has not yet been implemented")
		}),
		InstanceRebootInstanceHandler: instance.RebootInstanceHandlerFunc(func(params instance.RebootInstanceParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation instance.RebootInstance has not yet been implemented")
		}),
		InstanceResetInstanceHandler: instance.ResetInstanceHandlerFunc(func(params instance.ResetInstanceParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation instance.ResetInstance has not yet been implemented")
		}),
		ProjectResetProjectQuotasHandler: project.ResetProjectQuotasHandlerFunc(func(params project.ResetProjectQuotasParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation project.ResetProjectQuotas has not yet been implemented")
		}),
		InstanceResumeInstanceHandler: instance.ResumeInstanceHandlerFunc(func(params instance.ResumeInstanceParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation instance.ResumeInstance has not yet been implemented")
		}),
		InstanceShutdownInstanceHandler: instance.ShutdownInstanceHandlerFunc(func(params instance.ShutdownInstanceParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation instance.ShutdownInstance has not yet been implemented")
		}),
		InstanceStartInstanceHandler: instance.StartInstanceHandlerFunc(func(params instance.StartInstanceParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation instance.StartInstance has not yet been implemented")
		}),
		InstanceStopInstanceHandler: instance.StopInstanceHandlerFunc(func(params instance.StopInstanceParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation instance.StopInstance has not yet been implemented")
		}),
		InstanceSuspendInstanceHandler: instance.SuspendInstanceHandlerFunc(func(params instance.SuspendInstanceParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation instance.SuspendInstance has not yet been implemented")
		}),
		AdapterUpdateAdapterHandler: adapter.UpdateAdapterHandlerFunc(func(params adapter.UpdateAdapterParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation adapter.UpdateAdapter has not yet been implemented")
		}),
		HostUpdateHostHandler: host.UpdateHostHandlerFunc(func(params host.UpdateHostParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation host.UpdateHost has not yet been implemented")
		}),
		NetgwUpdateNetGWHandler: netgw.UpdateNetGWHandlerFunc(func(params netgw.UpdateNetGWParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation netgw.UpdateNetGW has not yet been implemented")
		}),
		PoolUpdatePoolHandler: pool.UpdatePoolHandlerFunc(func(params pool.UpdatePoolParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation pool.UpdatePool has not yet been implemented")
		}),
		PoolUpdatePoolDefaultTemplateHandler: pool.UpdatePoolDefaultTemplateHandlerFunc(func(params pool.UpdatePoolDefaultTemplateParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation pool.UpdatePoolDefaultTemplate has not yet been implemented")
		}),
		ProjectUpdateProjectHandler: project.UpdateProjectHandlerFunc(func(params project.UpdateProjectParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation project.UpdateProject has not yet been implemented")
		}),
		ProjectUpdateProjectQuotasHandler: project.UpdateProjectQuotasHandlerFunc(func(params project.UpdateProjectQuotasParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation project.UpdateProjectQuotas has not yet been implemented")
		}),
		RegionUpdateRegionHandler: region.UpdateRegionHandlerFunc(func(params region.UpdateRegionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation region.UpdateRegion has not yet been implemented")
		}),
		SubnetUpdateSubnetHandler: subnet.UpdateSubnetHandlerFunc(func(params subnet.UpdateSubnetParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation subnet.UpdateSubnet has not yet been implemented")
		}),
		TemplateUpdateTemplateHandler: template.UpdateTemplateHandlerFunc(func(params template.UpdateTemplateParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation template.UpdateTemplate has not yet been implemented")
		}),
		VnetUpdateVNetHandler: vnet.UpdateVNetHandlerFunc(func(params vnet.UpdateVNetParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation vnet.UpdateVNet has not yet been implemented")
		}),
		VnetUpdateVNetDefaultSubnetHandler: vnet.UpdateVNetDefaultSubnetHandlerFunc(func(params vnet.UpdateVNetDefaultSubnetParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation vnet.UpdateVNetDefaultSubnet has not yet been implemented")
		}),
		VolumeUpdateVolumeHandler: volume.UpdateVolumeHandlerFunc(func(params volume.UpdateVolumeParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation volume.UpdateVolume has not yet been implemented")
		}),
		ZoneUpdateZoneHandler: zone.UpdateZoneHandlerFunc(func(params zone.UpdateZoneParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation zone.UpdateZone has not yet been implemented")
		}),
		ZoneUpdateZoneDefaultPoolHandler: zone.UpdateZoneDefaultPoolHandlerFunc(func(params zone.UpdateZoneDefaultPoolParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation zone.UpdateZoneDefaultPool has not yet been implemented")
		}),
		ZoneUpdateZoneDefaultVNetHandler: zone.UpdateZoneDefaultVNetHandlerFunc(func(params zone.UpdateZoneDefaultVNetParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation zone.UpdateZoneDefaultVNet has not yet been implemented")
		}),

		// Applies when the "x-token" header is set
		KeyAuth: func(token string) (interface{}, error) {
			return nil, errors.NotImplemented("api key auth (key) x-token from header param [x-token] has not yet been implemented")
		},
		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*KowabungaAPI Kvm Orchestrator With A BUNch of Goods Added */
type KowabungaAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer
	// TxtProducer registers a producer for the following mime types:
	//   - text/plain
	TxtProducer runtime.Producer

	// KeyAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key x-token provided in the header
	KeyAuth func(string) (interface{}, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// SubnetCreateAdapterHandler sets the operation handler for the create adapter operation
	SubnetCreateAdapterHandler subnet.CreateAdapterHandler
	// ZoneCreateHostHandler sets the operation handler for the create host operation
	ZoneCreateHostHandler zone.CreateHostHandler
	// ZoneCreateNetGWHandler sets the operation handler for the create net g w operation
	ZoneCreateNetGWHandler zone.CreateNetGWHandler
	// ZoneCreatePoolHandler sets the operation handler for the create pool operation
	ZoneCreatePoolHandler zone.CreatePoolHandler
	// ProjectCreateProjectHandler sets the operation handler for the create project operation
	ProjectCreateProjectHandler project.CreateProjectHandler
	// RegionCreateRegionHandler sets the operation handler for the create region operation
	RegionCreateRegionHandler region.CreateRegionHandler
	// VnetCreateSubnetHandler sets the operation handler for the create subnet operation
	VnetCreateSubnetHandler vnet.CreateSubnetHandler
	// PoolCreateTemplateHandler sets the operation handler for the create template operation
	PoolCreateTemplateHandler pool.CreateTemplateHandler
	// ZoneCreateVNetHandler sets the operation handler for the create v net operation
	ZoneCreateVNetHandler zone.CreateVNetHandler
	// ProjectCreateVolumeHandler sets the operation handler for the create volume operation
	ProjectCreateVolumeHandler project.CreateVolumeHandler
	// RegionCreateZoneHandler sets the operation handler for the create zone operation
	RegionCreateZoneHandler region.CreateZoneHandler
	// ProjectCreateZoneVolumeHandler sets the operation handler for the create zone volume operation
	ProjectCreateZoneVolumeHandler project.CreateZoneVolumeHandler
	// AdapterDeleteAdapterHandler sets the operation handler for the delete adapter operation
	AdapterDeleteAdapterHandler adapter.DeleteAdapterHandler
	// HostDeleteHostHandler sets the operation handler for the delete host operation
	HostDeleteHostHandler host.DeleteHostHandler
	// NetgwDeleteNetGWHandler sets the operation handler for the delete net g w operation
	NetgwDeleteNetGWHandler netgw.DeleteNetGWHandler
	// PoolDeletePoolHandler sets the operation handler for the delete pool operation
	PoolDeletePoolHandler pool.DeletePoolHandler
	// ProjectDeleteProjectHandler sets the operation handler for the delete project operation
	ProjectDeleteProjectHandler project.DeleteProjectHandler
	// RegionDeleteRegionHandler sets the operation handler for the delete region operation
	RegionDeleteRegionHandler region.DeleteRegionHandler
	// SubnetDeleteSubnetHandler sets the operation handler for the delete subnet operation
	SubnetDeleteSubnetHandler subnet.DeleteSubnetHandler
	// TemplateDeleteTemplateHandler sets the operation handler for the delete template operation
	TemplateDeleteTemplateHandler template.DeleteTemplateHandler
	// VnetDeleteVNetHandler sets the operation handler for the delete v net operation
	VnetDeleteVNetHandler vnet.DeleteVNetHandler
	// VolumeDeleteVolumeHandler sets the operation handler for the delete volume operation
	VolumeDeleteVolumeHandler volume.DeleteVolumeHandler
	// ZoneDeleteZoneHandler sets the operation handler for the delete zone operation
	ZoneDeleteZoneHandler zone.DeleteZoneHandler
	// AdapterGetAdapterHandler sets the operation handler for the get adapter operation
	AdapterGetAdapterHandler adapter.GetAdapterHandler
	// AdapterGetAllAdaptersHandler sets the operation handler for the get all adapters operation
	AdapterGetAllAdaptersHandler adapter.GetAllAdaptersHandler
	// HostGetAllHostsHandler sets the operation handler for the get all hosts operation
	HostGetAllHostsHandler host.GetAllHostsHandler
	// InstanceGetAllInstancesHandler sets the operation handler for the get all instances operation
	InstanceGetAllInstancesHandler instance.GetAllInstancesHandler
	// NetgwGetAllNetGWsHandler sets the operation handler for the get all net g ws operation
	NetgwGetAllNetGWsHandler netgw.GetAllNetGWsHandler
	// PoolGetAllPoolsHandler sets the operation handler for the get all pools operation
	PoolGetAllPoolsHandler pool.GetAllPoolsHandler
	// ProjectGetAllProjectsHandler sets the operation handler for the get all projects operation
	ProjectGetAllProjectsHandler project.GetAllProjectsHandler
	// RegionGetAllRegionsHandler sets the operation handler for the get all regions operation
	RegionGetAllRegionsHandler region.GetAllRegionsHandler
	// SubnetGetAllSubnetsHandler sets the operation handler for the get all subnets operation
	SubnetGetAllSubnetsHandler subnet.GetAllSubnetsHandler
	// TemplateGetAllTemplatesHandler sets the operation handler for the get all templates operation
	TemplateGetAllTemplatesHandler template.GetAllTemplatesHandler
	// VnetGetAllVNetsHandler sets the operation handler for the get all v nets operation
	VnetGetAllVNetsHandler vnet.GetAllVNetsHandler
	// VolumeGetAllVolumesHandler sets the operation handler for the get all volumes operation
	VolumeGetAllVolumesHandler volume.GetAllVolumesHandler
	// ZoneGetAllZonesHandler sets the operation handler for the get all zones operation
	ZoneGetAllZonesHandler zone.GetAllZonesHandler
	// HostGetHostHandler sets the operation handler for the get host operation
	HostGetHostHandler host.GetHostHandler
	// HostGetHostCapsHandler sets the operation handler for the get host caps operation
	HostGetHostCapsHandler host.GetHostCapsHandler
	// HostGetHostInstancesHandler sets the operation handler for the get host instances operation
	HostGetHostInstancesHandler host.GetHostInstancesHandler
	// InstanceGetInstanceHandler sets the operation handler for the get instance operation
	InstanceGetInstanceHandler instance.GetInstanceHandler
	// InstanceGetInstanceStateHandler sets the operation handler for the get instance state operation
	InstanceGetInstanceStateHandler instance.GetInstanceStateHandler
	// NetgwGetNetGWHandler sets the operation handler for the get net g w operation
	NetgwGetNetGWHandler netgw.GetNetGWHandler
	// PoolGetPoolHandler sets the operation handler for the get pool operation
	PoolGetPoolHandler pool.GetPoolHandler
	// PoolGetPoolTemplatesHandler sets the operation handler for the get pool templates operation
	PoolGetPoolTemplatesHandler pool.GetPoolTemplatesHandler
	// PoolGetPoolVolumesHandler sets the operation handler for the get pool volumes operation
	PoolGetPoolVolumesHandler pool.GetPoolVolumesHandler
	// ProjectGetProjectHandler sets the operation handler for the get project operation
	ProjectGetProjectHandler project.GetProjectHandler
	// ProjectGetProjectQuotasHandler sets the operation handler for the get project quotas operation
	ProjectGetProjectQuotasHandler project.GetProjectQuotasHandler
	// ProjectGetProjectUsageHandler sets the operation handler for the get project usage operation
	ProjectGetProjectUsageHandler project.GetProjectUsageHandler
	// ProjectGetProjectVolumesHandler sets the operation handler for the get project volumes operation
	ProjectGetProjectVolumesHandler project.GetProjectVolumesHandler
	// ProjectGetProjectZoneVolumesHandler sets the operation handler for the get project zone volumes operation
	ProjectGetProjectZoneVolumesHandler project.GetProjectZoneVolumesHandler
	// RegionGetRegionHandler sets the operation handler for the get region operation
	RegionGetRegionHandler region.GetRegionHandler
	// RegionGetRegionZonesHandler sets the operation handler for the get region zones operation
	RegionGetRegionZonesHandler region.GetRegionZonesHandler
	// SubnetGetSubnetHandler sets the operation handler for the get subnet operation
	SubnetGetSubnetHandler subnet.GetSubnetHandler
	// SubnetGetSubnetAdaptersHandler sets the operation handler for the get subnet adapters operation
	SubnetGetSubnetAdaptersHandler subnet.GetSubnetAdaptersHandler
	// TemplateGetTemplateVolumeHandler sets the operation handler for the get template volume operation
	TemplateGetTemplateVolumeHandler template.GetTemplateVolumeHandler
	// VnetGetVNetHandler sets the operation handler for the get v net operation
	VnetGetVNetHandler vnet.GetVNetHandler
	// VnetGetVNetSubnetsHandler sets the operation handler for the get v net subnets operation
	VnetGetVNetSubnetsHandler vnet.GetVNetSubnetsHandler
	// VolumeGetVolumeHandler sets the operation handler for the get volume operation
	VolumeGetVolumeHandler volume.GetVolumeHandler
	// ZoneGetZoneHandler sets the operation handler for the get zone operation
	ZoneGetZoneHandler zone.GetZoneHandler
	// ZoneGetZoneHostsHandler sets the operation handler for the get zone hosts operation
	ZoneGetZoneHostsHandler zone.GetZoneHostsHandler
	// ZoneGetZoneNetGWsHandler sets the operation handler for the get zone net g ws operation
	ZoneGetZoneNetGWsHandler zone.GetZoneNetGWsHandler
	// ZoneGetZonePoolsHandler sets the operation handler for the get zone pools operation
	ZoneGetZonePoolsHandler zone.GetZonePoolsHandler
	// ZoneGetZoneVNetsHandler sets the operation handler for the get zone v nets operation
	ZoneGetZoneVNetsHandler zone.GetZoneVNetsHandler
	// HealthzHandler sets the operation handler for the healthz operation
	HealthzHandler HealthzHandler
	// InstanceRebootInstanceHandler sets the operation handler for the reboot instance operation
	InstanceRebootInstanceHandler instance.RebootInstanceHandler
	// InstanceResetInstanceHandler sets the operation handler for the reset instance operation
	InstanceResetInstanceHandler instance.ResetInstanceHandler
	// ProjectResetProjectQuotasHandler sets the operation handler for the reset project quotas operation
	ProjectResetProjectQuotasHandler project.ResetProjectQuotasHandler
	// InstanceResumeInstanceHandler sets the operation handler for the resume instance operation
	InstanceResumeInstanceHandler instance.ResumeInstanceHandler
	// InstanceShutdownInstanceHandler sets the operation handler for the shutdown instance operation
	InstanceShutdownInstanceHandler instance.ShutdownInstanceHandler
	// InstanceStartInstanceHandler sets the operation handler for the start instance operation
	InstanceStartInstanceHandler instance.StartInstanceHandler
	// InstanceStopInstanceHandler sets the operation handler for the stop instance operation
	InstanceStopInstanceHandler instance.StopInstanceHandler
	// InstanceSuspendInstanceHandler sets the operation handler for the suspend instance operation
	InstanceSuspendInstanceHandler instance.SuspendInstanceHandler
	// AdapterUpdateAdapterHandler sets the operation handler for the update adapter operation
	AdapterUpdateAdapterHandler adapter.UpdateAdapterHandler
	// HostUpdateHostHandler sets the operation handler for the update host operation
	HostUpdateHostHandler host.UpdateHostHandler
	// NetgwUpdateNetGWHandler sets the operation handler for the update net g w operation
	NetgwUpdateNetGWHandler netgw.UpdateNetGWHandler
	// PoolUpdatePoolHandler sets the operation handler for the update pool operation
	PoolUpdatePoolHandler pool.UpdatePoolHandler
	// PoolUpdatePoolDefaultTemplateHandler sets the operation handler for the update pool default template operation
	PoolUpdatePoolDefaultTemplateHandler pool.UpdatePoolDefaultTemplateHandler
	// ProjectUpdateProjectHandler sets the operation handler for the update project operation
	ProjectUpdateProjectHandler project.UpdateProjectHandler
	// ProjectUpdateProjectQuotasHandler sets the operation handler for the update project quotas operation
	ProjectUpdateProjectQuotasHandler project.UpdateProjectQuotasHandler
	// RegionUpdateRegionHandler sets the operation handler for the update region operation
	RegionUpdateRegionHandler region.UpdateRegionHandler
	// SubnetUpdateSubnetHandler sets the operation handler for the update subnet operation
	SubnetUpdateSubnetHandler subnet.UpdateSubnetHandler
	// TemplateUpdateTemplateHandler sets the operation handler for the update template operation
	TemplateUpdateTemplateHandler template.UpdateTemplateHandler
	// VnetUpdateVNetHandler sets the operation handler for the update v net operation
	VnetUpdateVNetHandler vnet.UpdateVNetHandler
	// VnetUpdateVNetDefaultSubnetHandler sets the operation handler for the update v net default subnet operation
	VnetUpdateVNetDefaultSubnetHandler vnet.UpdateVNetDefaultSubnetHandler
	// VolumeUpdateVolumeHandler sets the operation handler for the update volume operation
	VolumeUpdateVolumeHandler volume.UpdateVolumeHandler
	// ZoneUpdateZoneHandler sets the operation handler for the update zone operation
	ZoneUpdateZoneHandler zone.UpdateZoneHandler
	// ZoneUpdateZoneDefaultPoolHandler sets the operation handler for the update zone default pool operation
	ZoneUpdateZoneDefaultPoolHandler zone.UpdateZoneDefaultPoolHandler
	// ZoneUpdateZoneDefaultVNetHandler sets the operation handler for the update zone default v net operation
	ZoneUpdateZoneDefaultVNetHandler zone.UpdateZoneDefaultVNetHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *KowabungaAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *KowabungaAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *KowabungaAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *KowabungaAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *KowabungaAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *KowabungaAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *KowabungaAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *KowabungaAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *KowabungaAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the KowabungaAPI
func (o *KowabungaAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}
	if o.TxtProducer == nil {
		unregistered = append(unregistered, "TxtProducer")
	}

	if o.KeyAuth == nil {
		unregistered = append(unregistered, "XTokenAuth")
	}

	if o.SubnetCreateAdapterHandler == nil {
		unregistered = append(unregistered, "subnet.CreateAdapterHandler")
	}
	if o.ZoneCreateHostHandler == nil {
		unregistered = append(unregistered, "zone.CreateHostHandler")
	}
	if o.ZoneCreateNetGWHandler == nil {
		unregistered = append(unregistered, "zone.CreateNetGWHandler")
	}
	if o.ZoneCreatePoolHandler == nil {
		unregistered = append(unregistered, "zone.CreatePoolHandler")
	}
	if o.ProjectCreateProjectHandler == nil {
		unregistered = append(unregistered, "project.CreateProjectHandler")
	}
	if o.RegionCreateRegionHandler == nil {
		unregistered = append(unregistered, "region.CreateRegionHandler")
	}
	if o.VnetCreateSubnetHandler == nil {
		unregistered = append(unregistered, "vnet.CreateSubnetHandler")
	}
	if o.PoolCreateTemplateHandler == nil {
		unregistered = append(unregistered, "pool.CreateTemplateHandler")
	}
	if o.ZoneCreateVNetHandler == nil {
		unregistered = append(unregistered, "zone.CreateVNetHandler")
	}
	if o.ProjectCreateVolumeHandler == nil {
		unregistered = append(unregistered, "project.CreateVolumeHandler")
	}
	if o.RegionCreateZoneHandler == nil {
		unregistered = append(unregistered, "region.CreateZoneHandler")
	}
	if o.ProjectCreateZoneVolumeHandler == nil {
		unregistered = append(unregistered, "project.CreateZoneVolumeHandler")
	}
	if o.AdapterDeleteAdapterHandler == nil {
		unregistered = append(unregistered, "adapter.DeleteAdapterHandler")
	}
	if o.HostDeleteHostHandler == nil {
		unregistered = append(unregistered, "host.DeleteHostHandler")
	}
	if o.NetgwDeleteNetGWHandler == nil {
		unregistered = append(unregistered, "netgw.DeleteNetGWHandler")
	}
	if o.PoolDeletePoolHandler == nil {
		unregistered = append(unregistered, "pool.DeletePoolHandler")
	}
	if o.ProjectDeleteProjectHandler == nil {
		unregistered = append(unregistered, "project.DeleteProjectHandler")
	}
	if o.RegionDeleteRegionHandler == nil {
		unregistered = append(unregistered, "region.DeleteRegionHandler")
	}
	if o.SubnetDeleteSubnetHandler == nil {
		unregistered = append(unregistered, "subnet.DeleteSubnetHandler")
	}
	if o.TemplateDeleteTemplateHandler == nil {
		unregistered = append(unregistered, "template.DeleteTemplateHandler")
	}
	if o.VnetDeleteVNetHandler == nil {
		unregistered = append(unregistered, "vnet.DeleteVNetHandler")
	}
	if o.VolumeDeleteVolumeHandler == nil {
		unregistered = append(unregistered, "volume.DeleteVolumeHandler")
	}
	if o.ZoneDeleteZoneHandler == nil {
		unregistered = append(unregistered, "zone.DeleteZoneHandler")
	}
	if o.AdapterGetAdapterHandler == nil {
		unregistered = append(unregistered, "adapter.GetAdapterHandler")
	}
	if o.AdapterGetAllAdaptersHandler == nil {
		unregistered = append(unregistered, "adapter.GetAllAdaptersHandler")
	}
	if o.HostGetAllHostsHandler == nil {
		unregistered = append(unregistered, "host.GetAllHostsHandler")
	}
	if o.InstanceGetAllInstancesHandler == nil {
		unregistered = append(unregistered, "instance.GetAllInstancesHandler")
	}
	if o.NetgwGetAllNetGWsHandler == nil {
		unregistered = append(unregistered, "netgw.GetAllNetGWsHandler")
	}
	if o.PoolGetAllPoolsHandler == nil {
		unregistered = append(unregistered, "pool.GetAllPoolsHandler")
	}
	if o.ProjectGetAllProjectsHandler == nil {
		unregistered = append(unregistered, "project.GetAllProjectsHandler")
	}
	if o.RegionGetAllRegionsHandler == nil {
		unregistered = append(unregistered, "region.GetAllRegionsHandler")
	}
	if o.SubnetGetAllSubnetsHandler == nil {
		unregistered = append(unregistered, "subnet.GetAllSubnetsHandler")
	}
	if o.TemplateGetAllTemplatesHandler == nil {
		unregistered = append(unregistered, "template.GetAllTemplatesHandler")
	}
	if o.VnetGetAllVNetsHandler == nil {
		unregistered = append(unregistered, "vnet.GetAllVNetsHandler")
	}
	if o.VolumeGetAllVolumesHandler == nil {
		unregistered = append(unregistered, "volume.GetAllVolumesHandler")
	}
	if o.ZoneGetAllZonesHandler == nil {
		unregistered = append(unregistered, "zone.GetAllZonesHandler")
	}
	if o.HostGetHostHandler == nil {
		unregistered = append(unregistered, "host.GetHostHandler")
	}
	if o.HostGetHostCapsHandler == nil {
		unregistered = append(unregistered, "host.GetHostCapsHandler")
	}
	if o.HostGetHostInstancesHandler == nil {
		unregistered = append(unregistered, "host.GetHostInstancesHandler")
	}
	if o.InstanceGetInstanceHandler == nil {
		unregistered = append(unregistered, "instance.GetInstanceHandler")
	}
	if o.InstanceGetInstanceStateHandler == nil {
		unregistered = append(unregistered, "instance.GetInstanceStateHandler")
	}
	if o.NetgwGetNetGWHandler == nil {
		unregistered = append(unregistered, "netgw.GetNetGWHandler")
	}
	if o.PoolGetPoolHandler == nil {
		unregistered = append(unregistered, "pool.GetPoolHandler")
	}
	if o.PoolGetPoolTemplatesHandler == nil {
		unregistered = append(unregistered, "pool.GetPoolTemplatesHandler")
	}
	if o.PoolGetPoolVolumesHandler == nil {
		unregistered = append(unregistered, "pool.GetPoolVolumesHandler")
	}
	if o.ProjectGetProjectHandler == nil {
		unregistered = append(unregistered, "project.GetProjectHandler")
	}
	if o.ProjectGetProjectQuotasHandler == nil {
		unregistered = append(unregistered, "project.GetProjectQuotasHandler")
	}
	if o.ProjectGetProjectUsageHandler == nil {
		unregistered = append(unregistered, "project.GetProjectUsageHandler")
	}
	if o.ProjectGetProjectVolumesHandler == nil {
		unregistered = append(unregistered, "project.GetProjectVolumesHandler")
	}
	if o.ProjectGetProjectZoneVolumesHandler == nil {
		unregistered = append(unregistered, "project.GetProjectZoneVolumesHandler")
	}
	if o.RegionGetRegionHandler == nil {
		unregistered = append(unregistered, "region.GetRegionHandler")
	}
	if o.RegionGetRegionZonesHandler == nil {
		unregistered = append(unregistered, "region.GetRegionZonesHandler")
	}
	if o.SubnetGetSubnetHandler == nil {
		unregistered = append(unregistered, "subnet.GetSubnetHandler")
	}
	if o.SubnetGetSubnetAdaptersHandler == nil {
		unregistered = append(unregistered, "subnet.GetSubnetAdaptersHandler")
	}
	if o.TemplateGetTemplateVolumeHandler == nil {
		unregistered = append(unregistered, "template.GetTemplateVolumeHandler")
	}
	if o.VnetGetVNetHandler == nil {
		unregistered = append(unregistered, "vnet.GetVNetHandler")
	}
	if o.VnetGetVNetSubnetsHandler == nil {
		unregistered = append(unregistered, "vnet.GetVNetSubnetsHandler")
	}
	if o.VolumeGetVolumeHandler == nil {
		unregistered = append(unregistered, "volume.GetVolumeHandler")
	}
	if o.ZoneGetZoneHandler == nil {
		unregistered = append(unregistered, "zone.GetZoneHandler")
	}
	if o.ZoneGetZoneHostsHandler == nil {
		unregistered = append(unregistered, "zone.GetZoneHostsHandler")
	}
	if o.ZoneGetZoneNetGWsHandler == nil {
		unregistered = append(unregistered, "zone.GetZoneNetGWsHandler")
	}
	if o.ZoneGetZonePoolsHandler == nil {
		unregistered = append(unregistered, "zone.GetZonePoolsHandler")
	}
	if o.ZoneGetZoneVNetsHandler == nil {
		unregistered = append(unregistered, "zone.GetZoneVNetsHandler")
	}
	if o.HealthzHandler == nil {
		unregistered = append(unregistered, "HealthzHandler")
	}
	if o.InstanceRebootInstanceHandler == nil {
		unregistered = append(unregistered, "instance.RebootInstanceHandler")
	}
	if o.InstanceResetInstanceHandler == nil {
		unregistered = append(unregistered, "instance.ResetInstanceHandler")
	}
	if o.ProjectResetProjectQuotasHandler == nil {
		unregistered = append(unregistered, "project.ResetProjectQuotasHandler")
	}
	if o.InstanceResumeInstanceHandler == nil {
		unregistered = append(unregistered, "instance.ResumeInstanceHandler")
	}
	if o.InstanceShutdownInstanceHandler == nil {
		unregistered = append(unregistered, "instance.ShutdownInstanceHandler")
	}
	if o.InstanceStartInstanceHandler == nil {
		unregistered = append(unregistered, "instance.StartInstanceHandler")
	}
	if o.InstanceStopInstanceHandler == nil {
		unregistered = append(unregistered, "instance.StopInstanceHandler")
	}
	if o.InstanceSuspendInstanceHandler == nil {
		unregistered = append(unregistered, "instance.SuspendInstanceHandler")
	}
	if o.AdapterUpdateAdapterHandler == nil {
		unregistered = append(unregistered, "adapter.UpdateAdapterHandler")
	}
	if o.HostUpdateHostHandler == nil {
		unregistered = append(unregistered, "host.UpdateHostHandler")
	}
	if o.NetgwUpdateNetGWHandler == nil {
		unregistered = append(unregistered, "netgw.UpdateNetGWHandler")
	}
	if o.PoolUpdatePoolHandler == nil {
		unregistered = append(unregistered, "pool.UpdatePoolHandler")
	}
	if o.PoolUpdatePoolDefaultTemplateHandler == nil {
		unregistered = append(unregistered, "pool.UpdatePoolDefaultTemplateHandler")
	}
	if o.ProjectUpdateProjectHandler == nil {
		unregistered = append(unregistered, "project.UpdateProjectHandler")
	}
	if o.ProjectUpdateProjectQuotasHandler == nil {
		unregistered = append(unregistered, "project.UpdateProjectQuotasHandler")
	}
	if o.RegionUpdateRegionHandler == nil {
		unregistered = append(unregistered, "region.UpdateRegionHandler")
	}
	if o.SubnetUpdateSubnetHandler == nil {
		unregistered = append(unregistered, "subnet.UpdateSubnetHandler")
	}
	if o.TemplateUpdateTemplateHandler == nil {
		unregistered = append(unregistered, "template.UpdateTemplateHandler")
	}
	if o.VnetUpdateVNetHandler == nil {
		unregistered = append(unregistered, "vnet.UpdateVNetHandler")
	}
	if o.VnetUpdateVNetDefaultSubnetHandler == nil {
		unregistered = append(unregistered, "vnet.UpdateVNetDefaultSubnetHandler")
	}
	if o.VolumeUpdateVolumeHandler == nil {
		unregistered = append(unregistered, "volume.UpdateVolumeHandler")
	}
	if o.ZoneUpdateZoneHandler == nil {
		unregistered = append(unregistered, "zone.UpdateZoneHandler")
	}
	if o.ZoneUpdateZoneDefaultPoolHandler == nil {
		unregistered = append(unregistered, "zone.UpdateZoneDefaultPoolHandler")
	}
	if o.ZoneUpdateZoneDefaultVNetHandler == nil {
		unregistered = append(unregistered, "zone.UpdateZoneDefaultVNetHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *KowabungaAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *KowabungaAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	result := make(map[string]runtime.Authenticator)
	for name := range schemes {
		switch name {
		case "key":
			scheme := schemes[name]
			result[name] = o.APIKeyAuthenticator(scheme.Name, scheme.In, o.KeyAuth)

		}
	}
	return result
}

// Authorizer returns the registered authorizer
func (o *KowabungaAPI) Authorizer() runtime.Authorizer {
	return o.APIAuthorizer
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *KowabungaAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *KowabungaAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		case "text/plain":
			result["text/plain"] = o.TxtProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *KowabungaAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the kowabunga API
func (o *KowabungaAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *KowabungaAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/subnet/{subnetId}/adapter"] = subnet.NewCreateAdapter(o.context, o.SubnetCreateAdapterHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/zone/{zoneId}/host"] = zone.NewCreateHost(o.context, o.ZoneCreateHostHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/zone/{zoneId}/netgw"] = zone.NewCreateNetGW(o.context, o.ZoneCreateNetGWHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/zone/{zoneId}/pool"] = zone.NewCreatePool(o.context, o.ZoneCreatePoolHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/project"] = project.NewCreateProject(o.context, o.ProjectCreateProjectHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/region"] = region.NewCreateRegion(o.context, o.RegionCreateRegionHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/vnet/{vnetId}/subnet"] = vnet.NewCreateSubnet(o.context, o.VnetCreateSubnetHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/pool/{poolId}/template"] = pool.NewCreateTemplate(o.context, o.PoolCreateTemplateHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/zone/{zoneId}/vnet"] = zone.NewCreateVNet(o.context, o.ZoneCreateVNetHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/project/{projectId}/volume"] = project.NewCreateVolume(o.context, o.ProjectCreateVolumeHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/region/{regionId}/zone"] = region.NewCreateZone(o.context, o.RegionCreateZoneHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/project/{projectId}/zone/{zoneId}/volume"] = project.NewCreateZoneVolume(o.context, o.ProjectCreateZoneVolumeHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/adapter/{adapterId}"] = adapter.NewDeleteAdapter(o.context, o.AdapterDeleteAdapterHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/host/{hostId}"] = host.NewDeleteHost(o.context, o.HostDeleteHostHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/netgw/{netgwId}"] = netgw.NewDeleteNetGW(o.context, o.NetgwDeleteNetGWHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/pool/{poolId}"] = pool.NewDeletePool(o.context, o.PoolDeletePoolHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/project/{projectId}"] = project.NewDeleteProject(o.context, o.ProjectDeleteProjectHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/region/{regionId}"] = region.NewDeleteRegion(o.context, o.RegionDeleteRegionHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/subnet/{subnetId}"] = subnet.NewDeleteSubnet(o.context, o.SubnetDeleteSubnetHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/template/{templateId}"] = template.NewDeleteTemplate(o.context, o.TemplateDeleteTemplateHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/vnet/{vnetId}"] = vnet.NewDeleteVNet(o.context, o.VnetDeleteVNetHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/volume/{volumeId}"] = volume.NewDeleteVolume(o.context, o.VolumeDeleteVolumeHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/zone/{zoneId}"] = zone.NewDeleteZone(o.context, o.ZoneDeleteZoneHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/adapter/{adapterId}"] = adapter.NewGetAdapter(o.context, o.AdapterGetAdapterHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/adapter"] = adapter.NewGetAllAdapters(o.context, o.AdapterGetAllAdaptersHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/host"] = host.NewGetAllHosts(o.context, o.HostGetAllHostsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/instance"] = instance.NewGetAllInstances(o.context, o.InstanceGetAllInstancesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/netgw"] = netgw.NewGetAllNetGWs(o.context, o.NetgwGetAllNetGWsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/pool"] = pool.NewGetAllPools(o.context, o.PoolGetAllPoolsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/project"] = project.NewGetAllProjects(o.context, o.ProjectGetAllProjectsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/region"] = region.NewGetAllRegions(o.context, o.RegionGetAllRegionsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/subnet"] = subnet.NewGetAllSubnets(o.context, o.SubnetGetAllSubnetsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/template"] = template.NewGetAllTemplates(o.context, o.TemplateGetAllTemplatesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/vnet"] = vnet.NewGetAllVNets(o.context, o.VnetGetAllVNetsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/volume"] = volume.NewGetAllVolumes(o.context, o.VolumeGetAllVolumesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/zone"] = zone.NewGetAllZones(o.context, o.ZoneGetAllZonesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/host/{hostId}"] = host.NewGetHost(o.context, o.HostGetHostHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/host/{hostId}/caps"] = host.NewGetHostCaps(o.context, o.HostGetHostCapsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/host/{hostId}/instances"] = host.NewGetHostInstances(o.context, o.HostGetHostInstancesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/instance/{instanceId}"] = instance.NewGetInstance(o.context, o.InstanceGetInstanceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/instance/{instanceId}/state"] = instance.NewGetInstanceState(o.context, o.InstanceGetInstanceStateHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/netgw/{netgwId}"] = netgw.NewGetNetGW(o.context, o.NetgwGetNetGWHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/pool/{poolId}"] = pool.NewGetPool(o.context, o.PoolGetPoolHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/pool/{poolId}/templates"] = pool.NewGetPoolTemplates(o.context, o.PoolGetPoolTemplatesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/pool/{poolId}/volumes"] = pool.NewGetPoolVolumes(o.context, o.PoolGetPoolVolumesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/project/{projectId}"] = project.NewGetProject(o.context, o.ProjectGetProjectHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/project/{projectId}/quotas"] = project.NewGetProjectQuotas(o.context, o.ProjectGetProjectQuotasHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/project/{projectId}/usage"] = project.NewGetProjectUsage(o.context, o.ProjectGetProjectUsageHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/project/{projectId}/volumes"] = project.NewGetProjectVolumes(o.context, o.ProjectGetProjectVolumesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/project/{projectId}/zone/{zoneId}/volumes"] = project.NewGetProjectZoneVolumes(o.context, o.ProjectGetProjectZoneVolumesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/region/{regionId}"] = region.NewGetRegion(o.context, o.RegionGetRegionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/region/{regionId}/zones"] = region.NewGetRegionZones(o.context, o.RegionGetRegionZonesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/subnet/{subnetId}"] = subnet.NewGetSubnet(o.context, o.SubnetGetSubnetHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/subnet/{subnetId}/adapters"] = subnet.NewGetSubnetAdapters(o.context, o.SubnetGetSubnetAdaptersHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/template/{templateId}"] = template.NewGetTemplateVolume(o.context, o.TemplateGetTemplateVolumeHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/vnet/{vnetId}"] = vnet.NewGetVNet(o.context, o.VnetGetVNetHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/vnet/{vnetId}/subnets"] = vnet.NewGetVNetSubnets(o.context, o.VnetGetVNetSubnetsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/volume/{volumeId}"] = volume.NewGetVolume(o.context, o.VolumeGetVolumeHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/zone/{zoneId}"] = zone.NewGetZone(o.context, o.ZoneGetZoneHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/zone/{zoneId}/hosts"] = zone.NewGetZoneHosts(o.context, o.ZoneGetZoneHostsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/zone/{zoneId}/netgws"] = zone.NewGetZoneNetGWs(o.context, o.ZoneGetZoneNetGWsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/zone/{zoneId}/pools"] = zone.NewGetZonePools(o.context, o.ZoneGetZonePoolsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/zone/{zoneId}/vnets"] = zone.NewGetZoneVNets(o.context, o.ZoneGetZoneVNetsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/healthz"] = NewHealthz(o.context, o.HealthzHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/instance/{instanceId}/reboot"] = instance.NewRebootInstance(o.context, o.InstanceRebootInstanceHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/instance/{instanceId}/reset"] = instance.NewResetInstance(o.context, o.InstanceResetInstanceHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/project/{projectId}/quotas"] = project.NewResetProjectQuotas(o.context, o.ProjectResetProjectQuotasHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/instance/{instanceId}/resume"] = instance.NewResumeInstance(o.context, o.InstanceResumeInstanceHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/instance/{instanceId}/shutdown"] = instance.NewShutdownInstance(o.context, o.InstanceShutdownInstanceHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/instance/{instanceId}/start"] = instance.NewStartInstance(o.context, o.InstanceStartInstanceHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/instance/{instanceId}/stop"] = instance.NewStopInstance(o.context, o.InstanceStopInstanceHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/instance/{instanceId}/suspend"] = instance.NewSuspendInstance(o.context, o.InstanceSuspendInstanceHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/adapter/{adapterId}"] = adapter.NewUpdateAdapter(o.context, o.AdapterUpdateAdapterHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/host/{hostId}"] = host.NewUpdateHost(o.context, o.HostUpdateHostHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/netgw/{netgwId}"] = netgw.NewUpdateNetGW(o.context, o.NetgwUpdateNetGWHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/pool/{poolId}"] = pool.NewUpdatePool(o.context, o.PoolUpdatePoolHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/pool/{poolId}/template/{templateId}/default"] = pool.NewUpdatePoolDefaultTemplate(o.context, o.PoolUpdatePoolDefaultTemplateHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/project/{projectId}"] = project.NewUpdateProject(o.context, o.ProjectUpdateProjectHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/project/{projectId}/quotas"] = project.NewUpdateProjectQuotas(o.context, o.ProjectUpdateProjectQuotasHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/region/{regionId}"] = region.NewUpdateRegion(o.context, o.RegionUpdateRegionHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/subnet/{subnetId}"] = subnet.NewUpdateSubnet(o.context, o.SubnetUpdateSubnetHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/template/{templateId}"] = template.NewUpdateTemplate(o.context, o.TemplateUpdateTemplateHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/vnet/{vnetId}"] = vnet.NewUpdateVNet(o.context, o.VnetUpdateVNetHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/vnet/{vnetId}/subnet/{subnetId}/default"] = vnet.NewUpdateVNetDefaultSubnet(o.context, o.VnetUpdateVNetDefaultSubnetHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/volume/{volumeId}"] = volume.NewUpdateVolume(o.context, o.VolumeUpdateVolumeHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/zone/{zoneId}"] = zone.NewUpdateZone(o.context, o.ZoneUpdateZoneHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/zone/{zoneId}/pool/{poolId}/default"] = zone.NewUpdateZoneDefaultPool(o.context, o.ZoneUpdateZoneDefaultPoolHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/zone/{zoneId}/vnet/{vnetId}/default"] = zone.NewUpdateZoneDefaultVNet(o.context, o.ZoneUpdateZoneDefaultVNetHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *KowabungaAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *KowabungaAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *KowabungaAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *KowabungaAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *KowabungaAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
