// Code generated by go-swagger; DO NOT EDIT.

package instance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/dalet-oss/kowabunga-api/models"
)

// GetInstanceOKCode is the HTTP code returned for type GetInstanceOK
const GetInstanceOKCode int = 200

/*
GetInstanceOK Returns the virtual machine object.

swagger:response getInstanceOK
*/
type GetInstanceOK struct {

	/*
	  In: Body
	*/
	Payload *models.Instance `json:"body,omitempty"`
}

// NewGetInstanceOK creates GetInstanceOK with default headers values
func NewGetInstanceOK() *GetInstanceOK {

	return &GetInstanceOK{}
}

// WithPayload adds the payload to the get instance o k response
func (o *GetInstanceOK) WithPayload(payload *models.Instance) *GetInstanceOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get instance o k response
func (o *GetInstanceOK) SetPayload(payload *models.Instance) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetInstanceOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetInstanceNotFoundCode is the HTTP code returned for type GetInstanceNotFound
const GetInstanceNotFoundCode int = 404

/*
GetInstanceNotFound Invalid instance ID was provided.

swagger:response getInstanceNotFound
*/
type GetInstanceNotFound struct {
}

// NewGetInstanceNotFound creates GetInstanceNotFound with default headers values
func NewGetInstanceNotFound() *GetInstanceNotFound {

	return &GetInstanceNotFound{}
}

// WriteResponse to the client
func (o *GetInstanceNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}
