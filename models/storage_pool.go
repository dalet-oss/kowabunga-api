// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StoragePool storage pool
//
// swagger:model StoragePool
type StoragePool struct {

	// The local Ceph Monitor(s) address or FQDN, empty for local pool type.
	CephAddress *string `json:"ceph_address,omitempty"`

	// The local Ceph Monitor(s) port (default 3300), empty for local pool type.
	CephPort *int64 `json:"ceph_port,omitempty"`

	// The libvirt secret UUID for CephX authentication, empty for local pool type.
	CephSecretUUID string `json:"ceph_secret_uuid,omitempty"`

	// Cost associated to the storage pool.
	Cost *Cost `json:"cost,omitempty"`

	// The storage pool description.
	Description string `json:"description,omitempty"`

	// The storage pool ID (auto-generated).
	ID string `json:"id,omitempty"`

	// The storage pool name.
	// Required: true
	Name *string `json:"name"`

	// The libvirt pool name.
	// Required: true
	Pool *string `json:"pool"`

	// The storage pool type.
	// Enum: [local rbd]
	Type *string `json:"type,omitempty"`
}

// Validate validates this storage pool
func (m *StoragePool) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePool(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StoragePool) validateCost(formats strfmt.Registry) error {
	if swag.IsZero(m.Cost) { // not required
		return nil
	}

	if m.Cost != nil {
		if err := m.Cost.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cost")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cost")
			}
			return err
		}
	}

	return nil
}

func (m *StoragePool) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *StoragePool) validatePool(formats strfmt.Registry) error {

	if err := validate.Required("pool", "body", m.Pool); err != nil {
		return err
	}

	return nil
}

var storagePoolTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["local","rbd"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storagePoolTypeTypePropEnum = append(storagePoolTypeTypePropEnum, v)
	}
}

const (

	// StoragePoolTypeLocal captures enum value "local"
	StoragePoolTypeLocal string = "local"

	// StoragePoolTypeRbd captures enum value "rbd"
	StoragePoolTypeRbd string = "rbd"
)

// prop value enum
func (m *StoragePool) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, storagePoolTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StoragePool) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this storage pool based on the context it is used
func (m *StoragePool) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCost(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StoragePool) contextValidateCost(ctx context.Context, formats strfmt.Registry) error {

	if m.Cost != nil {
		if err := m.Cost.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cost")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cost")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StoragePool) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StoragePool) UnmarshalBinary(b []byte) error {
	var res StoragePool
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
