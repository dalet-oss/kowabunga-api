// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StoragePool storage pool
//
// swagger:model StoragePool
type StoragePool struct {

	// The local Ceph Monitor(s) address or FQDN.
	// Required: true
	Address *string `json:"address"`

	// The storage pool description.
	Description string `json:"description,omitempty"`

	// The storage pool ID (auto-generated).
	ID string `json:"id,omitempty"`

	// The storage pool name.
	// Required: true
	Name *string `json:"name"`

	// The local Ceph RBD pool name.
	// Required: true
	Pool *string `json:"pool"`

	// The local Ceph Monitor(s) port (default 3300).
	Port *int64 `json:"port,omitempty"`

	// The libvirt secret UUID for CephX authentication.
	SecretUUID string `json:"secret_uuid,omitempty"`
}

// Validate validates this storage pool
func (m *StoragePool) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePool(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StoragePool) validateAddress(formats strfmt.Registry) error {

	if err := validate.Required("address", "body", m.Address); err != nil {
		return err
	}

	return nil
}

func (m *StoragePool) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *StoragePool) validatePool(formats strfmt.Registry) error {

	if err := validate.Required("pool", "body", m.Pool); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this storage pool based on context it is used
func (m *StoragePool) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StoragePool) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StoragePool) UnmarshalBinary(b []byte) error {
	var res StoragePool
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
