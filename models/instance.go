// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Instance instance
//
// swagger:model Instance
type Instance struct {

	// The instance ID  (auto-generated).
	ID string `json:"id,omitempty"`

	// the name of the Virtual Machine
	// Required: true
	Name *string `json:"name"`

	// is the VM a template ?
	Template *bool `json:"template,omitempty"`

	// topology
	// Required: true
	Topology *InstanceTopology `json:"topology"`

	// the libvirt ID of the Virtual Machine (auto-generated).
	VMID string `json:"vm_id,omitempty"`

	// the libvirt UUID of the Virtual Machine (auto-generated).
	VMUUID string `json:"vm_uuid,omitempty"`
}

// Validate validates this instance
func (m *Instance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTopology(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Instance) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Instance) validateTopology(formats strfmt.Registry) error {

	if err := validate.Required("topology", "body", m.Topology); err != nil {
		return err
	}

	if m.Topology != nil {
		if err := m.Topology.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("topology")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("topology")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this instance based on the context it is used
func (m *Instance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTopology(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Instance) contextValidateTopology(ctx context.Context, formats strfmt.Registry) error {

	if m.Topology != nil {
		if err := m.Topology.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("topology")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("topology")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Instance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Instance) UnmarshalBinary(b []byte) error {
	var res Instance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
