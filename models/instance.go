// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Instance instance
//
// swagger:model Instance
type Instance struct {

	// a list of existing network adapters to be connected to the instance.
	Adapters []string `json:"adapters"`

	// The virtual machine description.
	Description string `json:"description,omitempty"`

	// The virtual machine instance ID  (auto-generated).
	ID string `json:"id,omitempty"`

	// the virtual machine's memory size (in bytes).
	// Required: true
	Memory *int64 `json:"memory"`

	// The virtual machine name
	// Required: true
	Name *string `json:"name"`

	// Type of operating system (useful to determine cloud-init parameters for instance)
	// Enum: [linux windows]
	Os *string `json:"os,omitempty"`

	// the virtual machine's number of vCPUs.
	// Required: true
	Vcpus *int64 `json:"vcpus"`

	// a list of existing storage volumes (i.e. disks) to be connected to the instance.
	Volumes []string `json:"volumes"`
}

// Validate validates this instance
func (m *Instance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMemory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcpus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Instance) validateMemory(formats strfmt.Registry) error {

	if err := validate.Required("memory", "body", m.Memory); err != nil {
		return err
	}

	return nil
}

func (m *Instance) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var instanceTypeOsPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["linux","windows"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		instanceTypeOsPropEnum = append(instanceTypeOsPropEnum, v)
	}
}

const (

	// InstanceOsLinux captures enum value "linux"
	InstanceOsLinux string = "linux"

	// InstanceOsWindows captures enum value "windows"
	InstanceOsWindows string = "windows"
)

// prop value enum
func (m *Instance) validateOsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, instanceTypeOsPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Instance) validateOs(formats strfmt.Registry) error {
	if swag.IsZero(m.Os) { // not required
		return nil
	}

	// value enum
	if err := m.validateOsEnum("os", "body", *m.Os); err != nil {
		return err
	}

	return nil
}

func (m *Instance) validateVcpus(formats strfmt.Registry) error {

	if err := validate.Required("vcpus", "body", m.Vcpus); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this instance based on context it is used
func (m *Instance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Instance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Instance) UnmarshalBinary(b []byte) error {
	var res Instance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
