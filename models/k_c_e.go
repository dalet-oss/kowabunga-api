// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KCE Kowabunga Compute Engine (KCE) is a wrapper object for bare virtual machines. It consists of an instance, one to several attached volumes and 2 network adapters (a private one, a public one). This is the prefered way for creating virtual machines. IP addresses will be automatically assigned.
//
// swagger:model KCE
type KCE struct {

	// The KCE virtual machine's extra data disk size (in bytes). If unspecified, no extra data disk will be assigned.
	DataDisk int64 `json:"data_disk,omitempty"`

	// The KCE virtual machine description.
	Description string `json:"description,omitempty"`

	// The KCE virtual machine's OS disk size (in bytes).
	// Required: true
	Disk *int64 `json:"disk"`

	// The KCE ID  (auto-generated).
	ID string `json:"id,omitempty"`

	// The KCE virtual machine's memory size (in bytes).
	// Required: true
	Memory *int64 `json:"memory"`

	// The KCE virtual machine name
	// Required: true
	Name *string `json:"name"`

	// The KCE virtual machine's number of vCPUs.
	// Required: true
	Vcpus *int64 `json:"vcpus"`
}

// Validate validates this k c e
func (m *KCE) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcpus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KCE) validateDisk(formats strfmt.Registry) error {

	if err := validate.Required("disk", "body", m.Disk); err != nil {
		return err
	}

	return nil
}

func (m *KCE) validateMemory(formats strfmt.Registry) error {

	if err := validate.Required("memory", "body", m.Memory); err != nil {
		return err
	}

	return nil
}

func (m *KCE) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *KCE) validateVcpus(formats strfmt.Registry) error {

	if err := validate.Required("vcpus", "body", m.Vcpus); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this k c e based on context it is used
func (m *KCE) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *KCE) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KCE) UnmarshalBinary(b []byte) error {
	var res KCE
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
