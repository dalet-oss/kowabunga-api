// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Subnet subnet
//
// swagger:model Subnet
type Subnet struct {

	// The subnet CIDR (e.g. 192.168.0.0/24).
	// Required: true
	Cidr *string `json:"cidr"`

	// The subnet description.
	Description string `json:"description,omitempty"`

	// The subnet DNS server IP address (gateway value if unspecified).
	DNS string `json:"dns,omitempty"`

	// The list of extra routes to be access through designated gateway (format is 10.0.0.0/8).
	ExtraRoutes []string `json:"extra_routes"`

	// The subnet router/gateway IP address (e.g. 192.168.0.254).
	// Required: true
	Gateway *string `json:"gateway"`

	// The subnet ID (auto-generated).
	ID string `json:"id,omitempty"`

	// The subnet name.
	// Required: true
	Name *string `json:"name"`

	// The subnet list of reserved IPv4 ranges (i.e. no IP address can be assigned from there).
	Reserved []*IPRange `json:"reserved"`
}

// Validate validates this subnet
func (m *Subnet) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCidr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGateway(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReserved(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Subnet) validateCidr(formats strfmt.Registry) error {

	if err := validate.Required("cidr", "body", m.Cidr); err != nil {
		return err
	}

	return nil
}

func (m *Subnet) validateGateway(formats strfmt.Registry) error {

	if err := validate.Required("gateway", "body", m.Gateway); err != nil {
		return err
	}

	return nil
}

func (m *Subnet) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Subnet) validateReserved(formats strfmt.Registry) error {
	if swag.IsZero(m.Reserved) { // not required
		return nil
	}

	for i := 0; i < len(m.Reserved); i++ {
		if swag.IsZero(m.Reserved[i]) { // not required
			continue
		}

		if m.Reserved[i] != nil {
			if err := m.Reserved[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("reserved" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("reserved" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this subnet based on the context it is used
func (m *Subnet) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateReserved(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Subnet) contextValidateReserved(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Reserved); i++ {

		if m.Reserved[i] != nil {
			if err := m.Reserved[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("reserved" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("reserved" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Subnet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Subnet) UnmarshalBinary(b []byte) error {
	var res Subnet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
