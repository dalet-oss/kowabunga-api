// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HostCaps host caps
//
// swagger:model HostCaps
type HostCaps struct {

	// cpu
	CPU *HostCapsCPU `json:"cpu,omitempty"`

	// the host memory size in bytes
	Memory int64 `json:"memory,omitempty"`

	// the host UUID
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this host caps
func (m *HostCaps) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCPU(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HostCaps) validateCPU(formats strfmt.Registry) error {
	if swag.IsZero(m.CPU) { // not required
		return nil
	}

	if m.CPU != nil {
		if err := m.CPU.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cpu")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cpu")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this host caps based on the context it is used
func (m *HostCaps) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCPU(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HostCaps) contextValidateCPU(ctx context.Context, formats strfmt.Registry) error {

	if m.CPU != nil {
		if err := m.CPU.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cpu")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cpu")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HostCaps) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HostCaps) UnmarshalBinary(b []byte) error {
	var res HostCaps
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HostCapsCPU the host CPU characteristics
//
// swagger:model HostCapsCPU
type HostCapsCPU struct {

	// the host CPU architecture
	Arch string `json:"arch,omitempty"`

	// the host CPU number of cores
	Cores int64 `json:"cores,omitempty"`

	// the host CPU model
	Model string `json:"model,omitempty"`

	// the host CPU number of sockets
	Sockets int64 `json:"sockets,omitempty"`

	// the host CPU number of threads
	Threads int64 `json:"threads,omitempty"`

	// the host CPU vendor
	Vendor string `json:"vendor,omitempty"`
}

// Validate validates this host caps CPU
func (m *HostCapsCPU) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this host caps CPU based on context it is used
func (m *HostCapsCPU) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HostCapsCPU) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HostCapsCPU) UnmarshalBinary(b []byte) error {
	var res HostCapsCPU
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
