// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Project project
//
// swagger:model Project
type Project struct {

	// The project default public SSH key, to be associated to bootstrap user. Will use Kowabunga's default configuration one if unspecified.
	BootstrapPubkey string `json:"bootstrap_pubkey,omitempty"`

	// The project default service user name, created at cloud-init instance bootstrap phase. Will use Kowabunga's default configuration one if unspecified.
	BootstrapUser string `json:"bootstrap_user,omitempty"`

	// The project description.
	Description string `json:"description,omitempty"`

	// The project associated internal domain name (e.g. myproject.acme.com).
	Domain string `json:"domain,omitempty"`

	// The project associated email address, used to receive notifications.
	// Required: true
	Email *string `json:"email"`

	// The project ID (auto-generated).
	ID string `json:"id,omitempty"`

	// A list of metadata to be associated to the project
	Metadatas []*Metadata `json:"metadatas"`

	// The project name.
	// Required: true
	Name *string `json:"name"`

	// The project's owner name.
	// Required: true
	Owner *string `json:"owner"`

	// The assigned project VPC private subnets IDs (read-only).
	PrivateSubnets []*ZoneSubnet `json:"private_subnets"`

	// The global project resource quotas (0 for unlimited)
	Quotas *ProjectResources `json:"quotas,omitempty"`

	// The project default root password, set at cloud-init instance bootstrap phase. Will be randomly auto-generated at each instance creation if unspecified.
	RootPassword string `json:"root_password,omitempty"`

	// A list of tags to be associated to the project.
	Tags []string `json:"tags"`
}

// Validate validates this project
func (m *Project) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadatas(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivateSubnets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuotas(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Project) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *Project) validateMetadatas(formats strfmt.Registry) error {
	if swag.IsZero(m.Metadatas) { // not required
		return nil
	}

	for i := 0; i < len(m.Metadatas); i++ {
		if swag.IsZero(m.Metadatas[i]) { // not required
			continue
		}

		if m.Metadatas[i] != nil {
			if err := m.Metadatas[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("metadatas" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("metadatas" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Project) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Project) validateOwner(formats strfmt.Registry) error {

	if err := validate.Required("owner", "body", m.Owner); err != nil {
		return err
	}

	return nil
}

func (m *Project) validatePrivateSubnets(formats strfmt.Registry) error {
	if swag.IsZero(m.PrivateSubnets) { // not required
		return nil
	}

	for i := 0; i < len(m.PrivateSubnets); i++ {
		if swag.IsZero(m.PrivateSubnets[i]) { // not required
			continue
		}

		if m.PrivateSubnets[i] != nil {
			if err := m.PrivateSubnets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("private_subnets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("private_subnets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Project) validateQuotas(formats strfmt.Registry) error {
	if swag.IsZero(m.Quotas) { // not required
		return nil
	}

	if m.Quotas != nil {
		if err := m.Quotas.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quotas")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("quotas")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this project based on the context it is used
func (m *Project) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMetadatas(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrivateSubnets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQuotas(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Project) contextValidateMetadatas(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Metadatas); i++ {

		if m.Metadatas[i] != nil {
			if err := m.Metadatas[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("metadatas" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("metadatas" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Project) contextValidatePrivateSubnets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PrivateSubnets); i++ {

		if m.PrivateSubnets[i] != nil {
			if err := m.PrivateSubnets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("private_subnets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("private_subnets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Project) contextValidateQuotas(ctx context.Context, formats strfmt.Registry) error {

	if m.Quotas != nil {
		if err := m.Quotas.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quotas")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("quotas")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Project) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Project) UnmarshalBinary(b []byte) error {
	var res Project
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
