// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Template template
//
// swagger:model Template
type Template struct {

	// The volume template description.
	Description string `json:"description,omitempty"`

	// The volume template ID (auto-generated).
	ID string `json:"id,omitempty"`

	// The type of volume template.
	// Enum: [os raw]
	Kind *string `json:"kind,omitempty"`

	// The volume template name.
	// Required: true
	Name *string `json:"name"`

	// Type of operating system if OS kind (useful to determine cloud-init parameters for instance)
	// Enum: [linux windows]
	Os *string `json:"os,omitempty"`
}

// Validate validates this template
func (m *Template) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var templateTypeKindPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["os","raw"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		templateTypeKindPropEnum = append(templateTypeKindPropEnum, v)
	}
}

const (

	// TemplateKindOs captures enum value "os"
	TemplateKindOs string = "os"

	// TemplateKindRaw captures enum value "raw"
	TemplateKindRaw string = "raw"
)

// prop value enum
func (m *Template) validateKindEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, templateTypeKindPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Template) validateKind(formats strfmt.Registry) error {
	if swag.IsZero(m.Kind) { // not required
		return nil
	}

	// value enum
	if err := m.validateKindEnum("kind", "body", *m.Kind); err != nil {
		return err
	}

	return nil
}

func (m *Template) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var templateTypeOsPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["linux","windows"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		templateTypeOsPropEnum = append(templateTypeOsPropEnum, v)
	}
}

const (

	// TemplateOsLinux captures enum value "linux"
	TemplateOsLinux string = "linux"

	// TemplateOsWindows captures enum value "windows"
	TemplateOsWindows string = "windows"
)

// prop value enum
func (m *Template) validateOsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, templateTypeOsPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Template) validateOs(formats strfmt.Registry) error {
	if swag.IsZero(m.Os) { // not required
		return nil
	}

	// value enum
	if err := m.validateOsEnum("os", "body", *m.Os); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this template based on context it is used
func (m *Template) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Template) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Template) UnmarshalBinary(b []byte) error {
	var res Template
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
