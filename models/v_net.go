// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VNet v net
//
// swagger:model VNet
type VNet struct {

	// The virtual network description.
	Description string `json:"description,omitempty"`

	// The virtual network ID (auto-generated).
	ID string `json:"id,omitempty"`

	// The libvirt's bridge network interface (brX).
	// Required: true
	Interface *string `json:"interface"`

	// The virtual network name.
	// Required: true
	Name *string `json:"name"`

	// Is the virtual network adapter connected to private (LAN) or public (WAN) physical network ?
	Private *bool `json:"private,omitempty"`

	// The VLAN identifier.
	// Required: true
	Vlan *int64 `json:"vlan"`
}

// Validate validates this v net
func (m *VNet) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInterface(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVlan(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VNet) validateInterface(formats strfmt.Registry) error {

	if err := validate.Required("interface", "body", m.Interface); err != nil {
		return err
	}

	return nil
}

func (m *VNet) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *VNet) validateVlan(formats strfmt.Registry) error {

	if err := validate.Required("vlan", "body", m.Vlan); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v net based on context it is used
func (m *VNet) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VNet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VNet) UnmarshalBinary(b []byte) error {
	var res VNet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
